// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "base_modifier.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CMsgVector } from "./networkbasetypes";
/**
 * @generated from protobuf message CModifierTableEntry
 */
export interface CModifierTableEntry {
  /**
   * @generated from protobuf field: MODIFIER_ENTRY_TYPE entry_type = 1;
   */
  entryType: MODIFIER_ENTRY_TYPE;
  /**
   * @generated from protobuf field: uint32 parent = 2;
   */
  parent: number;
  /**
   * @generated from protobuf field: uint32 serial_number = 3;
   */
  serialNumber: number;
  /**
   * @generated from protobuf field: optional uint32 modifier_subclass = 4;
   */
  modifierSubclass?: number;
  /**
   * @generated from protobuf field: optional int32 stack_count = 5;
   */
  stackCount?: number;
  /**
   * @generated from protobuf field: optional int32 max_stack_count = 6;
   */
  maxStackCount?: number;
  /**
   * @generated from protobuf field: optional float last_applied_time = 7;
   */
  lastAppliedTime?: number;
  /**
   * @generated from protobuf field: optional float duration = 8;
   */
  duration?: number;
  /**
   * @generated from protobuf field: optional uint32 caster = 9;
   */
  caster?: number;
  /**
   * @generated from protobuf field: optional uint32 ability = 10;
   */
  ability?: number;
  /**
   * @generated from protobuf field: optional int32 aura_provider_serial_number = 11;
   */
  auraProviderSerialNumber?: number;
  /**
   * @generated from protobuf field: optional uint32 aura_provider_ehandle = 12;
   */
  auraProviderEhandle?: number;
  /**
   * @generated from protobuf field: optional uint32 ability_subclass = 13;
   */
  abilitySubclass?: number;
  /**
   * @generated from protobuf field: optional bool bool1_ = 20;
   */
  bool1?: boolean;
  /**
   * @generated from protobuf field: optional bool bool2_ = 21;
   */
  bool2?: boolean;
  /**
   * @generated from protobuf field: optional bool bool3_ = 22;
   */
  bool3?: boolean;
  /**
   * @generated from protobuf field: optional bool bool4_ = 23;
   */
  bool4?: boolean;
  /**
   * @generated from protobuf field: optional int32 int1_ = 25;
   */
  int1?: number;
  /**
   * @generated from protobuf field: optional int32 int2_ = 26;
   */
  int2?: number;
  /**
   * @generated from protobuf field: optional int32 int3_ = 27;
   */
  int3?: number;
  /**
   * @generated from protobuf field: optional int32 int4_ = 28;
   */
  int4?: number;
  /**
   * @generated from protobuf field: optional float float1_ = 30;
   */
  float1?: number;
  /**
   * @generated from protobuf field: optional float float2_ = 31;
   */
  float2?: number;
  /**
   * @generated from protobuf field: optional float float3_ = 32;
   */
  float3?: number;
  /**
   * @generated from protobuf field: optional float float4_ = 33;
   */
  float4?: number;
  /**
   * @generated from protobuf field: optional float float5_ = 49;
   */
  float5?: number;
  /**
   * @generated from protobuf field: optional float float6_ = 50;
   */
  float6?: number;
  /**
   * @generated from protobuf field: optional float float7_ = 51;
   */
  float7?: number;
  /**
   * @generated from protobuf field: optional float float8_ = 52;
   */
  float8?: number;
  /**
   * @generated from protobuf field: optional float float9_ = 53;
   */
  float9?: number;
  /**
   * @generated from protobuf field: optional float float10_ = 54;
   */
  float10?: number;
  /**
   * @generated from protobuf field: optional uint64 uint1_ = 35;
   */
  uint1?: bigint;
  /**
   * @generated from protobuf field: optional uint64 uint2_ = 36;
   */
  uint2?: bigint;
  /**
   * @generated from protobuf field: optional uint64 uint3_ = 37;
   */
  uint3?: bigint;
  /**
   * @generated from protobuf field: optional uint64 uint4_ = 38;
   */
  uint4?: bigint;
  /**
   * @generated from protobuf field: optional CMsgVector vec1_ = 40;
   */
  vec1?: CMsgVector;
  /**
   * @generated from protobuf field: optional CMsgVector vec2_ = 41;
   */
  vec2?: CMsgVector;
  /**
   * @generated from protobuf field: optional CMsgVector vec3_ = 42;
   */
  vec3?: CMsgVector;
  /**
   * @generated from protobuf field: optional CMsgVector vec4_ = 43;
   */
  vec4?: CMsgVector;
  /**
   * @generated from protobuf field: optional string string1_ = 45;
   */
  string1?: string;
  /**
   * @generated from protobuf field: optional string string2_ = 46;
   */
  string2?: string;
  /**
   * @generated from protobuf field: optional string string3_ = 47;
   */
  string3?: string;
  /**
   * @generated from protobuf field: optional string string4_ = 48;
   */
  string4?: string;
}
/**
 * @generated from protobuf enum MODIFIER_ENTRY_TYPE
 */
export enum MODIFIER_ENTRY_TYPE {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: MODIFIER_ENTRY_TYPE_ACTIVE = 1;
   */
  MODIFIER_ENTRY_TYPE_ACTIVE = 1,
  /**
   * @generated from protobuf enum value: MODIFIER_ENTRY_TYPE_REMOVED = 2;
   */
  MODIFIER_ENTRY_TYPE_REMOVED = 2,
}
// @generated message type with reflection information, may provide speed optimized methods
class CModifierTableEntry$Type extends MessageType<CModifierTableEntry> {
  constructor() {
    super("CModifierTableEntry", [
      {
        no: 1,
        name: "entry_type",
        kind: "enum",
        T: () => ["MODIFIER_ENTRY_TYPE", MODIFIER_ENTRY_TYPE],
      },
      { no: 2, name: "parent", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
      {
        no: 3,
        name: "serial_number",
        kind: "scalar",
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "modifier_subclass",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "stack_count",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 6,
        name: "max_stack_count",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 7,
        name: "last_applied_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 8,
        name: "duration",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 9,
        name: "caster",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "ability",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "aura_provider_serial_number",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 12,
        name: "aura_provider_ehandle",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "ability_subclass",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 20,
        name: "bool1_",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 21,
        name: "bool2_",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 22,
        name: "bool3_",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 23,
        name: "bool4_",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 25,
        name: "int1_",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 26,
        name: "int2_",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 27,
        name: "int3_",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 28,
        name: "int4_",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 30,
        name: "float1_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 31,
        name: "float2_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 32,
        name: "float3_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 33,
        name: "float4_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 49,
        name: "float5_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 50,
        name: "float6_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 51,
        name: "float7_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 52,
        name: "float8_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 53,
        name: "float9_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 54,
        name: "float10_",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 35,
        name: "uint1_",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 36,
        name: "uint2_",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 37,
        name: "uint3_",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 38,
        name: "uint4_",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 40, name: "vec1_", kind: "message", T: () => CMsgVector },
      { no: 41, name: "vec2_", kind: "message", T: () => CMsgVector },
      { no: 42, name: "vec3_", kind: "message", T: () => CMsgVector },
      { no: 43, name: "vec4_", kind: "message", T: () => CMsgVector },
      {
        no: 45,
        name: "string1_",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 46,
        name: "string2_",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 47,
        name: "string3_",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 48,
        name: "string4_",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CModifierTableEntry>): CModifierTableEntry {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.entryType = 0;
    message.parent = 0;
    message.serialNumber = 0;
    if (value !== undefined)
      reflectionMergePartial<CModifierTableEntry>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CModifierTableEntry,
  ): CModifierTableEntry {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* MODIFIER_ENTRY_TYPE entry_type */ 1:
          message.entryType = reader.int32();
          break;
        case /* uint32 parent */ 2:
          message.parent = reader.uint32();
          break;
        case /* uint32 serial_number */ 3:
          message.serialNumber = reader.uint32();
          break;
        case /* optional uint32 modifier_subclass */ 4:
          message.modifierSubclass = reader.uint32();
          break;
        case /* optional int32 stack_count */ 5:
          message.stackCount = reader.int32();
          break;
        case /* optional int32 max_stack_count */ 6:
          message.maxStackCount = reader.int32();
          break;
        case /* optional float last_applied_time */ 7:
          message.lastAppliedTime = reader.float();
          break;
        case /* optional float duration */ 8:
          message.duration = reader.float();
          break;
        case /* optional uint32 caster */ 9:
          message.caster = reader.uint32();
          break;
        case /* optional uint32 ability */ 10:
          message.ability = reader.uint32();
          break;
        case /* optional int32 aura_provider_serial_number */ 11:
          message.auraProviderSerialNumber = reader.int32();
          break;
        case /* optional uint32 aura_provider_ehandle */ 12:
          message.auraProviderEhandle = reader.uint32();
          break;
        case /* optional uint32 ability_subclass */ 13:
          message.abilitySubclass = reader.uint32();
          break;
        case /* optional bool bool1_ */ 20:
          message.bool1 = reader.bool();
          break;
        case /* optional bool bool2_ */ 21:
          message.bool2 = reader.bool();
          break;
        case /* optional bool bool3_ */ 22:
          message.bool3 = reader.bool();
          break;
        case /* optional bool bool4_ */ 23:
          message.bool4 = reader.bool();
          break;
        case /* optional int32 int1_ */ 25:
          message.int1 = reader.int32();
          break;
        case /* optional int32 int2_ */ 26:
          message.int2 = reader.int32();
          break;
        case /* optional int32 int3_ */ 27:
          message.int3 = reader.int32();
          break;
        case /* optional int32 int4_ */ 28:
          message.int4 = reader.int32();
          break;
        case /* optional float float1_ */ 30:
          message.float1 = reader.float();
          break;
        case /* optional float float2_ */ 31:
          message.float2 = reader.float();
          break;
        case /* optional float float3_ */ 32:
          message.float3 = reader.float();
          break;
        case /* optional float float4_ */ 33:
          message.float4 = reader.float();
          break;
        case /* optional float float5_ */ 49:
          message.float5 = reader.float();
          break;
        case /* optional float float6_ */ 50:
          message.float6 = reader.float();
          break;
        case /* optional float float7_ */ 51:
          message.float7 = reader.float();
          break;
        case /* optional float float8_ */ 52:
          message.float8 = reader.float();
          break;
        case /* optional float float9_ */ 53:
          message.float9 = reader.float();
          break;
        case /* optional float float10_ */ 54:
          message.float10 = reader.float();
          break;
        case /* optional uint64 uint1_ */ 35:
          message.uint1 = reader.uint64().toBigInt();
          break;
        case /* optional uint64 uint2_ */ 36:
          message.uint2 = reader.uint64().toBigInt();
          break;
        case /* optional uint64 uint3_ */ 37:
          message.uint3 = reader.uint64().toBigInt();
          break;
        case /* optional uint64 uint4_ */ 38:
          message.uint4 = reader.uint64().toBigInt();
          break;
        case /* optional CMsgVector vec1_ */ 40:
          message.vec1 = CMsgVector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.vec1,
          );
          break;
        case /* optional CMsgVector vec2_ */ 41:
          message.vec2 = CMsgVector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.vec2,
          );
          break;
        case /* optional CMsgVector vec3_ */ 42:
          message.vec3 = CMsgVector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.vec3,
          );
          break;
        case /* optional CMsgVector vec4_ */ 43:
          message.vec4 = CMsgVector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.vec4,
          );
          break;
        case /* optional string string1_ */ 45:
          message.string1 = reader.string();
          break;
        case /* optional string string2_ */ 46:
          message.string2 = reader.string();
          break;
        case /* optional string string3_ */ 47:
          message.string3 = reader.string();
          break;
        case /* optional string string4_ */ 48:
          message.string4 = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CModifierTableEntry,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* MODIFIER_ENTRY_TYPE entry_type = 1; */
    if (message.entryType !== 0)
      writer.tag(1, WireType.Varint).int32(message.entryType);
    /* uint32 parent = 2; */
    if (message.parent !== 0)
      writer.tag(2, WireType.Varint).uint32(message.parent);
    /* uint32 serial_number = 3; */
    if (message.serialNumber !== 0)
      writer.tag(3, WireType.Varint).uint32(message.serialNumber);
    /* optional uint32 modifier_subclass = 4; */
    if (message.modifierSubclass !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.modifierSubclass);
    /* optional int32 stack_count = 5; */
    if (message.stackCount !== undefined)
      writer.tag(5, WireType.Varint).int32(message.stackCount);
    /* optional int32 max_stack_count = 6; */
    if (message.maxStackCount !== undefined)
      writer.tag(6, WireType.Varint).int32(message.maxStackCount);
    /* optional float last_applied_time = 7; */
    if (message.lastAppliedTime !== undefined)
      writer.tag(7, WireType.Bit32).float(message.lastAppliedTime);
    /* optional float duration = 8; */
    if (message.duration !== undefined)
      writer.tag(8, WireType.Bit32).float(message.duration);
    /* optional uint32 caster = 9; */
    if (message.caster !== undefined)
      writer.tag(9, WireType.Varint).uint32(message.caster);
    /* optional uint32 ability = 10; */
    if (message.ability !== undefined)
      writer.tag(10, WireType.Varint).uint32(message.ability);
    /* optional int32 aura_provider_serial_number = 11; */
    if (message.auraProviderSerialNumber !== undefined)
      writer.tag(11, WireType.Varint).int32(message.auraProviderSerialNumber);
    /* optional uint32 aura_provider_ehandle = 12; */
    if (message.auraProviderEhandle !== undefined)
      writer.tag(12, WireType.Varint).uint32(message.auraProviderEhandle);
    /* optional uint32 ability_subclass = 13; */
    if (message.abilitySubclass !== undefined)
      writer.tag(13, WireType.Varint).uint32(message.abilitySubclass);
    /* optional bool bool1_ = 20; */
    if (message.bool1 !== undefined)
      writer.tag(20, WireType.Varint).bool(message.bool1);
    /* optional bool bool2_ = 21; */
    if (message.bool2 !== undefined)
      writer.tag(21, WireType.Varint).bool(message.bool2);
    /* optional bool bool3_ = 22; */
    if (message.bool3 !== undefined)
      writer.tag(22, WireType.Varint).bool(message.bool3);
    /* optional bool bool4_ = 23; */
    if (message.bool4 !== undefined)
      writer.tag(23, WireType.Varint).bool(message.bool4);
    /* optional int32 int1_ = 25; */
    if (message.int1 !== undefined)
      writer.tag(25, WireType.Varint).int32(message.int1);
    /* optional int32 int2_ = 26; */
    if (message.int2 !== undefined)
      writer.tag(26, WireType.Varint).int32(message.int2);
    /* optional int32 int3_ = 27; */
    if (message.int3 !== undefined)
      writer.tag(27, WireType.Varint).int32(message.int3);
    /* optional int32 int4_ = 28; */
    if (message.int4 !== undefined)
      writer.tag(28, WireType.Varint).int32(message.int4);
    /* optional float float1_ = 30; */
    if (message.float1 !== undefined)
      writer.tag(30, WireType.Bit32).float(message.float1);
    /* optional float float2_ = 31; */
    if (message.float2 !== undefined)
      writer.tag(31, WireType.Bit32).float(message.float2);
    /* optional float float3_ = 32; */
    if (message.float3 !== undefined)
      writer.tag(32, WireType.Bit32).float(message.float3);
    /* optional float float4_ = 33; */
    if (message.float4 !== undefined)
      writer.tag(33, WireType.Bit32).float(message.float4);
    /* optional float float5_ = 49; */
    if (message.float5 !== undefined)
      writer.tag(49, WireType.Bit32).float(message.float5);
    /* optional float float6_ = 50; */
    if (message.float6 !== undefined)
      writer.tag(50, WireType.Bit32).float(message.float6);
    /* optional float float7_ = 51; */
    if (message.float7 !== undefined)
      writer.tag(51, WireType.Bit32).float(message.float7);
    /* optional float float8_ = 52; */
    if (message.float8 !== undefined)
      writer.tag(52, WireType.Bit32).float(message.float8);
    /* optional float float9_ = 53; */
    if (message.float9 !== undefined)
      writer.tag(53, WireType.Bit32).float(message.float9);
    /* optional float float10_ = 54; */
    if (message.float10 !== undefined)
      writer.tag(54, WireType.Bit32).float(message.float10);
    /* optional uint64 uint1_ = 35; */
    if (message.uint1 !== undefined)
      writer.tag(35, WireType.Varint).uint64(message.uint1);
    /* optional uint64 uint2_ = 36; */
    if (message.uint2 !== undefined)
      writer.tag(36, WireType.Varint).uint64(message.uint2);
    /* optional uint64 uint3_ = 37; */
    if (message.uint3 !== undefined)
      writer.tag(37, WireType.Varint).uint64(message.uint3);
    /* optional uint64 uint4_ = 38; */
    if (message.uint4 !== undefined)
      writer.tag(38, WireType.Varint).uint64(message.uint4);
    /* optional CMsgVector vec1_ = 40; */
    if (message.vec1)
      CMsgVector.internalBinaryWrite(
        message.vec1,
        writer.tag(40, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgVector vec2_ = 41; */
    if (message.vec2)
      CMsgVector.internalBinaryWrite(
        message.vec2,
        writer.tag(41, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgVector vec3_ = 42; */
    if (message.vec3)
      CMsgVector.internalBinaryWrite(
        message.vec3,
        writer.tag(42, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgVector vec4_ = 43; */
    if (message.vec4)
      CMsgVector.internalBinaryWrite(
        message.vec4,
        writer.tag(43, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional string string1_ = 45; */
    if (message.string1 !== undefined)
      writer.tag(45, WireType.LengthDelimited).string(message.string1);
    /* optional string string2_ = 46; */
    if (message.string2 !== undefined)
      writer.tag(46, WireType.LengthDelimited).string(message.string2);
    /* optional string string3_ = 47; */
    if (message.string3 !== undefined)
      writer.tag(47, WireType.LengthDelimited).string(message.string3);
    /* optional string string4_ = 48; */
    if (message.string4 !== undefined)
      writer.tag(48, WireType.LengthDelimited).string(message.string4);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CModifierTableEntry
 */
export const CModifierTableEntry = new CModifierTableEntry$Type();
