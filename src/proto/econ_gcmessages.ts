// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "econ_gcmessages.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CExtraMsgBlock } from "./gcsdk_gcmessages";
import { EGCMsgResponse } from "./econ_shared_enums";
import { CSOEconItem } from "./base_gcmessages";
/**
 * @generated from protobuf message CMsgApplyAutograph
 */
export interface CMsgApplyAutograph {
    /**
     * @generated from protobuf field: optional uint64 autograph_item_id = 1;
     */
    autographItemId?: bigint;
    /**
     * @generated from protobuf field: optional uint64 item_item_id = 2;
     */
    itemItemId?: bigint;
}
/**
 * @generated from protobuf message CMsgAdjustItemEquippedState
 */
export interface CMsgAdjustItemEquippedState {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 new_class = 2;
     */
    newClass?: number;
    /**
     * @generated from protobuf field: optional uint32 new_slot = 3;
     */
    newSlot?: number;
    /**
     * @generated from protobuf field: optional uint32 style_index = 4;
     */
    styleIndex?: number;
}
/**
 * @generated from protobuf message CMsgEconPlayerStrangeCountAdjustment
 */
export interface CMsgEconPlayerStrangeCountAdjustment {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: repeated CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
     */
    strangeCountAdjustments: CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment[];
    /**
     * @generated from protobuf field: optional bool turbo_mode = 3;
     */
    turboMode?: boolean;
}
/**
 * @generated from protobuf message CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment
 */
export interface CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment {
    /**
     * @generated from protobuf field: optional uint32 event_type = 1;
     */
    eventType?: number;
    /**
     * @generated from protobuf field: optional uint64 item_id = 2;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 adjustment = 3;
     */
    adjustment?: number;
}
/**
 * @generated from protobuf message CMsgCraftingResponse
 */
export interface CMsgCraftingResponse {
    /**
     * @generated from protobuf field: repeated uint64 item_ids = 1;
     */
    itemIds: bigint[];
}
/**
 * @generated from protobuf message CMsgGCRequestStoreSalesData
 */
export interface CMsgGCRequestStoreSalesData {
    /**
     * @generated from protobuf field: optional uint32 version = 1;
     */
    version?: number;
    /**
     * @generated from protobuf field: optional uint32 currency = 2;
     */
    currency?: number;
}
/**
 * @generated from protobuf message CMsgGCRequestStoreSalesDataResponse
 */
export interface CMsgGCRequestStoreSalesDataResponse {
    /**
     * @generated from protobuf field: repeated CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
     */
    salePrice: CMsgGCRequestStoreSalesDataResponse_Price[];
    /**
     * @generated from protobuf field: optional uint32 version = 2;
     */
    version?: number;
    /**
     * @generated from protobuf field: optional uint32 expiration_time = 3;
     */
    expirationTime?: number;
}
/**
 * @generated from protobuf message CMsgGCRequestStoreSalesDataResponse.Price
 */
export interface CMsgGCRequestStoreSalesDataResponse_Price {
    /**
     * @generated from protobuf field: optional uint32 item_def = 1;
     */
    itemDef?: number;
    /**
     * @generated from protobuf field: optional uint32 price = 2;
     */
    price?: number;
}
/**
 * @generated from protobuf message CMsgGCRequestStoreSalesDataUpToDateResponse
 */
export interface CMsgGCRequestStoreSalesDataUpToDateResponse {
    /**
     * @generated from protobuf field: optional uint32 version = 1;
     */
    version?: number;
    /**
     * @generated from protobuf field: optional uint32 expiration_time = 2;
     */
    expirationTime?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCPingRequest
 */
export interface CMsgGCToGCPingRequest {
}
/**
 * @generated from protobuf message CMsgGCToGCPingResponse
 */
export interface CMsgGCToGCPingResponse {
}
/**
 * @generated from protobuf message CMsgGCToGCGetUserSessionServer
 */
export interface CMsgGCToGCGetUserSessionServer {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGetUserSessionServerResponse
 */
export interface CMsgGCToGCGetUserSessionServerResponse {
    /**
     * @generated from protobuf field: optional fixed64 server_steam_id = 1;
     */
    serverSteamId?: bigint;
    /**
     * @generated from protobuf field: optional bool is_online = 2;
     */
    isOnline?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCGetUserServerMembers
 */
export interface CMsgGCToGCGetUserServerMembers {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 max_spectators = 2;
     */
    maxSpectators?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGetUserServerMembersResponse
 */
export interface CMsgGCToGCGetUserServerMembersResponse {
    /**
     * @generated from protobuf field: repeated uint32 member_account_id = 1;
     */
    memberAccountId: number[];
}
/**
 * @generated from protobuf message CMsgLookupMultipleAccountNames
 */
export interface CMsgLookupMultipleAccountNames {
    /**
     * @generated from protobuf field: repeated uint32 accountids = 1 [packed = true];
     */
    accountids: number[];
}
/**
 * @generated from protobuf message CMsgLookupMultipleAccountNamesResponse
 */
export interface CMsgLookupMultipleAccountNamesResponse {
    /**
     * @generated from protobuf field: repeated CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
     */
    accounts: CMsgLookupMultipleAccountNamesResponse_Account[];
}
/**
 * @generated from protobuf message CMsgLookupMultipleAccountNamesResponse.Account
 */
export interface CMsgLookupMultipleAccountNamesResponse_Account {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional string persona = 2;
     */
    persona?: string;
}
/**
 * @generated from protobuf message CMsgRequestCrateItems
 */
export interface CMsgRequestCrateItems {
    /**
     * @generated from protobuf field: optional uint32 crate_item_def = 1;
     */
    crateItemDef?: number;
}
/**
 * @generated from protobuf message CMsgRequestCrateItemsResponse
 */
export interface CMsgRequestCrateItemsResponse {
    /**
     * @generated from protobuf field: optional uint32 response = 1;
     */
    response?: number;
    /**
     * @generated from protobuf field: repeated uint32 item_defs = 2;
     */
    itemDefs: number[];
    /**
     * @generated from protobuf field: repeated uint32 peek_item_defs = 3;
     */
    peekItemDefs: number[];
    /**
     * @generated from protobuf field: repeated CSOEconItem peek_items = 4;
     */
    peekItems: CSOEconItem[];
}
/**
 * @generated from protobuf enum CMsgRequestCrateItemsResponse.EResult
 */
export enum CMsgRequestCrateItemsResponse_EResult {
    /**
     * @generated from protobuf enum value: k_Succeeded = 0;
     */
    k_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_Failed = 1;
     */
    k_Failed = 1
}
/**
 * @generated from protobuf message CMsgRequestCrateEscalationLevel
 */
export interface CMsgRequestCrateEscalationLevel {
    /**
     * @generated from protobuf field: optional uint32 crate_item_def = 1;
     */
    crateItemDef?: number;
}
/**
 * @generated from protobuf message CMsgRequestCrateEscalationLevelResponse
 */
export interface CMsgRequestCrateEscalationLevelResponse {
    /**
     * @generated from protobuf field: optional uint32 response = 1;
     */
    response?: number;
    /**
     * @generated from protobuf field: optional uint32 escalation_level0 = 2;
     */
    escalationLevel0?: number;
    /**
     * @generated from protobuf field: optional uint32 escalation_level1 = 3;
     */
    escalationLevel1?: number;
    /**
     * @generated from protobuf field: optional uint32 escalation_level2 = 4;
     */
    escalationLevel2?: number;
    /**
     * @generated from protobuf field: optional uint32 escalation_level3 = 5;
     */
    escalationLevel3?: number;
}
/**
 * @generated from protobuf enum CMsgRequestCrateEscalationLevelResponse.EResult
 */
export enum CMsgRequestCrateEscalationLevelResponse_EResult {
    /**
     * @generated from protobuf enum value: k_Succeeded = 0;
     */
    k_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_Failed = 1;
     */
    k_Failed = 1
}
/**
 * @generated from protobuf message CMsgGCToGCCanUseDropRateBonus
 */
export interface CMsgGCToGCCanUseDropRateBonus {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional float drop_rate_bonus = 2;
     */
    dropRateBonus?: number;
    /**
     * @generated from protobuf field: optional uint32 booster_type = 3;
     */
    boosterType?: number;
    /**
     * @generated from protobuf field: optional uint32 exclusive_item_def = 4;
     */
    exclusiveItemDef?: number;
    /**
     * @generated from protobuf field: optional bool allow_equal_rate = 5;
     */
    allowEqualRate?: boolean;
}
/**
 * @generated from protobuf message CMsgSQLAddDropRateBonus
 */
export interface CMsgSQLAddDropRateBonus {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint64 item_id = 2;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 item_def = 3;
     */
    itemDef?: number;
    /**
     * @generated from protobuf field: optional float drop_rate_bonus = 4;
     */
    dropRateBonus?: number;
    /**
     * @generated from protobuf field: optional uint32 booster_type = 5;
     */
    boosterType?: number;
    /**
     * @generated from protobuf field: optional uint32 seconds_duration = 6;
     */
    secondsDuration?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time_stamp = 7;
     */
    endTimeStamp?: number;
}
/**
 * @generated from protobuf message CMsgSQLUpgradeBattleBooster
 */
export interface CMsgSQLUpgradeBattleBooster {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 item_def = 2;
     */
    itemDef?: number;
    /**
     * @generated from protobuf field: optional float bonus_to_add = 3;
     */
    bonusToAdd?: number;
    /**
     * @generated from protobuf field: optional uint32 booster_type = 4;
     */
    boosterType?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCRefreshSOCache
 */
export interface CMsgGCToGCRefreshSOCache {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional bool reload = 2;
     */
    reload?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCAddSubscriptionTime
 */
export interface CMsgGCToGCAddSubscriptionTime {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: repeated uint32 matching_subscription_def_indexes = 2;
     */
    matchingSubscriptionDefIndexes: number[];
    /**
     * @generated from protobuf field: optional uint32 additional_seconds = 3;
     */
    additionalSeconds?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGrantAccountRolledItems
 */
export interface CMsgGCToGCGrantAccountRolledItems {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: repeated CMsgGCToGCGrantAccountRolledItems.Item items = 2;
     */
    items: CMsgGCToGCGrantAccountRolledItems_Item[];
    /**
     * @generated from protobuf field: optional uint32 audit_action = 3;
     */
    auditAction?: number;
    /**
     * @generated from protobuf field: optional uint64 audit_data = 4;
     */
    auditData?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCGrantAccountRolledItems.Item
 */
export interface CMsgGCToGCGrantAccountRolledItems_Item {
    /**
     * @generated from protobuf field: optional uint32 item_def = 1;
     */
    itemDef?: number;
    /**
     * @generated from protobuf field: repeated string loot_lists = 2;
     */
    lootLists: string[];
    /**
     * @generated from protobuf field: optional bool ignore_limit = 3;
     */
    ignoreLimit?: boolean;
    /**
     * @generated from protobuf field: optional uint32 origin = 4;
     */
    origin?: number;
    /**
     * @generated from protobuf field: repeated CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5;
     */
    dynamicAttributes: CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute[];
    /**
     * @generated from protobuf field: repeated CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6;
     */
    additionalAuditEntries: CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry[];
    /**
     * @generated from protobuf field: optional uint32 inventory_token = 7;
     */
    inventoryToken?: number;
    /**
     * @generated from protobuf field: optional int32 quality = 8;
     */
    quality?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute
 */
export interface CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional uint32 value_uint32 = 2;
     */
    valueUint32?: number;
    /**
     * @generated from protobuf field: optional float value_float = 3;
     */
    valueFloat?: number;
    /**
     * @generated from protobuf field: optional string value_string = 4;
     */
    valueString?: string;
}
/**
 * @generated from protobuf message CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry
 */
export interface CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry {
    /**
     * @generated from protobuf field: optional uint32 owner_account_id = 1;
     */
    ownerAccountId?: number;
    /**
     * @generated from protobuf field: optional uint32 audit_action = 2;
     */
    auditAction?: number;
    /**
     * @generated from protobuf field: optional uint64 audit_data = 3;
     */
    auditData?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCBetaDeleteItems
 */
export interface CMsgGCToGCBetaDeleteItems {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: repeated uint64 item_ids = 2;
     */
    itemIds: bigint[];
    /**
     * @generated from protobuf field: repeated uint32 item_defs = 3;
     */
    itemDefs: number[];
}
/**
 * @generated from protobuf message CMsgGCToGCGrantSelfMadeItemToAccount
 */
export interface CMsgGCToGCGrantSelfMadeItemToAccount {
    /**
     * @generated from protobuf field: optional uint32 item_def_index = 1;
     */
    itemDefIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 accountid = 2;
     */
    accountid?: number;
}
/**
 * @generated from protobuf message CMsgUseItem
 */
export interface CMsgUseItem {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional fixed64 target_steam_id = 2;
     */
    targetSteamId?: bigint;
    /**
     * @generated from protobuf field: repeated uint32 gift__potential_targets = 3;
     */
    giftPotentialTargets: number[];
    /**
     * @generated from protobuf field: optional uint32 duel__class_lock = 4;
     */
    duelClassLock?: number;
    /**
     * @generated from protobuf field: optional uint64 initiator_steam_id = 5;
     */
    initiatorSteamId?: bigint;
    /**
     * @generated from protobuf field: optional bool itempack__ack_immediately = 6;
     */
    itempackAckImmediately?: boolean;
}
/**
 * @generated from protobuf message CMsgServerUseItem
 */
export interface CMsgServerUseItem {
    /**
     * @generated from protobuf field: optional uint32 initiator_account_id = 1;
     */
    initiatorAccountId?: number;
    /**
     * @generated from protobuf field: optional CMsgUseItem use_item_msg = 2;
     */
    useItemMsg?: CMsgUseItem;
}
/**
 * @generated from protobuf message CMsgUseMultipleItems
 */
export interface CMsgUseMultipleItems {
    /**
     * @generated from protobuf field: repeated uint64 item_ids = 1;
     */
    itemIds: bigint[];
}
/**
 * @generated from protobuf message CGCStoreRechargeRedirect_LineItem
 */
export interface CGCStoreRechargeRedirect_LineItem {
    /**
     * @generated from protobuf field: optional uint32 item_def_id = 1;
     */
    itemDefId?: number;
    /**
     * @generated from protobuf field: optional uint32 quantity = 2;
     */
    quantity?: number;
}
/**
 * @generated from protobuf message CMsgGCEconSQLWorkItemEmbeddedRollbackData
 */
export interface CMsgGCEconSQLWorkItemEmbeddedRollbackData {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint64 deleted_item_id = 2;
     */
    deletedItemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 old_audit_action = 3;
     */
    oldAuditAction?: number;
    /**
     * @generated from protobuf field: optional uint32 new_audit_action = 4;
     */
    newAuditAction?: number;
    /**
     * @generated from protobuf field: optional uint32 expected_audit_action = 5;
     */
    expectedAuditAction?: number;
}
/**
 * @generated from protobuf message CMsgCraftStatue
 */
export interface CMsgCraftStatue {
    /**
     * @generated from protobuf field: optional uint32 heroid = 1;
     */
    heroid?: number;
    /**
     * @generated from protobuf field: optional string sequencename = 2;
     */
    sequencename?: string;
    /**
     * @generated from protobuf field: optional float cycle = 3;
     */
    cycle?: number;
    /**
     * @generated from protobuf field: optional string description = 4;
     */
    description?: string;
    /**
     * @generated from protobuf field: optional uint32 pedestal_itemdef = 5;
     */
    pedestalItemdef?: number;
    /**
     * @generated from protobuf field: optional uint64 toolid = 6;
     */
    toolid?: bigint;
}
/**
 * @generated from protobuf message CMsgRedeemCode
 */
export interface CMsgRedeemCode {
    /**
     * @generated from protobuf field: optional string code = 1;
     */
    code?: string;
}
/**
 * @generated from protobuf message CMsgRedeemCodeResponse
 */
export interface CMsgRedeemCodeResponse {
    /**
     * @generated from protobuf field: optional uint32 response = 1;
     */
    response?: number;
    /**
     * @generated from protobuf field: optional uint64 item_id = 2;
     */
    itemId?: bigint;
}
/**
 * @generated from protobuf enum CMsgRedeemCodeResponse.EResultCode
 */
export enum CMsgRedeemCodeResponse_EResultCode {
    /**
     * @generated from protobuf enum value: k_Succeeded = 0;
     */
    k_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_Failed_CodeNotFound = 1;
     */
    k_Failed_CodeNotFound = 1,
    /**
     * @generated from protobuf enum value: k_Failed_CodeAlreadyUsed = 2;
     */
    k_Failed_CodeAlreadyUsed = 2,
    /**
     * @generated from protobuf enum value: k_Failed_OtherError = 3;
     */
    k_Failed_OtherError = 3
}
/**
 * @generated from protobuf message CMsgDevNewItemRequest
 */
export interface CMsgDevNewItemRequest {
    /**
     * @generated from protobuf field: optional string item_def_name = 3;
     */
    itemDefName?: string;
    /**
     * @generated from protobuf field: optional string loot_list_name = 4;
     */
    lootListName?: string;
    /**
     * @generated from protobuf field: repeated string attr_def_name = 5;
     */
    attrDefName: string[];
    /**
     * @generated from protobuf field: repeated string attr_value = 6;
     */
    attrValue: string[];
    /**
     * @generated from protobuf field: optional uint32 item_quality = 7;
     */
    itemQuality?: number;
}
/**
 * @generated from protobuf message CMsgDevNewItemRequestResponse
 */
export interface CMsgDevNewItemRequestResponse {
    /**
     * @generated from protobuf field: optional bool success = 1;
     */
    success?: boolean;
}
/**
 * @generated from protobuf message CMsgDevUnlockAllItemStyles
 */
export interface CMsgDevUnlockAllItemStyles {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
}
/**
 * @generated from protobuf message CMsgDevUnlockAllItemStylesResponse
 */
export interface CMsgDevUnlockAllItemStylesResponse {
    /**
     * @generated from protobuf field: optional bool success = 1;
     */
    success?: boolean;
}
/**
 * @generated from protobuf message CMsgGCGetAccountSubscriptionItem
 */
export interface CMsgGCGetAccountSubscriptionItem {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
}
/**
 * @generated from protobuf message CMsgGCGetAccountSubscriptionItemResponse
 */
export interface CMsgGCGetAccountSubscriptionItemResponse {
    /**
     * @generated from protobuf field: optional uint32 def_index = 1;
     */
    defIndex?: number;
}
/**
 * @generated from protobuf message CMsgGCAddGiftItem
 */
export interface CMsgGCAddGiftItem {
    /**
     * @generated from protobuf field: optional uint32 gifter_account_id = 1;
     */
    gifterAccountId?: number;
    /**
     * @generated from protobuf field: optional uint32 receiver_account_id = 2;
     */
    receiverAccountId?: number;
    /**
     * @generated from protobuf field: optional CSOEconItem wrapped_item = 3;
     */
    wrappedItem?: CSOEconItem;
    /**
     * @generated from protobuf field: optional string gift_message = 4;
     */
    giftMessage?: string;
    /**
     * @generated from protobuf field: optional bool is_wallet_cash_trusted = 5;
     */
    isWalletCashTrusted?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCWrapAndDeliverGift
 */
export interface CMsgClientToGCWrapAndDeliverGift {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 give_to_account_id = 2;
     */
    giveToAccountId?: number;
    /**
     * @generated from protobuf field: optional string gift_message = 3;
     */
    giftMessage?: string;
}
/**
 * @generated from protobuf message CMsgSQLGCToGCRevokeUntrustedGift
 */
export interface CMsgSQLGCToGCRevokeUntrustedGift {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint64 sent_item_id = 4;
     */
    sentItemId?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCWrapAndDeliverGiftResponse
 */
export interface CMsgClientToGCWrapAndDeliverGiftResponse {
    /**
     * @generated from protobuf field: optional EGCMsgResponse response = 1;
     */
    response?: EGCMsgResponse;
    /**
     * @generated from protobuf field: optional uint32 gifting_charge_uses = 2;
     */
    giftingChargeUses?: number;
    /**
     * @generated from protobuf field: optional int32 gifting_charge_max = 3;
     */
    giftingChargeMax?: number;
    /**
     * @generated from protobuf field: optional uint32 gifting_uses = 4;
     */
    giftingUses?: number;
    /**
     * @generated from protobuf field: optional int32 gifting_max = 5;
     */
    giftingMax?: number;
    /**
     * @generated from protobuf field: optional uint32 gifting_window_hours = 6;
     */
    giftingWindowHours?: number;
    /**
     * @generated from protobuf field: optional EGCMsgInitiateTradeResponse trade_restriction = 7;
     */
    tradeRestriction?: EGCMsgInitiateTradeResponse;
}
/**
 * @generated from protobuf message CMsgClientToGCUnwrapGift
 */
export interface CMsgClientToGCUnwrapGift {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCGetGiftPermissions
 */
export interface CMsgClientToGCGetGiftPermissions {
}
/**
 * @generated from protobuf message CMsgClientToGCGetGiftPermissionsResponse
 */
export interface CMsgClientToGCGetGiftPermissionsResponse {
    /**
     * @generated from protobuf field: optional bool is_unlimited = 1;
     */
    isUnlimited?: boolean;
    /**
     * @generated from protobuf field: optional bool has_two_factor = 3;
     */
    hasTwoFactor?: boolean;
    /**
     * @generated from protobuf field: optional EGCMsgInitiateTradeResponse sender_permission = 6;
     */
    senderPermission?: EGCMsgInitiateTradeResponse;
    /**
     * @generated from protobuf field: optional uint32 friendship_age_requirement = 7;
     */
    friendshipAgeRequirement?: number;
    /**
     * @generated from protobuf field: optional uint32 friendship_age_requirement_two_factor = 8;
     */
    friendshipAgeRequirementTwoFactor?: number;
    /**
     * @generated from protobuf field: repeated CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9;
     */
    friendPermissions: CMsgClientToGCGetGiftPermissionsResponse_FriendPermission[];
}
/**
 * @generated from protobuf message CMsgClientToGCGetGiftPermissionsResponse.FriendPermission
 */
export interface CMsgClientToGCGetGiftPermissionsResponse_FriendPermission {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional EGCMsgInitiateTradeResponse permission = 2;
     */
    permission?: EGCMsgInitiateTradeResponse;
}
/**
 * @generated from protobuf message CMsgClientToGCUnpackBundle
 */
export interface CMsgClientToGCUnpackBundle {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCUnpackBundleResponse
 */
export interface CMsgClientToGCUnpackBundleResponse {
    /**
     * @generated from protobuf field: repeated uint64 unpacked_item_ids = 1;
     */
    unpackedItemIds: bigint[];
    /**
     * @generated from protobuf field: optional CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2;
     */
    response?: CMsgClientToGCUnpackBundleResponse_EUnpackBundle;
    /**
     * @generated from protobuf field: repeated uint32 unpacked_item_def_indexes = 3;
     */
    unpackedItemDefIndexes: number[];
}
/**
 * @generated from protobuf enum CMsgClientToGCUnpackBundleResponse.EUnpackBundle
 */
export enum CMsgClientToGCUnpackBundleResponse_EUnpackBundle {
    /**
     * @generated from protobuf enum value: k_UnpackBundle_Succeeded = 0;
     */
    k_UnpackBundle_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_UnpackBundle_Failed_ItemIsNotBundle = 1;
     */
    k_UnpackBundle_Failed_ItemIsNotBundle = 1,
    /**
     * @generated from protobuf enum value: k_UnpackBundle_Failed_UnableToCreateContainedItem = 2;
     */
    k_UnpackBundle_Failed_UnableToCreateContainedItem = 2,
    /**
     * @generated from protobuf enum value: k_UnpackBundle_Failed_SOCacheError = 3;
     */
    k_UnpackBundle_Failed_SOCacheError = 3,
    /**
     * @generated from protobuf enum value: k_UnpackBundle_Failed_ItemIsInvalid = 4;
     */
    k_UnpackBundle_Failed_ItemIsInvalid = 4,
    /**
     * @generated from protobuf enum value: k_UnpackBundle_Failed_BadItemQuantity = 5;
     */
    k_UnpackBundle_Failed_BadItemQuantity = 5,
    /**
     * @generated from protobuf enum value: k_UnpackBundle_Failed_UnableToDeleteItem = 6;
     */
    k_UnpackBundle_Failed_UnableToDeleteItem = 6
}
/**
 * @generated from protobuf message CMsgClientToGCPackBundle
 */
export interface CMsgClientToGCPackBundle {
    /**
     * @generated from protobuf field: repeated uint64 item_ids = 1;
     */
    itemIds: bigint[];
    /**
     * @generated from protobuf field: optional uint32 bundle_item_def_index = 2;
     */
    bundleItemDefIndex?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCPackBundleResponse
 */
export interface CMsgClientToGCPackBundleResponse {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional CMsgClientToGCPackBundleResponse.EPackBundle response = 2;
     */
    response?: CMsgClientToGCPackBundleResponse_EPackBundle;
}
/**
 * @generated from protobuf enum CMsgClientToGCPackBundleResponse.EPackBundle
 */
export enum CMsgClientToGCPackBundleResponse_EPackBundle {
    /**
     * @generated from protobuf enum value: k_PackBundle_Succeeded = 0;
     */
    k_PackBundle_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_InternalError = 1;
     */
    k_PackBundle_Failed_InternalError = 1,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsNotBundle = 2;
     */
    k_PackBundle_Failed_ItemIsNotBundle = 2,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_SOCacheError = 3;
     */
    k_PackBundle_Failed_SOCacheError = 3,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsInvalid = 4;
     */
    k_PackBundle_Failed_ItemIsInvalid = 4,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_BadItemQuantity = 5;
     */
    k_PackBundle_Failed_BadItemQuantity = 5,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_UnableToDeleteItem = 6;
     */
    k_PackBundle_Failed_UnableToDeleteItem = 6,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_BundleCannotBePacked = 7;
     */
    k_PackBundle_Failed_BundleCannotBePacked = 7,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsUntradeable = 8;
     */
    k_PackBundle_Failed_ItemIsUntradeable = 8,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsEquipped = 9;
     */
    k_PackBundle_Failed_ItemIsEquipped = 9,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_ItemHasGems = 10;
     */
    k_PackBundle_Failed_ItemHasGems = 10,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_ItemMixedQuality = 11;
     */
    k_PackBundle_Failed_ItemMixedQuality = 11,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_ItemInvalidQuality = 12;
     */
    k_PackBundle_Failed_ItemInvalidQuality = 12,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsNonEconomy = 13;
     */
    k_PackBundle_Failed_ItemIsNonEconomy = 13,
    /**
     * @generated from protobuf enum value: k_PackBundle_Failed_Disabled = 14;
     */
    k_PackBundle_Failed_Disabled = 14
}
/**
 * @generated from protobuf message CMsgGCToClientStoreTransactionCompleted
 */
export interface CMsgGCToClientStoreTransactionCompleted {
    /**
     * @generated from protobuf field: optional uint64 txn_id = 1;
     */
    txnId?: bigint;
    /**
     * @generated from protobuf field: repeated uint64 item_ids = 2;
     */
    itemIds: bigint[];
}
/**
 * @generated from protobuf message CMsgClientToGCEquipItems
 */
export interface CMsgClientToGCEquipItems {
    /**
     * @generated from protobuf field: repeated CMsgAdjustItemEquippedState equips = 1;
     */
    equips: CMsgAdjustItemEquippedState[];
}
/**
 * @generated from protobuf message CMsgClientToGCEquipItemsResponse
 */
export interface CMsgClientToGCEquipItemsResponse {
    /**
     * @generated from protobuf field: optional fixed64 so_cache_version_id = 1;
     */
    soCacheVersionId?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCSetItemStyle
 */
export interface CMsgClientToGCSetItemStyle {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 style_index = 2;
     */
    styleIndex?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCSetItemStyleResponse
 */
export interface CMsgClientToGCSetItemStyleResponse {
    /**
     * @generated from protobuf field: optional CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1;
     */
    response?: CMsgClientToGCSetItemStyleResponse_ESetStyle;
}
/**
 * @generated from protobuf enum CMsgClientToGCSetItemStyleResponse.ESetStyle
 */
export enum CMsgClientToGCSetItemStyleResponse_ESetStyle {
    /**
     * @generated from protobuf enum value: k_SetStyle_Succeeded = 0;
     */
    k_SetStyle_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_SetStyle_Failed = 1;
     */
    k_SetStyle_Failed = 1,
    /**
     * @generated from protobuf enum value: k_SetStyle_Failed_StyleIsLocked = 2;
     */
    k_SetStyle_Failed_StyleIsLocked = 2
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockItemStyle
 */
export interface CMsgClientToGCUnlockItemStyle {
    /**
     * @generated from protobuf field: optional uint64 item_to_unlock = 1;
     */
    itemToUnlock?: bigint;
    /**
     * @generated from protobuf field: optional uint32 style_index = 2;
     */
    styleIndex?: number;
    /**
     * @generated from protobuf field: repeated uint64 consumable_item_ids = 3;
     */
    consumableItemIds: bigint[];
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockItemStyleResponse
 */
export interface CMsgClientToGCUnlockItemStyleResponse {
    /**
     * @generated from protobuf field: optional CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1;
     */
    response?: CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle;
    /**
     * @generated from protobuf field: optional uint64 item_id = 2;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 style_index = 3;
     */
    styleIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 style_prereq = 4;
     */
    stylePrereq?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle
 */
export enum CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle {
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Succeeded = 0;
     */
    k_UnlockStyle_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_PreReq = 1;
     */
    k_UnlockStyle_Failed_PreReq = 1,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_CantAfford = 2;
     */
    k_UnlockStyle_Failed_CantAfford = 2,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_CantCommit = 3;
     */
    k_UnlockStyle_Failed_CantCommit = 3,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_CantLockCache = 4;
     */
    k_UnlockStyle_Failed_CantLockCache = 4,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_CantAffordAttrib = 5;
     */
    k_UnlockStyle_Failed_CantAffordAttrib = 5,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_CantAffordGem = 6;
     */
    k_UnlockStyle_Failed_CantAffordGem = 6,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_NoCompendiumLevel = 7;
     */
    k_UnlockStyle_Failed_NoCompendiumLevel = 7,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_AlreadyUnlocked = 8;
     */
    k_UnlockStyle_Failed_AlreadyUnlocked = 8,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_OtherError = 9;
     */
    k_UnlockStyle_Failed_OtherError = 9,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_ItemIsInvalid = 10;
     */
    k_UnlockStyle_Failed_ItemIsInvalid = 10,
    /**
     * @generated from protobuf enum value: k_UnlockStyle_Failed_ToolIsInvalid = 11;
     */
    k_UnlockStyle_Failed_ToolIsInvalid = 11
}
/**
 * @generated from protobuf message CMsgClientToGCSetItemInventoryCategory
 */
export interface CMsgClientToGCSetItemInventoryCategory {
    /**
     * @generated from protobuf field: repeated uint64 item_ids = 1;
     */
    itemIds: bigint[];
    /**
     * @generated from protobuf field: optional uint32 set_to_value = 2;
     */
    setToValue?: number;
    /**
     * @generated from protobuf field: optional uint32 remove_categories = 3;
     */
    removeCategories?: number;
    /**
     * @generated from protobuf field: optional uint32 add_categories = 4;
     */
    addCategories?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockCrate
 */
export interface CMsgClientToGCUnlockCrate {
    /**
     * @generated from protobuf field: optional uint64 crate_item_id = 1;
     */
    crateItemId?: bigint;
    /**
     * @generated from protobuf field: optional uint64 key_item_id = 2;
     */
    keyItemId?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockCrateResponse
 */
export interface CMsgClientToGCUnlockCrateResponse {
    /**
     * @generated from protobuf field: optional EGCMsgResponse result = 1;
     */
    result?: EGCMsgResponse;
    /**
     * @generated from protobuf field: repeated CMsgClientToGCUnlockCrateResponse.Item granted_items = 2;
     */
    grantedItems: CMsgClientToGCUnlockCrateResponse_Item[];
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockCrateResponse.Item
 */
export interface CMsgClientToGCUnlockCrateResponse_Item {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 def_index = 2;
     */
    defIndex?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCRemoveItemAttribute
 */
export interface CMsgClientToGCRemoveItemAttribute {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCRemoveItemAttributeResponse
 */
export interface CMsgClientToGCRemoveItemAttributeResponse {
    /**
     * @generated from protobuf field: optional CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1;
     */
    response?: CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute;
    /**
     * @generated from protobuf field: optional uint64 item_id = 2;
     */
    itemId?: bigint;
}
/**
 * @generated from protobuf enum CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute
 */
export enum CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute {
    /**
     * @generated from protobuf enum value: k_RemoveItemAttribute_Succeeded = 0;
     */
    k_RemoveItemAttribute_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_RemoveItemAttribute_Failed = 1;
     */
    k_RemoveItemAttribute_Failed = 1,
    /**
     * @generated from protobuf enum value: k_RemoveItemAttribute_Failed_ItemIsInvalid = 2;
     */
    k_RemoveItemAttribute_Failed_ItemIsInvalid = 2,
    /**
     * @generated from protobuf enum value: k_RemoveItemAttribute_Failed_AttributeCannotBeRemoved = 3;
     */
    k_RemoveItemAttribute_Failed_AttributeCannotBeRemoved = 3,
    /**
     * @generated from protobuf enum value: k_RemoveItemAttribute_Failed_AttributeDoesntExist = 4;
     */
    k_RemoveItemAttribute_Failed_AttributeDoesntExist = 4
}
/**
 * @generated from protobuf message CMsgClientToGCNameItem
 */
export interface CMsgClientToGCNameItem {
    /**
     * @generated from protobuf field: optional uint64 subject_item_id = 1;
     */
    subjectItemId?: bigint;
    /**
     * @generated from protobuf field: optional uint64 tool_item_id = 2;
     */
    toolItemId?: bigint;
    /**
     * @generated from protobuf field: optional string name = 3;
     */
    name?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCNameItemResponse
 */
export interface CMsgClientToGCNameItemResponse {
    /**
     * @generated from protobuf field: optional CMsgClientToGCNameItemResponse.ENameItem response = 1;
     */
    response?: CMsgClientToGCNameItemResponse_ENameItem;
    /**
     * @generated from protobuf field: optional uint64 item_id = 2;
     */
    itemId?: bigint;
}
/**
 * @generated from protobuf enum CMsgClientToGCNameItemResponse.ENameItem
 */
export enum CMsgClientToGCNameItemResponse_ENameItem {
    /**
     * @generated from protobuf enum value: k_NameItem_Succeeded = 0;
     */
    k_NameItem_Succeeded = 0,
    /**
     * @generated from protobuf enum value: k_NameItem_Failed = 1;
     */
    k_NameItem_Failed = 1,
    /**
     * @generated from protobuf enum value: k_NameItem_Failed_ToolIsInvalid = 2;
     */
    k_NameItem_Failed_ToolIsInvalid = 2,
    /**
     * @generated from protobuf enum value: k_NameItem_Failed_ItemIsInvalid = 3;
     */
    k_NameItem_Failed_ItemIsInvalid = 3,
    /**
     * @generated from protobuf enum value: k_NameItem_Failed_NameIsInvalid = 4;
     */
    k_NameItem_Failed_NameIsInvalid = 4
}
/**
 * @generated from protobuf message CMsgGCSetItemPosition
 */
export interface CMsgGCSetItemPosition {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 new_position = 2;
     */
    newPosition?: number;
}
/**
 * @generated from protobuf message CAttribute_ItemDynamicRecipeComponent
 */
export interface CAttribute_ItemDynamicRecipeComponent {
    /**
     * @generated from protobuf field: optional uint32 item_def = 1;
     */
    itemDef?: number;
    /**
     * @generated from protobuf field: optional uint32 item_quality = 2;
     */
    itemQuality?: number;
    /**
     * @generated from protobuf field: optional uint32 item_flags = 3;
     */
    itemFlags?: number;
    /**
     * @generated from protobuf field: optional string attributes_string = 4;
     */
    attributesString?: string;
    /**
     * @generated from protobuf field: optional uint32 item_count = 5;
     */
    itemCount?: number;
    /**
     * @generated from protobuf field: optional uint32 items_fulfilled = 6;
     */
    itemsFulfilled?: number;
    /**
     * @generated from protobuf field: optional uint32 item_rarity = 7;
     */
    itemRarity?: number;
    /**
     * @generated from protobuf field: optional string lootlist = 8;
     */
    lootlist?: string;
    /**
     * @generated from protobuf field: optional uint64 fulfilled_item_id = 9;
     */
    fulfilledItemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 associated_item_def = 10;
     */
    associatedItemDef?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket
 */
export interface CProtoItemSocket {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 attr_def_index = 2;
     */
    attrDefIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 required_type = 3;
     */
    requiredType?: number;
    /**
     * @generated from protobuf field: optional string required_hero = 4;
     */
    requiredHero?: string;
    /**
     * @generated from protobuf field: optional uint32 gem_def_index = 5;
     */
    gemDefIndex?: number;
    /**
     * @generated from protobuf field: optional bool not_tradable = 6;
     */
    notTradable?: boolean;
    /**
     * @generated from protobuf field: optional string required_item_slot = 7;
     */
    requiredItemSlot?: string;
}
/**
 * @generated from protobuf message CProtoItemSocket_Empty
 */
export interface CProtoItemSocket_Empty {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
}
/**
 * @generated from protobuf message CProtoItemSocket_Effect
 */
export interface CProtoItemSocket_Effect {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
    /**
     * @generated from protobuf field: optional uint32 effect = 2;
     */
    effect?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Color
 */
export interface CProtoItemSocket_Color {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
    /**
     * @generated from protobuf field: optional uint32 red = 2;
     */
    red?: number;
    /**
     * @generated from protobuf field: optional uint32 green = 3;
     */
    green?: number;
    /**
     * @generated from protobuf field: optional uint32 blue = 4;
     */
    blue?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Strange
 */
export interface CProtoItemSocket_Strange {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
    /**
     * @generated from protobuf field: optional uint32 strange_type = 2;
     */
    strangeType?: number;
    /**
     * @generated from protobuf field: optional uint32 strange_value = 3;
     */
    strangeValue?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY
 */
export interface CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
    /**
     * @generated from protobuf field: optional uint32 strange_type = 2;
     */
    strangeType?: number;
    /**
     * @generated from protobuf field: optional uint32 strange_value = 3;
     */
    strangeValue?: number;
    /**
     * @generated from protobuf field: optional uint32 ability_effect = 4;
     */
    abilityEffect?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Spectator
 */
export interface CProtoItemSocket_Spectator {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
    /**
     * @generated from protobuf field: optional uint32 games_viewed = 2;
     */
    gamesViewed?: number;
    /**
     * @generated from protobuf field: optional uint32 corporation_id = 3;
     */
    corporationId?: number;
    /**
     * @generated from protobuf field: optional uint32 league_id = 4;
     */
    leagueId?: number;
    /**
     * @generated from protobuf field: optional uint32 team_id = 5;
     */
    teamId?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_AssetModifier
 */
export interface CProtoItemSocket_AssetModifier {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
    /**
     * @generated from protobuf field: optional uint32 asset_modifier = 2;
     */
    assetModifier?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY
 */
export interface CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
    /**
     * @generated from protobuf field: optional uint32 asset_modifier = 2;
     */
    assetModifier?: number;
    /**
     * @generated from protobuf field: optional uint32 anim_modifier = 3;
     */
    animModifier?: number;
    /**
     * @generated from protobuf field: optional uint32 ability_effect = 4;
     */
    abilityEffect?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Autograph
 */
export interface CProtoItemSocket_Autograph {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
    /**
     * @generated from protobuf field: optional string autograph = 2;
     */
    autograph?: string;
    /**
     * @generated from protobuf field: optional uint32 autograph_id = 3;
     */
    autographId?: number;
    /**
     * @generated from protobuf field: optional uint32 autograph_score = 4;
     */
    autographScore?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_StaticVisuals
 */
export interface CProtoItemSocket_StaticVisuals {
    /**
     * @generated from protobuf field: optional CProtoItemSocket socket = 1;
     */
    socket?: CProtoItemSocket;
}
/**
 * @generated from protobuf message CAttribute_String
 */
export interface CAttribute_String {
    /**
     * @generated from protobuf field: optional string value = 1;
     */
    value?: string;
}
/**
 * @generated from protobuf message CWorkshop_GetItemDailyRevenue_Request
 */
export interface CWorkshop_GetItemDailyRevenue_Request {
    /**
     * @generated from protobuf field: optional uint32 appid = 1;
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional uint32 item_id = 2;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional uint32 date_start = 3;
     */
    dateStart?: number;
    /**
     * @generated from protobuf field: optional uint32 date_end = 4;
     */
    dateEnd?: number;
}
/**
 * @generated from protobuf message CWorkshop_GetItemDailyRevenue_Response
 */
export interface CWorkshop_GetItemDailyRevenue_Response {
    /**
     * @generated from protobuf field: repeated CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
     */
    countryRevenue: CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue[];
}
/**
 * @generated from protobuf message CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue
 */
export interface CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue {
    /**
     * @generated from protobuf field: optional string country_code = 1;
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional uint32 date = 2;
     */
    date?: number;
    /**
     * @generated from protobuf field: optional int64 revenue_usd = 3;
     */
    revenueUsd?: bigint;
    /**
     * @generated from protobuf field: optional int32 units = 4;
     */
    units?: number;
}
/**
 * @generated from protobuf message CWorkshop_GetPackageDailyRevenue_Request
 */
export interface CWorkshop_GetPackageDailyRevenue_Request {
    /**
     * @generated from protobuf field: optional uint32 packageid = 1;
     */
    packageid?: number;
    /**
     * @generated from protobuf field: optional uint32 date_start = 2;
     */
    dateStart?: number;
    /**
     * @generated from protobuf field: optional uint32 date_end = 3;
     */
    dateEnd?: number;
}
/**
 * @generated from protobuf message CWorkshop_GetPackageDailyRevenue_Response
 */
export interface CWorkshop_GetPackageDailyRevenue_Response {
    /**
     * @generated from protobuf field: repeated CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
     */
    countryRevenue: CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue[];
}
/**
 * @generated from protobuf message CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue
 */
export interface CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue {
    /**
     * @generated from protobuf field: optional string country_code = 1;
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional uint32 date = 2;
     */
    date?: number;
    /**
     * @generated from protobuf field: optional int64 revenue_usd = 3;
     */
    revenueUsd?: bigint;
    /**
     * @generated from protobuf field: optional int32 units = 4;
     */
    units?: number;
}
/**
 * @generated from protobuf message CMsgSQLGCToGCGrantBackpackSlots
 */
export interface CMsgSQLGCToGCGrantBackpackSlots {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 add_slots = 2;
     */
    addSlots?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCLookupAccountName
 */
export interface CMsgClientToGCLookupAccountName {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCLookupAccountNameResponse
 */
export interface CMsgClientToGCLookupAccountNameResponse {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional string account_name = 2;
     */
    accountName?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipe
 */
export interface CMsgClientToGCCreateStaticRecipe {
    /**
     * @generated from protobuf field: repeated CMsgClientToGCCreateStaticRecipe.Item items = 1;
     */
    items: CMsgClientToGCCreateStaticRecipe_Item[];
    /**
     * @generated from protobuf field: optional uint32 recipe_def_index = 2;
     */
    recipeDefIndex?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipe.Item
 */
export interface CMsgClientToGCCreateStaticRecipe_Item {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 slot_id = 2;
     */
    slotId?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipeResponse
 */
export interface CMsgClientToGCCreateStaticRecipeResponse {
    /**
     * @generated from protobuf field: optional CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1;
     */
    response?: CMsgClientToGCCreateStaticRecipeResponse_EResponse;
    /**
     * @generated from protobuf field: repeated CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2;
     */
    outputItems: CMsgClientToGCCreateStaticRecipeResponse_OutputItem[];
    /**
     * @generated from protobuf field: repeated CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3;
     */
    inputErrors: CMsgClientToGCCreateStaticRecipeResponse_InputError[];
    /**
     * @generated from protobuf field: repeated CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4;
     */
    additionalOutputs: CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput[];
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipeResponse.OutputItem
 */
export interface CMsgClientToGCCreateStaticRecipeResponse_OutputItem {
    /**
     * @generated from protobuf field: optional uint32 def_index = 1;
     */
    defIndex?: number;
    /**
     * @generated from protobuf field: optional uint64 item_id = 2;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 slot_id = 3;
     */
    slotId?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipeResponse.InputError
 */
export interface CMsgClientToGCCreateStaticRecipeResponse_InputError {
    /**
     * @generated from protobuf field: optional uint32 slot_id = 1;
     */
    slotId?: number;
    /**
     * @generated from protobuf field: optional CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2;
     */
    error?: CMsgClientToGCCreateStaticRecipeResponse_EResponse;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput
 */
export interface CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput {
    /**
     * @generated from protobuf field: optional uint32 slot_id = 1;
     */
    slotId?: number;
    /**
     * @generated from protobuf field: optional uint64 value = 2;
     */
    value?: bigint;
}
/**
 * @generated from protobuf enum CMsgClientToGCCreateStaticRecipeResponse.EResponse
 */
export enum CMsgClientToGCCreateStaticRecipeResponse_EResponse {
    /**
     * @generated from protobuf enum value: eResponse_Success = 0;
     */
    eResponse_Success = 0,
    /**
     * @generated from protobuf enum value: eResponse_OfferingDisabled = 1;
     */
    eResponse_OfferingDisabled = 1,
    /**
     * @generated from protobuf enum value: eResponse_InvalidItems = 2;
     */
    eResponse_InvalidItems = 2,
    /**
     * @generated from protobuf enum value: eResponse_InternalError = 3;
     */
    eResponse_InternalError = 3,
    /**
     * @generated from protobuf enum value: eResponse_MissingLeague = 4;
     */
    eResponse_MissingLeague = 4,
    /**
     * @generated from protobuf enum value: eResponse_MissingEvent = 5;
     */
    eResponse_MissingEvent = 5
}
/**
 * @generated from protobuf message CMsgProcessTransactionOrder
 */
export interface CMsgProcessTransactionOrder {
    /**
     * @generated from protobuf field: optional uint64 txn_id = 1;
     */
    txnId?: bigint;
    /**
     * @generated from protobuf field: optional uint64 steam_txn_id = 2;
     */
    steamTxnId?: bigint;
    /**
     * @generated from protobuf field: optional uint64 partner_txn_id = 3;
     */
    partnerTxnId?: bigint;
    /**
     * @generated from protobuf field: optional fixed64 steam_id = 4;
     */
    steamId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 time_stamp = 5;
     */
    timeStamp?: number;
    /**
     * @generated from protobuf field: optional uint64 watermark = 6;
     */
    watermark?: bigint;
    /**
     * @generated from protobuf field: optional int32 purchase_report_status = 7;
     */
    purchaseReportStatus?: number;
    /**
     * @generated from protobuf field: optional uint32 currency = 8;
     */
    currency?: number;
    /**
     * @generated from protobuf field: repeated CMsgProcessTransactionOrder.Item items = 9;
     */
    items: CMsgProcessTransactionOrder_Item[];
}
/**
 * @generated from protobuf message CMsgProcessTransactionOrder.Item
 */
export interface CMsgProcessTransactionOrder_Item {
    /**
     * @generated from protobuf field: optional uint32 item_def_index = 1;
     */
    itemDefIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 item_price = 2;
     */
    itemPrice?: number;
    /**
     * @generated from protobuf field: optional uint32 quantity = 3;
     */
    quantity?: number;
    /**
     * @generated from protobuf field: optional string category_desc = 4;
     */
    categoryDesc?: string;
    /**
     * @generated from protobuf field: optional uint32 store_purchase_type = 5;
     */
    storePurchaseType?: number;
    /**
     * @generated from protobuf field: optional uint64 source_reference_id = 6;
     */
    sourceReferenceId?: bigint;
    /**
     * @generated from protobuf field: optional int32 parent_stack_index = 7;
     */
    parentStackIndex?: number;
    /**
     * @generated from protobuf field: optional bool default_price = 8;
     */
    defaultPrice?: boolean;
    /**
     * @generated from protobuf field: optional bool is_user_facing = 9;
     */
    isUserFacing?: boolean;
    /**
     * @generated from protobuf field: optional int32 price_index = 11;
     */
    priceIndex?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCStoreProcessCDKeyTransaction
 */
export interface CMsgGCToGCStoreProcessCDKeyTransaction {
    /**
     * @generated from protobuf field: optional CMsgProcessTransactionOrder order = 1;
     */
    order?: CMsgProcessTransactionOrder;
    /**
     * @generated from protobuf field: optional uint32 reason_code = 2;
     */
    reasonCode?: number;
    /**
     * @generated from protobuf field: optional uint32 partner = 3;
     */
    partner?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCStoreProcessCDKeyTransactionResponse
 */
export interface CMsgGCToGCStoreProcessCDKeyTransactionResponse {
    /**
     * @generated from protobuf field: optional bool success = 1;
     */
    success?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCStoreProcessSettlement
 */
export interface CMsgGCToGCStoreProcessSettlement {
    /**
     * @generated from protobuf field: optional CMsgProcessTransactionOrder order = 1;
     */
    order?: CMsgProcessTransactionOrder;
}
/**
 * @generated from protobuf message CMsgGCToGCStoreProcessSettlementResponse
 */
export interface CMsgGCToGCStoreProcessSettlementResponse {
    /**
     * @generated from protobuf field: optional bool success = 1;
     */
    success?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCBroadcastConsoleCommand
 */
export interface CMsgGCToGCBroadcastConsoleCommand {
    /**
     * @generated from protobuf field: optional string con_command = 1;
     */
    conCommand?: string;
    /**
     * @generated from protobuf field: optional bool report_output = 2;
     */
    reportOutput?: boolean;
    /**
     * @generated from protobuf field: optional int32 sending_gc = 3;
     */
    sendingGc?: number;
    /**
     * @generated from protobuf field: optional string output_initiator = 4;
     */
    outputInitiator?: string;
    /**
     * @generated from protobuf field: optional string sender_source = 5;
     */
    senderSource?: string;
}
/**
 * @generated from protobuf message CMsgGCToGCConsoleOutput
 */
export interface CMsgGCToGCConsoleOutput {
    /**
     * @generated from protobuf field: optional string initiator = 1;
     */
    initiator?: string;
    /**
     * @generated from protobuf field: optional int32 sending_gc = 2;
     */
    sendingGc?: number;
    /**
     * @generated from protobuf field: repeated CMsgGCToGCConsoleOutput.OutputLine msgs = 3;
     */
    msgs: CMsgGCToGCConsoleOutput_OutputLine[];
    /**
     * @generated from protobuf field: optional bool is_last_for_source_job = 4;
     */
    isLastForSourceJob?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCConsoleOutput.OutputLine
 */
export interface CMsgGCToGCConsoleOutput_OutputLine {
    /**
     * @generated from protobuf field: optional string text = 1;
     */
    text?: string;
    /**
     * @generated from protobuf field: optional uint32 spew_level = 2;
     */
    spewLevel?: number;
}
/**
 * @generated from protobuf message CMsgItemAges
 */
export interface CMsgItemAges {
    /**
     * @generated from protobuf field: repeated CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1;
     */
    maxItemIdTimestamps: CMsgItemAges_MaxItemIDTimestamp[];
}
/**
 * @generated from protobuf message CMsgItemAges.MaxItemIDTimestamp
 */
export interface CMsgItemAges_MaxItemIDTimestamp {
    /**
     * @generated from protobuf field: optional uint32 timestamp = 1;
     */
    timestamp?: number;
    /**
     * @generated from protobuf field: optional uint64 max_item_id = 2;
     */
    maxItemId?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCInternalTestMsg
 */
export interface CMsgGCToGCInternalTestMsg {
    /**
     * @generated from protobuf field: optional int32 sending_gc = 1;
     */
    sendingGc?: number;
    /**
     * @generated from protobuf field: optional fixed64 sender_id = 2;
     */
    senderId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 context = 3;
     */
    context?: number;
    /**
     * @generated from protobuf field: optional uint32 message_id = 4;
     */
    messageId?: number;
    /**
     * @generated from protobuf field: optional bytes message_body = 5;
     */
    messageBody?: Uint8Array;
    /**
     * @generated from protobuf field: optional fixed64 job_id_source = 6;
     */
    jobIdSource?: bigint;
    /**
     * @generated from protobuf field: optional fixed64 job_id_target = 7;
     */
    jobIdTarget?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCClientServerVersionsUpdated
 */
export interface CMsgGCToGCClientServerVersionsUpdated {
    /**
     * @generated from protobuf field: optional uint32 client_min_allowed_version = 1;
     */
    clientMinAllowedVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 client_active_version = 2;
     */
    clientActiveVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 server_active_version = 3;
     */
    serverActiveVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 server_deployed_version = 4;
     */
    serverDeployedVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 what_changed = 5;
     */
    whatChanged?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCBroadcastMessageFromSub
 */
export interface CMsgGCToGCBroadcastMessageFromSub {
    /**
     * @generated from protobuf field: optional uint32 msg_id = 1;
     */
    msgId?: number;
    /**
     * @generated from protobuf field: optional bytes serialized_msg = 2;
     */
    serializedMsg?: Uint8Array;
    /**
     * @generated from protobuf field: repeated uint32 account_id_list = 3 [packed = true];
     */
    accountIdList: number[];
    /**
     * @generated from protobuf field: repeated fixed64 steam_id_list = 4 [packed = true];
     */
    steamIdList: bigint[];
}
/**
 * @generated from protobuf message CMsgGCToClientCurrencyPricePoints
 */
export interface CMsgGCToClientCurrencyPricePoints {
    /**
     * @generated from protobuf field: repeated uint64 price_key = 1 [packed = true];
     */
    priceKey: bigint[];
    /**
     * @generated from protobuf field: repeated CMsgGCToClientCurrencyPricePoints.Currency currencies = 2;
     */
    currencies: CMsgGCToClientCurrencyPricePoints_Currency[];
}
/**
 * @generated from protobuf message CMsgGCToClientCurrencyPricePoints.Currency
 */
export interface CMsgGCToClientCurrencyPricePoints_Currency {
    /**
     * @generated from protobuf field: optional uint32 currency_id = 1;
     */
    currencyId?: number;
    /**
     * @generated from protobuf field: repeated uint64 currency_price = 2 [packed = true];
     */
    currencyPrice: bigint[];
}
/**
 * @generated from protobuf message CMsgBannedWordList
 */
export interface CMsgBannedWordList {
    /**
     * @generated from protobuf field: optional uint32 version = 1;
     */
    version?: number;
    /**
     * @generated from protobuf field: repeated string banned_words = 2;
     */
    bannedWords: string[];
}
/**
 * @generated from protobuf message CMsgGCToGCFlushSteamInventoryCache
 */
export interface CMsgGCToGCFlushSteamInventoryCache {
    /**
     * @generated from protobuf field: repeated CMsgGCToGCFlushSteamInventoryCache.Key keys = 1;
     */
    keys: CMsgGCToGCFlushSteamInventoryCache_Key[];
}
/**
 * @generated from protobuf message CMsgGCToGCFlushSteamInventoryCache.Key
 */
export interface CMsgGCToGCFlushSteamInventoryCache_Key {
    /**
     * @generated from protobuf field: optional uint64 steamid = 1;
     */
    steamid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 contextid = 2;
     */
    contextid?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCUpdateSubscriptionItems
 */
export interface CMsgGCToGCUpdateSubscriptionItems {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional bool always_notify = 2;
     */
    alwaysNotify?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCSelfPing
 */
export interface CMsgGCToGCSelfPing {
    /**
     * @generated from protobuf field: optional uint32 sample_id = 1;
     */
    sampleId?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGetInfuxIntervalStats
 */
export interface CMsgGCToGCGetInfuxIntervalStats {
}
/**
 * @generated from protobuf message CMsgGCToGCGetInfuxIntervalStatsResponse
 */
export interface CMsgGCToGCGetInfuxIntervalStatsResponse {
    /**
     * @generated from protobuf field: repeated fixed32 stat_ids = 1 [packed = true];
     */
    statIds: number[];
    /**
     * @generated from protobuf field: repeated uint64 stat_total = 2 [packed = true];
     */
    statTotal: bigint[];
    /**
     * @generated from protobuf field: repeated uint32 stat_samples = 3 [packed = true];
     */
    statSamples: number[];
    /**
     * @generated from protobuf field: repeated uint32 stat_max = 4 [packed = true];
     */
    statMax: number[];
    /**
     * @generated from protobuf field: optional uint32 sample_duration_ms = 5;
     */
    sampleDurationMs?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCPurchaseSucceeded
 */
export interface CMsgGCToGCPurchaseSucceeded {
}
/**
 * @generated from protobuf message CMsgClientToGCGetLimitedItemPurchaseQuantity
 */
export interface CMsgClientToGCGetLimitedItemPurchaseQuantity {
    /**
     * @generated from protobuf field: optional uint32 item_def = 1;
     */
    itemDef?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetLimitedItemPurchaseQuantityResponse
 */
export interface CMsgClientToGCGetLimitedItemPurchaseQuantityResponse {
    /**
     * @generated from protobuf field: optional CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1;
     */
    result?: CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse;
    /**
     * @generated from protobuf field: optional uint32 quantity_purchased = 2;
     */
    quantityPurchased?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse
 */
export enum CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse {
    /**
     * @generated from protobuf enum value: k_eInternalError = 0;
     */
    k_eInternalError = 0,
    /**
     * @generated from protobuf enum value: k_eSuccess = 1;
     */
    k_eSuccess = 1,
    /**
     * @generated from protobuf enum value: k_eTooBusy = 2;
     */
    k_eTooBusy = 2,
    /**
     * @generated from protobuf enum value: k_eDisabled = 3;
     */
    k_eDisabled = 3,
    /**
     * @generated from protobuf enum value: k_eTimeout = 4;
     */
    k_eTimeout = 4,
    /**
     * @generated from protobuf enum value: k_eInvalidItemDef = 5;
     */
    k_eInvalidItemDef = 5,
    /**
     * @generated from protobuf enum value: k_eItemDefNotLimited = 6;
     */
    k_eItemDefNotLimited = 6
}
/**
 * @generated from protobuf message CMsgClientToGCGetInFlightItemCharges
 */
export interface CMsgClientToGCGetInFlightItemCharges {
    /**
     * @generated from protobuf field: optional uint32 item_def = 1;
     */
    itemDef?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetInFlightItemChargesResponse
 */
export interface CMsgClientToGCGetInFlightItemChargesResponse {
    /**
     * @generated from protobuf field: optional CMsgClientToGCGetInFlightItemChargesResponse.EResponse result = 1;
     */
    result?: CMsgClientToGCGetInFlightItemChargesResponse_EResponse;
    /**
     * @generated from protobuf field: optional uint32 charges_in_flight = 2;
     */
    chargesInFlight?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetInFlightItemChargesResponse.EResponse
 */
export enum CMsgClientToGCGetInFlightItemChargesResponse_EResponse {
    /**
     * @generated from protobuf enum value: k_eInternalError = 0;
     */
    k_eInternalError = 0,
    /**
     * @generated from protobuf enum value: k_eSuccess = 1;
     */
    k_eSuccess = 1,
    /**
     * @generated from protobuf enum value: k_eTooBusy = 2;
     */
    k_eTooBusy = 2,
    /**
     * @generated from protobuf enum value: k_eDisabled = 3;
     */
    k_eDisabled = 3,
    /**
     * @generated from protobuf enum value: k_eTimeout = 4;
     */
    k_eTimeout = 4,
    /**
     * @generated from protobuf enum value: k_eInvalidItemDef = 5;
     */
    k_eInvalidItemDef = 5
}
/**
 * @generated from protobuf message CMsgClientToGCPurchaseChargeCostItems
 */
export interface CMsgClientToGCPurchaseChargeCostItems {
    /**
     * @generated from protobuf field: repeated CMsgClientToGCPurchaseChargeCostItems.Item items = 1;
     */
    items: CMsgClientToGCPurchaseChargeCostItems_Item[];
    /**
     * @generated from protobuf field: optional uint32 currency = 2;
     */
    currency?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCPurchaseChargeCostItems.Item
 */
export interface CMsgClientToGCPurchaseChargeCostItems_Item {
    /**
     * @generated from protobuf field: optional uint32 item_def_index = 1;
     */
    itemDefIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 quantity = 2;
     */
    quantity?: number;
    /**
     * @generated from protobuf field: optional uint64 source_reference_id = 3;
     */
    sourceReferenceId?: bigint;
    /**
     * @generated from protobuf field: optional int32 price_index = 4;
     */
    priceIndex?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCPurchaseChargeCostItemsResponse
 */
export interface CMsgClientToGCPurchaseChargeCostItemsResponse {
    /**
     * @generated from protobuf field: optional CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse result = 1;
     */
    result?: CMsgClientToGCPurchaseChargeCostItemsResponse_EResponse;
    /**
     * @generated from protobuf field: repeated uint64 item_ids = 2;
     */
    itemIds: bigint[];
}
/**
 * @generated from protobuf enum CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse
 */
export enum CMsgClientToGCPurchaseChargeCostItemsResponse_EResponse {
    /**
     * @generated from protobuf enum value: k_eInternalError = 0;
     */
    k_eInternalError = 0,
    /**
     * @generated from protobuf enum value: k_eSuccess = 1;
     */
    k_eSuccess = 1,
    /**
     * @generated from protobuf enum value: k_eTooBusy = 2;
     */
    k_eTooBusy = 2,
    /**
     * @generated from protobuf enum value: k_eDisabled = 3;
     */
    k_eDisabled = 3,
    /**
     * @generated from protobuf enum value: k_eTimeout = 4;
     */
    k_eTimeout = 4,
    /**
     * @generated from protobuf enum value: k_eInvalidParam = 5;
     */
    k_eInvalidParam = 5,
    /**
     * @generated from protobuf enum value: k_eInvalidPrice = 6;
     */
    k_eInvalidPrice = 6,
    /**
     * @generated from protobuf enum value: k_eInsufficientCharges = 7;
     */
    k_eInsufficientCharges = 7,
    /**
     * @generated from protobuf enum value: k_eLimitedItem = 8;
     */
    k_eLimitedItem = 8,
    /**
     * @generated from protobuf enum value: k_eMissingPrereq = 10;
     */
    k_eMissingPrereq = 10
}
/**
 * @generated from protobuf message CMsgGCToClientInFlightChargesUpdated
 */
export interface CMsgGCToClientInFlightChargesUpdated {
    /**
     * @generated from protobuf field: repeated CMsgGCToClientInFlightChargesUpdated.ItemCharges in_flight_charges = 2;
     */
    inFlightCharges: CMsgGCToClientInFlightChargesUpdated_ItemCharges[];
}
/**
 * @generated from protobuf message CMsgGCToClientInFlightChargesUpdated.ItemCharges
 */
export interface CMsgGCToClientInFlightChargesUpdated_ItemCharges {
    /**
     * @generated from protobuf field: optional uint32 item_def = 1;
     */
    itemDef?: number;
    /**
     * @generated from protobuf field: optional uint32 charges_in_flight = 2;
     */
    chargesInFlight?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCancelUnfinalizedTransactions
 */
export interface CMsgClientToGCCancelUnfinalizedTransactions {
    /**
     * @generated from protobuf field: optional uint32 unused = 1;
     */
    unused?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCancelUnfinalizedTransactionsResponse
 */
export interface CMsgClientToGCCancelUnfinalizedTransactionsResponse {
    /**
     * @generated from protobuf field: optional uint32 result = 1;
     */
    result?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCUpdateWelcomeMsg
 */
export interface CMsgGCToGCUpdateWelcomeMsg {
    /**
     * @generated from protobuf field: optional bool server = 1;
     */
    server?: boolean;
    /**
     * @generated from protobuf field: optional CExtraMsgBlock new_msg = 2;
     */
    newMsg?: CExtraMsgBlock;
    /**
     * @generated from protobuf field: optional bool broadcast = 3;
     */
    broadcast?: boolean;
}
/**
 * @generated from protobuf enum EGCItemMsg
 */
export enum EGCItemMsg {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: k_EMsgGCBase = 1000;
     */
    k_EMsgGCBase = 1000,
    /**
     * @generated from protobuf enum value: k_EMsgGCSetItemPosition = 1001;
     */
    k_EMsgGCSetItemPosition = 1001,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCPackBundle = 1002;
     */
    k_EMsgClientToGCPackBundle = 1002,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCPackBundleResponse = 1003;
     */
    k_EMsgClientToGCPackBundleResponse = 1003,
    /**
     * @generated from protobuf enum value: k_EMsgGCDelete = 1004;
     */
    k_EMsgGCDelete = 1004,
    /**
     * @generated from protobuf enum value: k_EMsgGCVerifyCacheSubscription = 1005;
     */
    k_EMsgGCVerifyCacheSubscription = 1005,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCNameItem = 1006;
     */
    k_EMsgClientToGCNameItem = 1006,
    /**
     * @generated from protobuf enum value: k_EMsgGCPaintItem = 1009;
     */
    k_EMsgGCPaintItem = 1009,
    /**
     * @generated from protobuf enum value: k_EMsgGCPaintItemResponse = 1010;
     */
    k_EMsgGCPaintItemResponse = 1010,
    /**
     * @generated from protobuf enum value: k_EMsgGCNameBaseItem = 1019;
     */
    k_EMsgGCNameBaseItem = 1019,
    /**
     * @generated from protobuf enum value: k_EMsgGCNameBaseItemResponse = 1020;
     */
    k_EMsgGCNameBaseItemResponse = 1020,
    /**
     * @generated from protobuf enum value: k_EMsgGCUseItemRequest = 1025;
     */
    k_EMsgGCUseItemRequest = 1025,
    /**
     * @generated from protobuf enum value: k_EMsgGCUseItemResponse = 1026;
     */
    k_EMsgGCUseItemResponse = 1026,
    /**
     * @generated from protobuf enum value: k_EMsgGCGiftedItems = 1027;
     */
    k_EMsgGCGiftedItems = 1027,
    /**
     * @generated from protobuf enum value: k_EMsgGCUnwrapGiftRequest = 1037;
     */
    k_EMsgGCUnwrapGiftRequest = 1037,
    /**
     * @generated from protobuf enum value: k_EMsgGCUnwrapGiftResponse = 1038;
     */
    k_EMsgGCUnwrapGiftResponse = 1038,
    /**
     * @generated from protobuf enum value: k_EMsgGCSortItems = 1041;
     */
    k_EMsgGCSortItems = 1041,
    /**
     * @generated from protobuf enum value: k_EMsgGCBackpackSortFinished = 1058;
     */
    k_EMsgGCBackpackSortFinished = 1058,
    /**
     * @generated from protobuf enum value: k_EMsgGCAdjustItemEquippedState = 1059;
     */
    k_EMsgGCAdjustItemEquippedState = 1059,
    /**
     * @generated from protobuf enum value: k_EMsgGCItemAcknowledged = 1062;
     */
    k_EMsgGCItemAcknowledged = 1062,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCNameItemResponse = 1068;
     */
    k_EMsgClientToGCNameItemResponse = 1068,
    /**
     * @generated from protobuf enum value: k_EMsgGCApplyStrangePart = 1073;
     */
    k_EMsgGCApplyStrangePart = 1073,
    /**
     * @generated from protobuf enum value: k_EMsgGCApplyPennantUpgrade = 1076;
     */
    k_EMsgGCApplyPennantUpgrade = 1076,
    /**
     * @generated from protobuf enum value: k_EMsgGCSetItemPositions = 1077;
     */
    k_EMsgGCSetItemPositions = 1077,
    /**
     * @generated from protobuf enum value: k_EMsgGCApplyEggEssence = 1078;
     */
    k_EMsgGCApplyEggEssence = 1078,
    /**
     * @generated from protobuf enum value: k_EMsgGCNameEggEssenceResponse = 1079;
     */
    k_EMsgGCNameEggEssenceResponse = 1079,
    /**
     * @generated from protobuf enum value: k_EMsgGCExtractGems = 1086;
     */
    k_EMsgGCExtractGems = 1086,
    /**
     * @generated from protobuf enum value: k_EMsgGCAddSocket = 1087;
     */
    k_EMsgGCAddSocket = 1087,
    /**
     * @generated from protobuf enum value: k_EMsgGCAddItemToSocket = 1088;
     */
    k_EMsgGCAddItemToSocket = 1088,
    /**
     * @generated from protobuf enum value: k_EMsgGCAddItemToSocketResponse = 1089;
     */
    k_EMsgGCAddItemToSocketResponse = 1089,
    /**
     * @generated from protobuf enum value: k_EMsgGCAddSocketResponse = 1090;
     */
    k_EMsgGCAddSocketResponse = 1090,
    /**
     * @generated from protobuf enum value: k_EMsgGCResetStrangeGemCount = 1091;
     */
    k_EMsgGCResetStrangeGemCount = 1091,
    /**
     * @generated from protobuf enum value: k_EMsgGCRequestCrateItems = 1092;
     */
    k_EMsgGCRequestCrateItems = 1092,
    /**
     * @generated from protobuf enum value: k_EMsgGCRequestCrateItemsResponse = 1093;
     */
    k_EMsgGCRequestCrateItemsResponse = 1093,
    /**
     * @generated from protobuf enum value: k_EMsgGCExtractGemsResponse = 1094;
     */
    k_EMsgGCExtractGemsResponse = 1094,
    /**
     * @generated from protobuf enum value: k_EMsgGCResetStrangeGemCountResponse = 1095;
     */
    k_EMsgGCResetStrangeGemCountResponse = 1095,
    /**
     * @generated from protobuf enum value: k_EMsgGCServerUseItemRequest = 1103;
     */
    k_EMsgGCServerUseItemRequest = 1103,
    /**
     * @generated from protobuf enum value: k_EMsgGCAddGiftItem = 1104;
     */
    k_EMsgGCAddGiftItem = 1104,
    /**
     * @generated from protobuf enum value: k_EMsgSQLGCToGCRevokeUntrustedGift = 1105;
     */
    k_EMsgSQLGCToGCRevokeUntrustedGift = 1105,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCRemoveItemGifterAttributes = 1109;
     */
    k_EMsgClientToGCRemoveItemGifterAttributes = 1109,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCRemoveItemName = 1110;
     */
    k_EMsgClientToGCRemoveItemName = 1110,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCRemoveItemDescription = 1111;
     */
    k_EMsgClientToGCRemoveItemDescription = 1111,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCRemoveItemAttributeResponse = 1112;
     */
    k_EMsgClientToGCRemoveItemAttributeResponse = 1112,
    /**
     * @generated from protobuf enum value: k_EMsgGCDev_NewItemRequest = 2001;
     */
    k_EMsgGCDev_NewItemRequest = 2001,
    /**
     * @generated from protobuf enum value: k_EMsgGCDev_NewItemRequestResponse = 2002;
     */
    k_EMsgGCDev_NewItemRequestResponse = 2002,
    /**
     * @generated from protobuf enum value: k_EMsgGCDev_UnlockAllItemStylesRequest = 2003;
     */
    k_EMsgGCDev_UnlockAllItemStylesRequest = 2003,
    /**
     * @generated from protobuf enum value: k_EMsgGCDev_UnlockAllItemStylesResponse = 2004;
     */
    k_EMsgGCDev_UnlockAllItemStylesResponse = 2004,
    /**
     * @generated from protobuf enum value: k_EMsgGCStorePurchaseFinalize = 2504;
     */
    k_EMsgGCStorePurchaseFinalize = 2504,
    /**
     * @generated from protobuf enum value: k_EMsgGCStorePurchaseFinalizeResponse = 2505;
     */
    k_EMsgGCStorePurchaseFinalizeResponse = 2505,
    /**
     * @generated from protobuf enum value: k_EMsgGCStorePurchaseCancel = 2506;
     */
    k_EMsgGCStorePurchaseCancel = 2506,
    /**
     * @generated from protobuf enum value: k_EMsgGCStorePurchaseCancelResponse = 2507;
     */
    k_EMsgGCStorePurchaseCancelResponse = 2507,
    /**
     * @generated from protobuf enum value: k_EMsgGCStorePurchaseInit = 2510;
     */
    k_EMsgGCStorePurchaseInit = 2510,
    /**
     * @generated from protobuf enum value: k_EMsgGCStorePurchaseInitResponse = 2511;
     */
    k_EMsgGCStorePurchaseInitResponse = 2511,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCBannedWordListUpdated = 2515;
     */
    k_EMsgGCToGCBannedWordListUpdated = 2515,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCDirtySDOCache = 2516;
     */
    k_EMsgGCToGCDirtySDOCache = 2516,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCUpdateSQLKeyValue = 2518;
     */
    k_EMsgGCToGCUpdateSQLKeyValue = 2518,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCBroadcastConsoleCommand = 2521;
     */
    k_EMsgGCToGCBroadcastConsoleCommand = 2521,
    /**
     * @generated from protobuf enum value: k_EMsgGCServerVersionUpdated = 2522;
     */
    k_EMsgGCServerVersionUpdated = 2522,
    /**
     * @generated from protobuf enum value: k_EMsgGCApplyAutograph = 2523;
     */
    k_EMsgGCApplyAutograph = 2523,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCWebAPIAccountChanged = 2524;
     */
    k_EMsgGCToGCWebAPIAccountChanged = 2524,
    /**
     * @generated from protobuf enum value: k_EMsgGCClientVersionUpdated = 2528;
     */
    k_EMsgGCClientVersionUpdated = 2528,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCUpdateWelcomeMsg = 2529;
     */
    k_EMsgGCToGCUpdateWelcomeMsg = 2529,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCPlayerStrangeCountAdjustments = 2535;
     */
    k_EMsgGCToGCPlayerStrangeCountAdjustments = 2535,
    /**
     * @generated from protobuf enum value: k_EMsgGCRequestStoreSalesData = 2536;
     */
    k_EMsgGCRequestStoreSalesData = 2536,
    /**
     * @generated from protobuf enum value: k_EMsgGCRequestStoreSalesDataResponse = 2537;
     */
    k_EMsgGCRequestStoreSalesDataResponse = 2537,
    /**
     * @generated from protobuf enum value: k_EMsgGCRequestStoreSalesDataUpToDateResponse = 2538;
     */
    k_EMsgGCRequestStoreSalesDataUpToDateResponse = 2538,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCPingRequest = 2539;
     */
    k_EMsgGCToGCPingRequest = 2539,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCPingResponse = 2540;
     */
    k_EMsgGCToGCPingResponse = 2540,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCGetUserSessionServer = 2541;
     */
    k_EMsgGCToGCGetUserSessionServer = 2541,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCGetUserSessionServerResponse = 2542;
     */
    k_EMsgGCToGCGetUserSessionServerResponse = 2542,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCGetUserServerMembers = 2543;
     */
    k_EMsgGCToGCGetUserServerMembers = 2543,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCGetUserServerMembersResponse = 2544;
     */
    k_EMsgGCToGCGetUserServerMembersResponse = 2544,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCCanUseDropRateBonus = 2547;
     */
    k_EMsgGCToGCCanUseDropRateBonus = 2547,
    /**
     * @generated from protobuf enum value: k_EMsgSQLAddDropRateBonus = 2548;
     */
    k_EMsgSQLAddDropRateBonus = 2548,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCRefreshSOCache = 2549;
     */
    k_EMsgGCToGCRefreshSOCache = 2549,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCGrantAccountRolledItems = 2554;
     */
    k_EMsgGCToGCGrantAccountRolledItems = 2554,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCGrantSelfMadeItemToAccount = 2555;
     */
    k_EMsgGCToGCGrantSelfMadeItemToAccount = 2555,
    /**
     * @generated from protobuf enum value: k_EMsgGCStatueCraft = 2561;
     */
    k_EMsgGCStatueCraft = 2561,
    /**
     * @generated from protobuf enum value: k_EMsgGCRedeemCode = 2562;
     */
    k_EMsgGCRedeemCode = 2562,
    /**
     * @generated from protobuf enum value: k_EMsgGCRedeemCodeResponse = 2563;
     */
    k_EMsgGCRedeemCodeResponse = 2563,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCItemConsumptionRollback = 2564;
     */
    k_EMsgGCToGCItemConsumptionRollback = 2564,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCWrapAndDeliverGift = 2565;
     */
    k_EMsgClientToGCWrapAndDeliverGift = 2565,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCWrapAndDeliverGiftResponse = 2566;
     */
    k_EMsgClientToGCWrapAndDeliverGiftResponse = 2566,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCUnpackBundleResponse = 2567;
     */
    k_EMsgClientToGCUnpackBundleResponse = 2567,
    /**
     * @generated from protobuf enum value: k_EMsgGCToClientStoreTransactionCompleted = 2568;
     */
    k_EMsgGCToClientStoreTransactionCompleted = 2568,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCEquipItems = 2569;
     */
    k_EMsgClientToGCEquipItems = 2569,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCEquipItemsResponse = 2570;
     */
    k_EMsgClientToGCEquipItemsResponse = 2570,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCUnlockItemStyle = 2571;
     */
    k_EMsgClientToGCUnlockItemStyle = 2571,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCUnlockItemStyleResponse = 2572;
     */
    k_EMsgClientToGCUnlockItemStyleResponse = 2572,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCSetItemInventoryCategory = 2573;
     */
    k_EMsgClientToGCSetItemInventoryCategory = 2573,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCUnlockCrate = 2574;
     */
    k_EMsgClientToGCUnlockCrate = 2574,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCUnlockCrateResponse = 2575;
     */
    k_EMsgClientToGCUnlockCrateResponse = 2575,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCUnpackBundle = 2576;
     */
    k_EMsgClientToGCUnpackBundle = 2576,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCSetItemStyle = 2577;
     */
    k_EMsgClientToGCSetItemStyle = 2577,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCSetItemStyleResponse = 2578;
     */
    k_EMsgClientToGCSetItemStyleResponse = 2578,
    /**
     * @generated from protobuf enum value: k_EMsgSQLGCToGCGrantBackpackSlots = 2580;
     */
    k_EMsgSQLGCToGCGrantBackpackSlots = 2580,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCLookupAccountName = 2581;
     */
    k_EMsgClientToGCLookupAccountName = 2581,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCLookupAccountNameResponse = 2582;
     */
    k_EMsgClientToGCLookupAccountNameResponse = 2582,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCCreateStaticRecipe = 2584;
     */
    k_EMsgClientToGCCreateStaticRecipe = 2584,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCCreateStaticRecipeResponse = 2585;
     */
    k_EMsgClientToGCCreateStaticRecipeResponse = 2585,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCStoreProcessCDKeyTransaction = 2586;
     */
    k_EMsgGCToGCStoreProcessCDKeyTransaction = 2586,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCStoreProcessCDKeyTransactionResponse = 2587;
     */
    k_EMsgGCToGCStoreProcessCDKeyTransactionResponse = 2587,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCStoreProcessSettlement = 2588;
     */
    k_EMsgGCToGCStoreProcessSettlement = 2588,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCStoreProcessSettlementResponse = 2589;
     */
    k_EMsgGCToGCStoreProcessSettlementResponse = 2589,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCConsoleOutput = 2590;
     */
    k_EMsgGCToGCConsoleOutput = 2590,
    /**
     * @generated from protobuf enum value: k_EMsgGCToClientItemAges = 2591;
     */
    k_EMsgGCToClientItemAges = 2591,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCInternalTestMsg = 2592;
     */
    k_EMsgGCToGCInternalTestMsg = 2592,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCClientServerVersionsUpdated = 2593;
     */
    k_EMsgGCToGCClientServerVersionsUpdated = 2593,
    /**
     * @generated from protobuf enum value: k_EMsgGCUseMultipleItemsRequest = 2594;
     */
    k_EMsgGCUseMultipleItemsRequest = 2594,
    /**
     * @generated from protobuf enum value: k_EMsgGCGetAccountSubscriptionItem = 2595;
     */
    k_EMsgGCGetAccountSubscriptionItem = 2595,
    /**
     * @generated from protobuf enum value: k_EMsgGCGetAccountSubscriptionItemResponse = 2596;
     */
    k_EMsgGCGetAccountSubscriptionItemResponse = 2596,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCBroadcastMessageFromSub = 2598;
     */
    k_EMsgGCToGCBroadcastMessageFromSub = 2598,
    /**
     * @generated from protobuf enum value: k_EMsgGCToClientCurrencyPricePoints = 2599;
     */
    k_EMsgGCToClientCurrencyPricePoints = 2599,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCAddSubscriptionTime = 2600;
     */
    k_EMsgGCToGCAddSubscriptionTime = 2600,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCFlushSteamInventoryCache = 2601;
     */
    k_EMsgGCToGCFlushSteamInventoryCache = 2601,
    /**
     * @generated from protobuf enum value: k_EMsgGCRequestCrateEscalationLevel = 2602;
     */
    k_EMsgGCRequestCrateEscalationLevel = 2602,
    /**
     * @generated from protobuf enum value: k_EMsgGCRequestCrateEscalationLevelResponse = 2603;
     */
    k_EMsgGCRequestCrateEscalationLevelResponse = 2603,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCUpdateSubscriptionItems = 2604;
     */
    k_EMsgGCToGCUpdateSubscriptionItems = 2604,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCSelfPing = 2605;
     */
    k_EMsgGCToGCSelfPing = 2605,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCGetInfuxIntervalStats = 2606;
     */
    k_EMsgGCToGCGetInfuxIntervalStats = 2606,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCGetInfuxIntervalStatsResponse = 2607;
     */
    k_EMsgGCToGCGetInfuxIntervalStatsResponse = 2607,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCPurchaseSucceeded = 2608;
     */
    k_EMsgGCToGCPurchaseSucceeded = 2608,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCGetLimitedItemPurchaseQuantity = 2609;
     */
    k_EMsgClientToGCGetLimitedItemPurchaseQuantity = 2609,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCGetLimitedItemPurchaseQuantityResponse = 2610;
     */
    k_EMsgClientToGCGetLimitedItemPurchaseQuantityResponse = 2610,
    /**
     * @generated from protobuf enum value: k_EMsgGCToGCBetaDeleteItems = 2611;
     */
    k_EMsgGCToGCBetaDeleteItems = 2611,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCGetInFlightItemCharges = 2612;
     */
    k_EMsgClientToGCGetInFlightItemCharges = 2612,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCGetInFlightItemChargesResponse = 2613;
     */
    k_EMsgClientToGCGetInFlightItemChargesResponse = 2613,
    /**
     * @generated from protobuf enum value: k_EMsgGCToClientInFlightChargesUpdated = 2614;
     */
    k_EMsgGCToClientInFlightChargesUpdated = 2614,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCPurchaseChargeCostItems = 2615;
     */
    k_EMsgClientToGCPurchaseChargeCostItems = 2615,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCPurchaseChargeCostItemsResponse = 2616;
     */
    k_EMsgClientToGCPurchaseChargeCostItemsResponse = 2616,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCCancelUnfinalizedTransactions = 2617;
     */
    k_EMsgClientToGCCancelUnfinalizedTransactions = 2617,
    /**
     * @generated from protobuf enum value: k_EMsgClientToGCCancelUnfinalizedTransactionsResponse = 2618;
     */
    k_EMsgClientToGCCancelUnfinalizedTransactionsResponse = 2618
}
/**
 * @generated from protobuf enum EGCMsgInitiateTradeResponse
 */
export enum EGCMsgInitiateTradeResponse {
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Accepted = 0;
     */
    k_EGCMsgInitiateTradeResponse_Accepted = 0,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Declined = 1;
     */
    k_EGCMsgInitiateTradeResponse_Declined = 1,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_VAC_Banned_Initiator = 2;
     */
    k_EGCMsgInitiateTradeResponse_VAC_Banned_Initiator = 2,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_VAC_Banned_Target = 3;
     */
    k_EGCMsgInitiateTradeResponse_VAC_Banned_Target = 3,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Target_Already_Trading = 4;
     */
    k_EGCMsgInitiateTradeResponse_Target_Already_Trading = 4,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Disabled = 5;
     */
    k_EGCMsgInitiateTradeResponse_Disabled = 5,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_NotLoggedIn = 6;
     */
    k_EGCMsgInitiateTradeResponse_NotLoggedIn = 6,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Cancel = 7;
     */
    k_EGCMsgInitiateTradeResponse_Cancel = 7,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_TooSoon = 8;
     */
    k_EGCMsgInitiateTradeResponse_TooSoon = 8,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_TooSoonPenalty = 9;
     */
    k_EGCMsgInitiateTradeResponse_TooSoonPenalty = 9,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Trade_Banned_Initiator = 10;
     */
    k_EGCMsgInitiateTradeResponse_Trade_Banned_Initiator = 10,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Trade_Banned_Target = 11;
     */
    k_EGCMsgInitiateTradeResponse_Trade_Banned_Target = 11,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Free_Account_Initiator_DEPRECATED = 12;
     */
    k_EGCMsgInitiateTradeResponse_Free_Account_Initiator_DEPRECATED = 12,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Shared_Account_Initiator = 13;
     */
    k_EGCMsgInitiateTradeResponse_Shared_Account_Initiator = 13,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Service_Unavailable = 14;
     */
    k_EGCMsgInitiateTradeResponse_Service_Unavailable = 14,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Target_Blocked = 15;
     */
    k_EGCMsgInitiateTradeResponse_Target_Blocked = 15,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_NeedVerifiedEmail = 16;
     */
    k_EGCMsgInitiateTradeResponse_NeedVerifiedEmail = 16,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_NeedSteamGuard = 17;
     */
    k_EGCMsgInitiateTradeResponse_NeedSteamGuard = 17,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_SteamGuardDuration = 18;
     */
    k_EGCMsgInitiateTradeResponse_SteamGuardDuration = 18,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_TheyCannotTrade = 19;
     */
    k_EGCMsgInitiateTradeResponse_TheyCannotTrade = 19,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Recent_Password_Reset = 20;
     */
    k_EGCMsgInitiateTradeResponse_Recent_Password_Reset = 20,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Using_New_Device = 21;
     */
    k_EGCMsgInitiateTradeResponse_Using_New_Device = 21,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Sent_Invalid_Cookie = 22;
     */
    k_EGCMsgInitiateTradeResponse_Sent_Invalid_Cookie = 22,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_TooRecentFriend = 23;
     */
    k_EGCMsgInitiateTradeResponse_TooRecentFriend = 23,
    /**
     * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_WalledFundsNotTrusted = 24;
     */
    k_EGCMsgInitiateTradeResponse_WalledFundsNotTrusted = 24
}
// @generated message type with reflection information, may provide speed optimized methods
class CMsgApplyAutograph$Type extends MessageType<CMsgApplyAutograph> {
    constructor() {
        super("CMsgApplyAutograph", [
            { no: 1, name: "autograph_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "item_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgApplyAutograph>): CMsgApplyAutograph {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgApplyAutograph>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgApplyAutograph): CMsgApplyAutograph {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 autograph_item_id */ 1:
                    message.autographItemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 item_item_id */ 2:
                    message.itemItemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgApplyAutograph, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 autograph_item_id = 1; */
        if (message.autographItemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.autographItemId);
        /* optional uint64 item_item_id = 2; */
        if (message.itemItemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgApplyAutograph
 */
export const CMsgApplyAutograph = new CMsgApplyAutograph$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAdjustItemEquippedState$Type extends MessageType<CMsgAdjustItemEquippedState> {
    constructor() {
        super("CMsgAdjustItemEquippedState", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "new_class", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "new_slot", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "style_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgAdjustItemEquippedState>): CMsgAdjustItemEquippedState {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgAdjustItemEquippedState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgAdjustItemEquippedState): CMsgAdjustItemEquippedState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 new_class */ 2:
                    message.newClass = reader.uint32();
                    break;
                case /* optional uint32 new_slot */ 3:
                    message.newSlot = reader.uint32();
                    break;
                case /* optional uint32 style_index */ 4:
                    message.styleIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgAdjustItemEquippedState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional uint32 new_class = 2; */
        if (message.newClass !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.newClass);
        /* optional uint32 new_slot = 3; */
        if (message.newSlot !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.newSlot);
        /* optional uint32 style_index = 4; */
        if (message.styleIndex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.styleIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgAdjustItemEquippedState
 */
export const CMsgAdjustItemEquippedState = new CMsgAdjustItemEquippedState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgEconPlayerStrangeCountAdjustment$Type extends MessageType<CMsgEconPlayerStrangeCountAdjustment> {
    constructor() {
        super("CMsgEconPlayerStrangeCountAdjustment", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "strange_count_adjustments", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment },
            { no: 3, name: "turbo_mode", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgEconPlayerStrangeCountAdjustment>): CMsgEconPlayerStrangeCountAdjustment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.strangeCountAdjustments = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgEconPlayerStrangeCountAdjustment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgEconPlayerStrangeCountAdjustment): CMsgEconPlayerStrangeCountAdjustment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* repeated CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments */ 2:
                    message.strangeCountAdjustments.push(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool turbo_mode */ 3:
                    message.turboMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgEconPlayerStrangeCountAdjustment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* repeated CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2; */
        for (let i = 0; i < message.strangeCountAdjustments.length; i++)
            CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment.internalBinaryWrite(message.strangeCountAdjustments[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool turbo_mode = 3; */
        if (message.turboMode !== undefined)
            writer.tag(3, WireType.Varint).bool(message.turboMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgEconPlayerStrangeCountAdjustment
 */
export const CMsgEconPlayerStrangeCountAdjustment = new CMsgEconPlayerStrangeCountAdjustment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment$Type extends MessageType<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment> {
    constructor() {
        super("CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment", [
            { no: 1, name: "event_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "adjustment", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>): CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment): CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 event_type */ 1:
                    message.eventType = reader.uint32();
                    break;
                case /* optional uint64 item_id */ 2:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 adjustment */ 3:
                    message.adjustment = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 event_type = 1; */
        if (message.eventType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.eventType);
        /* optional uint64 item_id = 2; */
        if (message.itemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemId);
        /* optional uint32 adjustment = 3; */
        if (message.adjustment !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.adjustment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment
 */
export const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment = new CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCraftingResponse$Type extends MessageType<CMsgCraftingResponse> {
    constructor() {
        super("CMsgCraftingResponse", [
            { no: 1, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgCraftingResponse>): CMsgCraftingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgCraftingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgCraftingResponse): CMsgCraftingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 item_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIds.push(reader.uint64().toBigInt());
                    else
                        message.itemIds.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgCraftingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 item_ids = 1; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(1, WireType.Varint).uint64(message.itemIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgCraftingResponse
 */
export const CMsgCraftingResponse = new CMsgCraftingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCRequestStoreSalesData$Type extends MessageType<CMsgGCRequestStoreSalesData> {
    constructor() {
        super("CMsgGCRequestStoreSalesData", [
            { no: 1, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "currency", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCRequestStoreSalesData>): CMsgGCRequestStoreSalesData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCRequestStoreSalesData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCRequestStoreSalesData): CMsgGCRequestStoreSalesData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 version */ 1:
                    message.version = reader.uint32();
                    break;
                case /* optional uint32 currency */ 2:
                    message.currency = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCRequestStoreSalesData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 version = 1; */
        if (message.version !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.version);
        /* optional uint32 currency = 2; */
        if (message.currency !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCRequestStoreSalesData
 */
export const CMsgGCRequestStoreSalesData = new CMsgGCRequestStoreSalesData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCRequestStoreSalesDataResponse$Type extends MessageType<CMsgGCRequestStoreSalesDataResponse> {
    constructor() {
        super("CMsgGCRequestStoreSalesDataResponse", [
            { no: 1, name: "sale_price", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCRequestStoreSalesDataResponse_Price },
            { no: 2, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "expiration_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCRequestStoreSalesDataResponse>): CMsgGCRequestStoreSalesDataResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.salePrice = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCRequestStoreSalesDataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCRequestStoreSalesDataResponse): CMsgGCRequestStoreSalesDataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgGCRequestStoreSalesDataResponse.Price sale_price */ 1:
                    message.salePrice.push(CMsgGCRequestStoreSalesDataResponse_Price.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 version */ 2:
                    message.version = reader.uint32();
                    break;
                case /* optional uint32 expiration_time */ 3:
                    message.expirationTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCRequestStoreSalesDataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1; */
        for (let i = 0; i < message.salePrice.length; i++)
            CMsgGCRequestStoreSalesDataResponse_Price.internalBinaryWrite(message.salePrice[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 version = 2; */
        if (message.version !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.version);
        /* optional uint32 expiration_time = 3; */
        if (message.expirationTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.expirationTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCRequestStoreSalesDataResponse
 */
export const CMsgGCRequestStoreSalesDataResponse = new CMsgGCRequestStoreSalesDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCRequestStoreSalesDataResponse_Price$Type extends MessageType<CMsgGCRequestStoreSalesDataResponse_Price> {
    constructor() {
        super("CMsgGCRequestStoreSalesDataResponse.Price", [
            { no: 1, name: "item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "price", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCRequestStoreSalesDataResponse_Price>): CMsgGCRequestStoreSalesDataResponse_Price {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCRequestStoreSalesDataResponse_Price>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCRequestStoreSalesDataResponse_Price): CMsgGCRequestStoreSalesDataResponse_Price {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def */ 1:
                    message.itemDef = reader.uint32();
                    break;
                case /* optional uint32 price */ 2:
                    message.price = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCRequestStoreSalesDataResponse_Price, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def = 1; */
        if (message.itemDef !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDef);
        /* optional uint32 price = 2; */
        if (message.price !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.price);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCRequestStoreSalesDataResponse.Price
 */
export const CMsgGCRequestStoreSalesDataResponse_Price = new CMsgGCRequestStoreSalesDataResponse_Price$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCRequestStoreSalesDataUpToDateResponse$Type extends MessageType<CMsgGCRequestStoreSalesDataUpToDateResponse> {
    constructor() {
        super("CMsgGCRequestStoreSalesDataUpToDateResponse", [
            { no: 1, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "expiration_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCRequestStoreSalesDataUpToDateResponse>): CMsgGCRequestStoreSalesDataUpToDateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCRequestStoreSalesDataUpToDateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCRequestStoreSalesDataUpToDateResponse): CMsgGCRequestStoreSalesDataUpToDateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 version */ 1:
                    message.version = reader.uint32();
                    break;
                case /* optional uint32 expiration_time */ 2:
                    message.expirationTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCRequestStoreSalesDataUpToDateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 version = 1; */
        if (message.version !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.version);
        /* optional uint32 expiration_time = 2; */
        if (message.expirationTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.expirationTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCRequestStoreSalesDataUpToDateResponse
 */
export const CMsgGCRequestStoreSalesDataUpToDateResponse = new CMsgGCRequestStoreSalesDataUpToDateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCPingRequest$Type extends MessageType<CMsgGCToGCPingRequest> {
    constructor() {
        super("CMsgGCToGCPingRequest", []);
    }
    create(value?: PartialMessage<CMsgGCToGCPingRequest>): CMsgGCToGCPingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCPingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCPingRequest): CMsgGCToGCPingRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgGCToGCPingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCPingRequest
 */
export const CMsgGCToGCPingRequest = new CMsgGCToGCPingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCPingResponse$Type extends MessageType<CMsgGCToGCPingResponse> {
    constructor() {
        super("CMsgGCToGCPingResponse", []);
    }
    create(value?: PartialMessage<CMsgGCToGCPingResponse>): CMsgGCToGCPingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCPingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCPingResponse): CMsgGCToGCPingResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgGCToGCPingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCPingResponse
 */
export const CMsgGCToGCPingResponse = new CMsgGCToGCPingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetUserSessionServer$Type extends MessageType<CMsgGCToGCGetUserSessionServer> {
    constructor() {
        super("CMsgGCToGCGetUserSessionServer", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGetUserSessionServer>): CMsgGCToGCGetUserSessionServer {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGetUserSessionServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGetUserSessionServer): CMsgGCToGCGetUserSessionServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGetUserSessionServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetUserSessionServer
 */
export const CMsgGCToGCGetUserSessionServer = new CMsgGCToGCGetUserSessionServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetUserSessionServerResponse$Type extends MessageType<CMsgGCToGCGetUserSessionServerResponse> {
    constructor() {
        super("CMsgGCToGCGetUserSessionServerResponse", [
            { no: 1, name: "server_steam_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_online", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGetUserSessionServerResponse>): CMsgGCToGCGetUserSessionServerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGetUserSessionServerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGetUserSessionServerResponse): CMsgGCToGCGetUserSessionServerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 server_steam_id */ 1:
                    message.serverSteamId = reader.fixed64().toBigInt();
                    break;
                case /* optional bool is_online */ 2:
                    message.isOnline = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGetUserSessionServerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 server_steam_id = 1; */
        if (message.serverSteamId !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.serverSteamId);
        /* optional bool is_online = 2; */
        if (message.isOnline !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isOnline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetUserSessionServerResponse
 */
export const CMsgGCToGCGetUserSessionServerResponse = new CMsgGCToGCGetUserSessionServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetUserServerMembers$Type extends MessageType<CMsgGCToGCGetUserServerMembers> {
    constructor() {
        super("CMsgGCToGCGetUserServerMembers", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "max_spectators", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGetUserServerMembers>): CMsgGCToGCGetUserServerMembers {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGetUserServerMembers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGetUserServerMembers): CMsgGCToGCGetUserServerMembers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 max_spectators */ 2:
                    message.maxSpectators = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGetUserServerMembers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint32 max_spectators = 2; */
        if (message.maxSpectators !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.maxSpectators);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetUserServerMembers
 */
export const CMsgGCToGCGetUserServerMembers = new CMsgGCToGCGetUserServerMembers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetUserServerMembersResponse$Type extends MessageType<CMsgGCToGCGetUserServerMembersResponse> {
    constructor() {
        super("CMsgGCToGCGetUserServerMembersResponse", [
            { no: 1, name: "member_account_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGetUserServerMembersResponse>): CMsgGCToGCGetUserServerMembersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.memberAccountId = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGetUserServerMembersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGetUserServerMembersResponse): CMsgGCToGCGetUserServerMembersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 member_account_id */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.memberAccountId.push(reader.uint32());
                    else
                        message.memberAccountId.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGetUserServerMembersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 member_account_id = 1; */
        for (let i = 0; i < message.memberAccountId.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.memberAccountId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetUserServerMembersResponse
 */
export const CMsgGCToGCGetUserServerMembersResponse = new CMsgGCToGCGetUserServerMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgLookupMultipleAccountNames$Type extends MessageType<CMsgLookupMultipleAccountNames> {
    constructor() {
        super("CMsgLookupMultipleAccountNames", [
            { no: 1, name: "accountids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgLookupMultipleAccountNames>): CMsgLookupMultipleAccountNames {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountids = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgLookupMultipleAccountNames>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgLookupMultipleAccountNames): CMsgLookupMultipleAccountNames {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 accountids = 1 [packed = true];*/ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.accountids.push(reader.uint32());
                    else
                        message.accountids.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgLookupMultipleAccountNames, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 accountids = 1 [packed = true]; */
        if (message.accountids.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.accountids.length; i++)
                writer.uint32(message.accountids[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgLookupMultipleAccountNames
 */
export const CMsgLookupMultipleAccountNames = new CMsgLookupMultipleAccountNames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgLookupMultipleAccountNamesResponse$Type extends MessageType<CMsgLookupMultipleAccountNamesResponse> {
    constructor() {
        super("CMsgLookupMultipleAccountNamesResponse", [
            { no: 1, name: "accounts", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgLookupMultipleAccountNamesResponse_Account }
        ]);
    }
    create(value?: PartialMessage<CMsgLookupMultipleAccountNamesResponse>): CMsgLookupMultipleAccountNamesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accounts = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgLookupMultipleAccountNamesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgLookupMultipleAccountNamesResponse): CMsgLookupMultipleAccountNamesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgLookupMultipleAccountNamesResponse.Account accounts */ 1:
                    message.accounts.push(CMsgLookupMultipleAccountNamesResponse_Account.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgLookupMultipleAccountNamesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgLookupMultipleAccountNamesResponse.Account accounts = 1; */
        for (let i = 0; i < message.accounts.length; i++)
            CMsgLookupMultipleAccountNamesResponse_Account.internalBinaryWrite(message.accounts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgLookupMultipleAccountNamesResponse
 */
export const CMsgLookupMultipleAccountNamesResponse = new CMsgLookupMultipleAccountNamesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgLookupMultipleAccountNamesResponse_Account$Type extends MessageType<CMsgLookupMultipleAccountNamesResponse_Account> {
    constructor() {
        super("CMsgLookupMultipleAccountNamesResponse.Account", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "persona", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgLookupMultipleAccountNamesResponse_Account>): CMsgLookupMultipleAccountNamesResponse_Account {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgLookupMultipleAccountNamesResponse_Account>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgLookupMultipleAccountNamesResponse_Account): CMsgLookupMultipleAccountNamesResponse_Account {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional string persona */ 2:
                    message.persona = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgLookupMultipleAccountNamesResponse_Account, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional string persona = 2; */
        if (message.persona !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.persona);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgLookupMultipleAccountNamesResponse.Account
 */
export const CMsgLookupMultipleAccountNamesResponse_Account = new CMsgLookupMultipleAccountNamesResponse_Account$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRequestCrateItems$Type extends MessageType<CMsgRequestCrateItems> {
    constructor() {
        super("CMsgRequestCrateItems", [
            { no: 1, name: "crate_item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgRequestCrateItems>): CMsgRequestCrateItems {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgRequestCrateItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgRequestCrateItems): CMsgRequestCrateItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 crate_item_def */ 1:
                    message.crateItemDef = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgRequestCrateItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 crate_item_def = 1; */
        if (message.crateItemDef !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.crateItemDef);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgRequestCrateItems
 */
export const CMsgRequestCrateItems = new CMsgRequestCrateItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRequestCrateItemsResponse$Type extends MessageType<CMsgRequestCrateItemsResponse> {
    constructor() {
        super("CMsgRequestCrateItemsResponse", [
            { no: 1, name: "response", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_defs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "peek_item_defs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "peek_items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CSOEconItem }
        ]);
    }
    create(value?: PartialMessage<CMsgRequestCrateItemsResponse>): CMsgRequestCrateItemsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemDefs = [];
        message.peekItemDefs = [];
        message.peekItems = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgRequestCrateItemsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgRequestCrateItemsResponse): CMsgRequestCrateItemsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 response */ 1:
                    message.response = reader.uint32();
                    break;
                case /* repeated uint32 item_defs */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemDefs.push(reader.uint32());
                    else
                        message.itemDefs.push(reader.uint32());
                    break;
                case /* repeated uint32 peek_item_defs */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.peekItemDefs.push(reader.uint32());
                    else
                        message.peekItemDefs.push(reader.uint32());
                    break;
                case /* repeated CSOEconItem peek_items */ 4:
                    message.peekItems.push(CSOEconItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgRequestCrateItemsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.response);
        /* repeated uint32 item_defs = 2; */
        for (let i = 0; i < message.itemDefs.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.itemDefs[i]);
        /* repeated uint32 peek_item_defs = 3; */
        for (let i = 0; i < message.peekItemDefs.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.peekItemDefs[i]);
        /* repeated CSOEconItem peek_items = 4; */
        for (let i = 0; i < message.peekItems.length; i++)
            CSOEconItem.internalBinaryWrite(message.peekItems[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgRequestCrateItemsResponse
 */
export const CMsgRequestCrateItemsResponse = new CMsgRequestCrateItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRequestCrateEscalationLevel$Type extends MessageType<CMsgRequestCrateEscalationLevel> {
    constructor() {
        super("CMsgRequestCrateEscalationLevel", [
            { no: 1, name: "crate_item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgRequestCrateEscalationLevel>): CMsgRequestCrateEscalationLevel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgRequestCrateEscalationLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgRequestCrateEscalationLevel): CMsgRequestCrateEscalationLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 crate_item_def */ 1:
                    message.crateItemDef = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgRequestCrateEscalationLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 crate_item_def = 1; */
        if (message.crateItemDef !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.crateItemDef);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgRequestCrateEscalationLevel
 */
export const CMsgRequestCrateEscalationLevel = new CMsgRequestCrateEscalationLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRequestCrateEscalationLevelResponse$Type extends MessageType<CMsgRequestCrateEscalationLevelResponse> {
    constructor() {
        super("CMsgRequestCrateEscalationLevelResponse", [
            { no: 1, name: "response", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "escalation_level0", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "escalation_level1", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "escalation_level2", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "escalation_level3", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgRequestCrateEscalationLevelResponse>): CMsgRequestCrateEscalationLevelResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgRequestCrateEscalationLevelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgRequestCrateEscalationLevelResponse): CMsgRequestCrateEscalationLevelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 response */ 1:
                    message.response = reader.uint32();
                    break;
                case /* optional uint32 escalation_level0 */ 2:
                    message.escalationLevel0 = reader.uint32();
                    break;
                case /* optional uint32 escalation_level1 */ 3:
                    message.escalationLevel1 = reader.uint32();
                    break;
                case /* optional uint32 escalation_level2 */ 4:
                    message.escalationLevel2 = reader.uint32();
                    break;
                case /* optional uint32 escalation_level3 */ 5:
                    message.escalationLevel3 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgRequestCrateEscalationLevelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.response);
        /* optional uint32 escalation_level0 = 2; */
        if (message.escalationLevel0 !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.escalationLevel0);
        /* optional uint32 escalation_level1 = 3; */
        if (message.escalationLevel1 !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.escalationLevel1);
        /* optional uint32 escalation_level2 = 4; */
        if (message.escalationLevel2 !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.escalationLevel2);
        /* optional uint32 escalation_level3 = 5; */
        if (message.escalationLevel3 !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.escalationLevel3);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgRequestCrateEscalationLevelResponse
 */
export const CMsgRequestCrateEscalationLevelResponse = new CMsgRequestCrateEscalationLevelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCCanUseDropRateBonus$Type extends MessageType<CMsgGCToGCCanUseDropRateBonus> {
    constructor() {
        super("CMsgGCToGCCanUseDropRateBonus", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "drop_rate_bonus", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "booster_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "exclusive_item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "allow_equal_rate", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCCanUseDropRateBonus>): CMsgGCToGCCanUseDropRateBonus {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCCanUseDropRateBonus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCCanUseDropRateBonus): CMsgGCToGCCanUseDropRateBonus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional float drop_rate_bonus */ 2:
                    message.dropRateBonus = reader.float();
                    break;
                case /* optional uint32 booster_type */ 3:
                    message.boosterType = reader.uint32();
                    break;
                case /* optional uint32 exclusive_item_def */ 4:
                    message.exclusiveItemDef = reader.uint32();
                    break;
                case /* optional bool allow_equal_rate */ 5:
                    message.allowEqualRate = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCCanUseDropRateBonus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional float drop_rate_bonus = 2; */
        if (message.dropRateBonus !== undefined)
            writer.tag(2, WireType.Bit32).float(message.dropRateBonus);
        /* optional uint32 booster_type = 3; */
        if (message.boosterType !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.boosterType);
        /* optional uint32 exclusive_item_def = 4; */
        if (message.exclusiveItemDef !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.exclusiveItemDef);
        /* optional bool allow_equal_rate = 5; */
        if (message.allowEqualRate !== undefined)
            writer.tag(5, WireType.Varint).bool(message.allowEqualRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCCanUseDropRateBonus
 */
export const CMsgGCToGCCanUseDropRateBonus = new CMsgGCToGCCanUseDropRateBonus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgSQLAddDropRateBonus$Type extends MessageType<CMsgSQLAddDropRateBonus> {
    constructor() {
        super("CMsgSQLAddDropRateBonus", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "drop_rate_bonus", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "booster_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "seconds_duration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "end_time_stamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgSQLAddDropRateBonus>): CMsgSQLAddDropRateBonus {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgSQLAddDropRateBonus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgSQLAddDropRateBonus): CMsgSQLAddDropRateBonus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint64 item_id */ 2:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 item_def */ 3:
                    message.itemDef = reader.uint32();
                    break;
                case /* optional float drop_rate_bonus */ 4:
                    message.dropRateBonus = reader.float();
                    break;
                case /* optional uint32 booster_type */ 5:
                    message.boosterType = reader.uint32();
                    break;
                case /* optional uint32 seconds_duration */ 6:
                    message.secondsDuration = reader.uint32();
                    break;
                case /* optional uint32 end_time_stamp */ 7:
                    message.endTimeStamp = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgSQLAddDropRateBonus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint64 item_id = 2; */
        if (message.itemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemId);
        /* optional uint32 item_def = 3; */
        if (message.itemDef !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.itemDef);
        /* optional float drop_rate_bonus = 4; */
        if (message.dropRateBonus !== undefined)
            writer.tag(4, WireType.Bit32).float(message.dropRateBonus);
        /* optional uint32 booster_type = 5; */
        if (message.boosterType !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.boosterType);
        /* optional uint32 seconds_duration = 6; */
        if (message.secondsDuration !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.secondsDuration);
        /* optional uint32 end_time_stamp = 7; */
        if (message.endTimeStamp !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.endTimeStamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgSQLAddDropRateBonus
 */
export const CMsgSQLAddDropRateBonus = new CMsgSQLAddDropRateBonus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgSQLUpgradeBattleBooster$Type extends MessageType<CMsgSQLUpgradeBattleBooster> {
    constructor() {
        super("CMsgSQLUpgradeBattleBooster", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "bonus_to_add", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "booster_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgSQLUpgradeBattleBooster>): CMsgSQLUpgradeBattleBooster {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgSQLUpgradeBattleBooster>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgSQLUpgradeBattleBooster): CMsgSQLUpgradeBattleBooster {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 item_def */ 2:
                    message.itemDef = reader.uint32();
                    break;
                case /* optional float bonus_to_add */ 3:
                    message.bonusToAdd = reader.float();
                    break;
                case /* optional uint32 booster_type */ 4:
                    message.boosterType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgSQLUpgradeBattleBooster, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint32 item_def = 2; */
        if (message.itemDef !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.itemDef);
        /* optional float bonus_to_add = 3; */
        if (message.bonusToAdd !== undefined)
            writer.tag(3, WireType.Bit32).float(message.bonusToAdd);
        /* optional uint32 booster_type = 4; */
        if (message.boosterType !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.boosterType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgSQLUpgradeBattleBooster
 */
export const CMsgSQLUpgradeBattleBooster = new CMsgSQLUpgradeBattleBooster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCRefreshSOCache$Type extends MessageType<CMsgGCToGCRefreshSOCache> {
    constructor() {
        super("CMsgGCToGCRefreshSOCache", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "reload", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCRefreshSOCache>): CMsgGCToGCRefreshSOCache {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCRefreshSOCache>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCRefreshSOCache): CMsgGCToGCRefreshSOCache {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional bool reload */ 2:
                    message.reload = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCRefreshSOCache, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional bool reload = 2; */
        if (message.reload !== undefined)
            writer.tag(2, WireType.Varint).bool(message.reload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCRefreshSOCache
 */
export const CMsgGCToGCRefreshSOCache = new CMsgGCToGCRefreshSOCache$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCAddSubscriptionTime$Type extends MessageType<CMsgGCToGCAddSubscriptionTime> {
    constructor() {
        super("CMsgGCToGCAddSubscriptionTime", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "matching_subscription_def_indexes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "additional_seconds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCAddSubscriptionTime>): CMsgGCToGCAddSubscriptionTime {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchingSubscriptionDefIndexes = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCAddSubscriptionTime>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCAddSubscriptionTime): CMsgGCToGCAddSubscriptionTime {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* repeated uint32 matching_subscription_def_indexes */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.matchingSubscriptionDefIndexes.push(reader.uint32());
                    else
                        message.matchingSubscriptionDefIndexes.push(reader.uint32());
                    break;
                case /* optional uint32 additional_seconds */ 3:
                    message.additionalSeconds = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCAddSubscriptionTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* repeated uint32 matching_subscription_def_indexes = 2; */
        for (let i = 0; i < message.matchingSubscriptionDefIndexes.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.matchingSubscriptionDefIndexes[i]);
        /* optional uint32 additional_seconds = 3; */
        if (message.additionalSeconds !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.additionalSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCAddSubscriptionTime
 */
export const CMsgGCToGCAddSubscriptionTime = new CMsgGCToGCAddSubscriptionTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantAccountRolledItems$Type extends MessageType<CMsgGCToGCGrantAccountRolledItems> {
    constructor() {
        super("CMsgGCToGCGrantAccountRolledItems", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCToGCGrantAccountRolledItems_Item },
            { no: 3, name: "audit_action", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "audit_data", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGrantAccountRolledItems>): CMsgGCToGCGrantAccountRolledItems {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGrantAccountRolledItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGrantAccountRolledItems): CMsgGCToGCGrantAccountRolledItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* repeated CMsgGCToGCGrantAccountRolledItems.Item items */ 2:
                    message.items.push(CMsgGCToGCGrantAccountRolledItems_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 audit_action */ 3:
                    message.auditAction = reader.uint32();
                    break;
                case /* optional uint64 audit_data */ 4:
                    message.auditData = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGrantAccountRolledItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* repeated CMsgGCToGCGrantAccountRolledItems.Item items = 2; */
        for (let i = 0; i < message.items.length; i++)
            CMsgGCToGCGrantAccountRolledItems_Item.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 audit_action = 3; */
        if (message.auditAction !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.auditAction);
        /* optional uint64 audit_data = 4; */
        if (message.auditData !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.auditData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantAccountRolledItems
 */
export const CMsgGCToGCGrantAccountRolledItems = new CMsgGCToGCGrantAccountRolledItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantAccountRolledItems_Item$Type extends MessageType<CMsgGCToGCGrantAccountRolledItems_Item> {
    constructor() {
        super("CMsgGCToGCGrantAccountRolledItems.Item", [
            { no: 1, name: "item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "loot_lists", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ignore_limit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "origin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "dynamic_attributes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute },
            { no: 6, name: "additional_audit_entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry },
            { no: 7, name: "inventory_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "quality", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGrantAccountRolledItems_Item>): CMsgGCToGCGrantAccountRolledItems_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lootLists = [];
        message.dynamicAttributes = [];
        message.additionalAuditEntries = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGrantAccountRolledItems_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGrantAccountRolledItems_Item): CMsgGCToGCGrantAccountRolledItems_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def */ 1:
                    message.itemDef = reader.uint32();
                    break;
                case /* repeated string loot_lists */ 2:
                    message.lootLists.push(reader.string());
                    break;
                case /* optional bool ignore_limit */ 3:
                    message.ignoreLimit = reader.bool();
                    break;
                case /* optional uint32 origin */ 4:
                    message.origin = reader.uint32();
                    break;
                case /* repeated CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes */ 5:
                    message.dynamicAttributes.push(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries */ 6:
                    message.additionalAuditEntries.push(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 inventory_token */ 7:
                    message.inventoryToken = reader.uint32();
                    break;
                case /* optional int32 quality */ 8:
                    message.quality = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGrantAccountRolledItems_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def = 1; */
        if (message.itemDef !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDef);
        /* repeated string loot_lists = 2; */
        for (let i = 0; i < message.lootLists.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.lootLists[i]);
        /* optional bool ignore_limit = 3; */
        if (message.ignoreLimit !== undefined)
            writer.tag(3, WireType.Varint).bool(message.ignoreLimit);
        /* optional uint32 origin = 4; */
        if (message.origin !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.origin);
        /* repeated CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5; */
        for (let i = 0; i < message.dynamicAttributes.length; i++)
            CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute.internalBinaryWrite(message.dynamicAttributes[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6; */
        for (let i = 0; i < message.additionalAuditEntries.length; i++)
            CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry.internalBinaryWrite(message.additionalAuditEntries[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 inventory_token = 7; */
        if (message.inventoryToken !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.inventoryToken);
        /* optional int32 quality = 8; */
        if (message.quality !== undefined)
            writer.tag(8, WireType.Varint).int32(message.quality);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantAccountRolledItems.Item
 */
export const CMsgGCToGCGrantAccountRolledItems_Item = new CMsgGCToGCGrantAccountRolledItems_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute$Type extends MessageType<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute> {
    constructor() {
        super("CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value_uint32", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "value_float", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "value_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute>): CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute): CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional uint32 value_uint32 */ 2:
                    message.valueUint32 = reader.uint32();
                    break;
                case /* optional float value_float */ 3:
                    message.valueFloat = reader.float();
                    break;
                case /* optional string value_string */ 4:
                    message.valueString = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional uint32 value_uint32 = 2; */
        if (message.valueUint32 !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.valueUint32);
        /* optional float value_float = 3; */
        if (message.valueFloat !== undefined)
            writer.tag(3, WireType.Bit32).float(message.valueFloat);
        /* optional string value_string = 4; */
        if (message.valueString !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.valueString);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute
 */
export const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute = new CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry$Type extends MessageType<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry> {
    constructor() {
        super("CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry", [
            { no: 1, name: "owner_account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "audit_action", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "audit_data", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry>): CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry): CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 owner_account_id */ 1:
                    message.ownerAccountId = reader.uint32();
                    break;
                case /* optional uint32 audit_action */ 2:
                    message.auditAction = reader.uint32();
                    break;
                case /* optional uint64 audit_data */ 3:
                    message.auditData = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 owner_account_id = 1; */
        if (message.ownerAccountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.ownerAccountId);
        /* optional uint32 audit_action = 2; */
        if (message.auditAction !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.auditAction);
        /* optional uint64 audit_data = 3; */
        if (message.auditData !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.auditData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry
 */
export const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry = new CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCBetaDeleteItems$Type extends MessageType<CMsgGCToGCBetaDeleteItems> {
    constructor() {
        super("CMsgGCToGCBetaDeleteItems", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "item_defs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCBetaDeleteItems>): CMsgGCToGCBetaDeleteItems {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        message.itemDefs = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCBetaDeleteItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCBetaDeleteItems): CMsgGCToGCBetaDeleteItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* repeated uint64 item_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIds.push(reader.uint64().toBigInt());
                    else
                        message.itemIds.push(reader.uint64().toBigInt());
                    break;
                case /* repeated uint32 item_defs */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemDefs.push(reader.uint32());
                    else
                        message.itemDefs.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCBetaDeleteItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* repeated uint64 item_ids = 2; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(2, WireType.Varint).uint64(message.itemIds[i]);
        /* repeated uint32 item_defs = 3; */
        for (let i = 0; i < message.itemDefs.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.itemDefs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCBetaDeleteItems
 */
export const CMsgGCToGCBetaDeleteItems = new CMsgGCToGCBetaDeleteItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantSelfMadeItemToAccount$Type extends MessageType<CMsgGCToGCGrantSelfMadeItemToAccount> {
    constructor() {
        super("CMsgGCToGCGrantSelfMadeItemToAccount", [
            { no: 1, name: "item_def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGrantSelfMadeItemToAccount>): CMsgGCToGCGrantSelfMadeItemToAccount {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGrantSelfMadeItemToAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGrantSelfMadeItemToAccount): CMsgGCToGCGrantSelfMadeItemToAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def_index */ 1:
                    message.itemDefIndex = reader.uint32();
                    break;
                case /* optional uint32 accountid */ 2:
                    message.accountid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGrantSelfMadeItemToAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def_index = 1; */
        if (message.itemDefIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDefIndex);
        /* optional uint32 accountid = 2; */
        if (message.accountid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.accountid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantSelfMadeItemToAccount
 */
export const CMsgGCToGCGrantSelfMadeItemToAccount = new CMsgGCToGCGrantSelfMadeItemToAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgUseItem$Type extends MessageType<CMsgUseItem> {
    constructor() {
        super("CMsgUseItem", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "target_steam_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "gift__potential_targets", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "duel__class_lock", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "initiator_steam_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "itempack__ack_immediately", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgUseItem>): CMsgUseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.giftPotentialTargets = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgUseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgUseItem): CMsgUseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional fixed64 target_steam_id */ 2:
                    message.targetSteamId = reader.fixed64().toBigInt();
                    break;
                case /* repeated uint32 gift__potential_targets */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.giftPotentialTargets.push(reader.uint32());
                    else
                        message.giftPotentialTargets.push(reader.uint32());
                    break;
                case /* optional uint32 duel__class_lock */ 4:
                    message.duelClassLock = reader.uint32();
                    break;
                case /* optional uint64 initiator_steam_id */ 5:
                    message.initiatorSteamId = reader.uint64().toBigInt();
                    break;
                case /* optional bool itempack__ack_immediately */ 6:
                    message.itempackAckImmediately = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgUseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional fixed64 target_steam_id = 2; */
        if (message.targetSteamId !== undefined)
            writer.tag(2, WireType.Bit64).fixed64(message.targetSteamId);
        /* repeated uint32 gift__potential_targets = 3; */
        for (let i = 0; i < message.giftPotentialTargets.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.giftPotentialTargets[i]);
        /* optional uint32 duel__class_lock = 4; */
        if (message.duelClassLock !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.duelClassLock);
        /* optional uint64 initiator_steam_id = 5; */
        if (message.initiatorSteamId !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.initiatorSteamId);
        /* optional bool itempack__ack_immediately = 6; */
        if (message.itempackAckImmediately !== undefined)
            writer.tag(6, WireType.Varint).bool(message.itempackAckImmediately);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgUseItem
 */
export const CMsgUseItem = new CMsgUseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerUseItem$Type extends MessageType<CMsgServerUseItem> {
    constructor() {
        super("CMsgServerUseItem", [
            { no: 1, name: "initiator_account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "use_item_msg", kind: "message", T: () => CMsgUseItem }
        ]);
    }
    create(value?: PartialMessage<CMsgServerUseItem>): CMsgServerUseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgServerUseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgServerUseItem): CMsgServerUseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 initiator_account_id */ 1:
                    message.initiatorAccountId = reader.uint32();
                    break;
                case /* optional CMsgUseItem use_item_msg */ 2:
                    message.useItemMsg = CMsgUseItem.internalBinaryRead(reader, reader.uint32(), options, message.useItemMsg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgServerUseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 initiator_account_id = 1; */
        if (message.initiatorAccountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.initiatorAccountId);
        /* optional CMsgUseItem use_item_msg = 2; */
        if (message.useItemMsg)
            CMsgUseItem.internalBinaryWrite(message.useItemMsg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgServerUseItem
 */
export const CMsgServerUseItem = new CMsgServerUseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgUseMultipleItems$Type extends MessageType<CMsgUseMultipleItems> {
    constructor() {
        super("CMsgUseMultipleItems", [
            { no: 1, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgUseMultipleItems>): CMsgUseMultipleItems {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgUseMultipleItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgUseMultipleItems): CMsgUseMultipleItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 item_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIds.push(reader.uint64().toBigInt());
                    else
                        message.itemIds.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgUseMultipleItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 item_ids = 1; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(1, WireType.Varint).uint64(message.itemIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgUseMultipleItems
 */
export const CMsgUseMultipleItems = new CMsgUseMultipleItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGCStoreRechargeRedirect_LineItem$Type extends MessageType<CGCStoreRechargeRedirect_LineItem> {
    constructor() {
        super("CGCStoreRechargeRedirect_LineItem", [
            { no: 1, name: "item_def_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "quantity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CGCStoreRechargeRedirect_LineItem>): CGCStoreRechargeRedirect_LineItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGCStoreRechargeRedirect_LineItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGCStoreRechargeRedirect_LineItem): CGCStoreRechargeRedirect_LineItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def_id */ 1:
                    message.itemDefId = reader.uint32();
                    break;
                case /* optional uint32 quantity */ 2:
                    message.quantity = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGCStoreRechargeRedirect_LineItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def_id = 1; */
        if (message.itemDefId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDefId);
        /* optional uint32 quantity = 2; */
        if (message.quantity !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGCStoreRechargeRedirect_LineItem
 */
export const CGCStoreRechargeRedirect_LineItem = new CGCStoreRechargeRedirect_LineItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCEconSQLWorkItemEmbeddedRollbackData$Type extends MessageType<CMsgGCEconSQLWorkItemEmbeddedRollbackData> {
    constructor() {
        super("CMsgGCEconSQLWorkItemEmbeddedRollbackData", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "deleted_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "old_audit_action", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "new_audit_action", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "expected_audit_action", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCEconSQLWorkItemEmbeddedRollbackData>): CMsgGCEconSQLWorkItemEmbeddedRollbackData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCEconSQLWorkItemEmbeddedRollbackData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCEconSQLWorkItemEmbeddedRollbackData): CMsgGCEconSQLWorkItemEmbeddedRollbackData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint64 deleted_item_id */ 2:
                    message.deletedItemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 old_audit_action */ 3:
                    message.oldAuditAction = reader.uint32();
                    break;
                case /* optional uint32 new_audit_action */ 4:
                    message.newAuditAction = reader.uint32();
                    break;
                case /* optional uint32 expected_audit_action */ 5:
                    message.expectedAuditAction = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCEconSQLWorkItemEmbeddedRollbackData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint64 deleted_item_id = 2; */
        if (message.deletedItemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.deletedItemId);
        /* optional uint32 old_audit_action = 3; */
        if (message.oldAuditAction !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.oldAuditAction);
        /* optional uint32 new_audit_action = 4; */
        if (message.newAuditAction !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.newAuditAction);
        /* optional uint32 expected_audit_action = 5; */
        if (message.expectedAuditAction !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.expectedAuditAction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCEconSQLWorkItemEmbeddedRollbackData
 */
export const CMsgGCEconSQLWorkItemEmbeddedRollbackData = new CMsgGCEconSQLWorkItemEmbeddedRollbackData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCraftStatue$Type extends MessageType<CMsgCraftStatue> {
    constructor() {
        super("CMsgCraftStatue", [
            { no: 1, name: "heroid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sequencename", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cycle", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pedestal_itemdef", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "toolid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgCraftStatue>): CMsgCraftStatue {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgCraftStatue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgCraftStatue): CMsgCraftStatue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 heroid */ 1:
                    message.heroid = reader.uint32();
                    break;
                case /* optional string sequencename */ 2:
                    message.sequencename = reader.string();
                    break;
                case /* optional float cycle */ 3:
                    message.cycle = reader.float();
                    break;
                case /* optional string description */ 4:
                    message.description = reader.string();
                    break;
                case /* optional uint32 pedestal_itemdef */ 5:
                    message.pedestalItemdef = reader.uint32();
                    break;
                case /* optional uint64 toolid */ 6:
                    message.toolid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgCraftStatue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 heroid = 1; */
        if (message.heroid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.heroid);
        /* optional string sequencename = 2; */
        if (message.sequencename !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.sequencename);
        /* optional float cycle = 3; */
        if (message.cycle !== undefined)
            writer.tag(3, WireType.Bit32).float(message.cycle);
        /* optional string description = 4; */
        if (message.description !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* optional uint32 pedestal_itemdef = 5; */
        if (message.pedestalItemdef !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.pedestalItemdef);
        /* optional uint64 toolid = 6; */
        if (message.toolid !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.toolid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgCraftStatue
 */
export const CMsgCraftStatue = new CMsgCraftStatue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRedeemCode$Type extends MessageType<CMsgRedeemCode> {
    constructor() {
        super("CMsgRedeemCode", [
            { no: 1, name: "code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgRedeemCode>): CMsgRedeemCode {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgRedeemCode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgRedeemCode): CMsgRedeemCode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string code */ 1:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgRedeemCode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string code = 1; */
        if (message.code !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgRedeemCode
 */
export const CMsgRedeemCode = new CMsgRedeemCode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRedeemCodeResponse$Type extends MessageType<CMsgRedeemCodeResponse> {
    constructor() {
        super("CMsgRedeemCodeResponse", [
            { no: 1, name: "response", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgRedeemCodeResponse>): CMsgRedeemCodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgRedeemCodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgRedeemCodeResponse): CMsgRedeemCodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 response */ 1:
                    message.response = reader.uint32();
                    break;
                case /* optional uint64 item_id */ 2:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgRedeemCodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.response);
        /* optional uint64 item_id = 2; */
        if (message.itemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgRedeemCodeResponse
 */
export const CMsgRedeemCodeResponse = new CMsgRedeemCodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevNewItemRequest$Type extends MessageType<CMsgDevNewItemRequest> {
    constructor() {
        super("CMsgDevNewItemRequest", [
            { no: 3, name: "item_def_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "loot_list_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "attr_def_name", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "attr_value", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "item_quality", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgDevNewItemRequest>): CMsgDevNewItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attrDefName = [];
        message.attrValue = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgDevNewItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgDevNewItemRequest): CMsgDevNewItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string item_def_name */ 3:
                    message.itemDefName = reader.string();
                    break;
                case /* optional string loot_list_name */ 4:
                    message.lootListName = reader.string();
                    break;
                case /* repeated string attr_def_name */ 5:
                    message.attrDefName.push(reader.string());
                    break;
                case /* repeated string attr_value */ 6:
                    message.attrValue.push(reader.string());
                    break;
                case /* optional uint32 item_quality */ 7:
                    message.itemQuality = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgDevNewItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string item_def_name = 3; */
        if (message.itemDefName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.itemDefName);
        /* optional string loot_list_name = 4; */
        if (message.lootListName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.lootListName);
        /* repeated string attr_def_name = 5; */
        for (let i = 0; i < message.attrDefName.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.attrDefName[i]);
        /* repeated string attr_value = 6; */
        for (let i = 0; i < message.attrValue.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.attrValue[i]);
        /* optional uint32 item_quality = 7; */
        if (message.itemQuality !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.itemQuality);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgDevNewItemRequest
 */
export const CMsgDevNewItemRequest = new CMsgDevNewItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevNewItemRequestResponse$Type extends MessageType<CMsgDevNewItemRequestResponse> {
    constructor() {
        super("CMsgDevNewItemRequestResponse", [
            { no: 1, name: "success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgDevNewItemRequestResponse>): CMsgDevNewItemRequestResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgDevNewItemRequestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgDevNewItemRequestResponse): CMsgDevNewItemRequestResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgDevNewItemRequestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool success = 1; */
        if (message.success !== undefined)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgDevNewItemRequestResponse
 */
export const CMsgDevNewItemRequestResponse = new CMsgDevNewItemRequestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevUnlockAllItemStyles$Type extends MessageType<CMsgDevUnlockAllItemStyles> {
    constructor() {
        super("CMsgDevUnlockAllItemStyles", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgDevUnlockAllItemStyles>): CMsgDevUnlockAllItemStyles {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgDevUnlockAllItemStyles>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgDevUnlockAllItemStyles): CMsgDevUnlockAllItemStyles {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgDevUnlockAllItemStyles, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgDevUnlockAllItemStyles
 */
export const CMsgDevUnlockAllItemStyles = new CMsgDevUnlockAllItemStyles$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevUnlockAllItemStylesResponse$Type extends MessageType<CMsgDevUnlockAllItemStylesResponse> {
    constructor() {
        super("CMsgDevUnlockAllItemStylesResponse", [
            { no: 1, name: "success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgDevUnlockAllItemStylesResponse>): CMsgDevUnlockAllItemStylesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgDevUnlockAllItemStylesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgDevUnlockAllItemStylesResponse): CMsgDevUnlockAllItemStylesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgDevUnlockAllItemStylesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool success = 1; */
        if (message.success !== undefined)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgDevUnlockAllItemStylesResponse
 */
export const CMsgDevUnlockAllItemStylesResponse = new CMsgDevUnlockAllItemStylesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCGetAccountSubscriptionItem$Type extends MessageType<CMsgGCGetAccountSubscriptionItem> {
    constructor() {
        super("CMsgGCGetAccountSubscriptionItem", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCGetAccountSubscriptionItem>): CMsgGCGetAccountSubscriptionItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCGetAccountSubscriptionItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCGetAccountSubscriptionItem): CMsgGCGetAccountSubscriptionItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCGetAccountSubscriptionItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCGetAccountSubscriptionItem
 */
export const CMsgGCGetAccountSubscriptionItem = new CMsgGCGetAccountSubscriptionItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCGetAccountSubscriptionItemResponse$Type extends MessageType<CMsgGCGetAccountSubscriptionItemResponse> {
    constructor() {
        super("CMsgGCGetAccountSubscriptionItemResponse", [
            { no: 1, name: "def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCGetAccountSubscriptionItemResponse>): CMsgGCGetAccountSubscriptionItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCGetAccountSubscriptionItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCGetAccountSubscriptionItemResponse): CMsgGCGetAccountSubscriptionItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 def_index */ 1:
                    message.defIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCGetAccountSubscriptionItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 def_index = 1; */
        if (message.defIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.defIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCGetAccountSubscriptionItemResponse
 */
export const CMsgGCGetAccountSubscriptionItemResponse = new CMsgGCGetAccountSubscriptionItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCAddGiftItem$Type extends MessageType<CMsgGCAddGiftItem> {
    constructor() {
        super("CMsgGCAddGiftItem", [
            { no: 1, name: "gifter_account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "receiver_account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "wrapped_item", kind: "message", T: () => CSOEconItem },
            { no: 4, name: "gift_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_wallet_cash_trusted", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCAddGiftItem>): CMsgGCAddGiftItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCAddGiftItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCAddGiftItem): CMsgGCAddGiftItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gifter_account_id */ 1:
                    message.gifterAccountId = reader.uint32();
                    break;
                case /* optional uint32 receiver_account_id */ 2:
                    message.receiverAccountId = reader.uint32();
                    break;
                case /* optional CSOEconItem wrapped_item */ 3:
                    message.wrappedItem = CSOEconItem.internalBinaryRead(reader, reader.uint32(), options, message.wrappedItem);
                    break;
                case /* optional string gift_message */ 4:
                    message.giftMessage = reader.string();
                    break;
                case /* optional bool is_wallet_cash_trusted */ 5:
                    message.isWalletCashTrusted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCAddGiftItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gifter_account_id = 1; */
        if (message.gifterAccountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.gifterAccountId);
        /* optional uint32 receiver_account_id = 2; */
        if (message.receiverAccountId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.receiverAccountId);
        /* optional CSOEconItem wrapped_item = 3; */
        if (message.wrappedItem)
            CSOEconItem.internalBinaryWrite(message.wrappedItem, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional string gift_message = 4; */
        if (message.giftMessage !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.giftMessage);
        /* optional bool is_wallet_cash_trusted = 5; */
        if (message.isWalletCashTrusted !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isWalletCashTrusted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCAddGiftItem
 */
export const CMsgGCAddGiftItem = new CMsgGCAddGiftItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCWrapAndDeliverGift$Type extends MessageType<CMsgClientToGCWrapAndDeliverGift> {
    constructor() {
        super("CMsgClientToGCWrapAndDeliverGift", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "give_to_account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "gift_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCWrapAndDeliverGift>): CMsgClientToGCWrapAndDeliverGift {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCWrapAndDeliverGift>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCWrapAndDeliverGift): CMsgClientToGCWrapAndDeliverGift {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 give_to_account_id */ 2:
                    message.giveToAccountId = reader.uint32();
                    break;
                case /* optional string gift_message */ 3:
                    message.giftMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCWrapAndDeliverGift, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional uint32 give_to_account_id = 2; */
        if (message.giveToAccountId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.giveToAccountId);
        /* optional string gift_message = 3; */
        if (message.giftMessage !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.giftMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCWrapAndDeliverGift
 */
export const CMsgClientToGCWrapAndDeliverGift = new CMsgClientToGCWrapAndDeliverGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgSQLGCToGCRevokeUntrustedGift$Type extends MessageType<CMsgSQLGCToGCRevokeUntrustedGift> {
    constructor() {
        super("CMsgSQLGCToGCRevokeUntrustedGift", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "sent_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgSQLGCToGCRevokeUntrustedGift>): CMsgSQLGCToGCRevokeUntrustedGift {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgSQLGCToGCRevokeUntrustedGift>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgSQLGCToGCRevokeUntrustedGift): CMsgSQLGCToGCRevokeUntrustedGift {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint64 sent_item_id */ 4:
                    message.sentItemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgSQLGCToGCRevokeUntrustedGift, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint64 sent_item_id = 4; */
        if (message.sentItemId !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.sentItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgSQLGCToGCRevokeUntrustedGift
 */
export const CMsgSQLGCToGCRevokeUntrustedGift = new CMsgSQLGCToGCRevokeUntrustedGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCWrapAndDeliverGiftResponse$Type extends MessageType<CMsgClientToGCWrapAndDeliverGiftResponse> {
    constructor() {
        super("CMsgClientToGCWrapAndDeliverGiftResponse", [
            { no: 1, name: "response", kind: "enum", opt: true, T: () => ["EGCMsgResponse", EGCMsgResponse] },
            { no: 2, name: "gifting_charge_uses", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "gifting_charge_max", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "gifting_uses", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gifting_max", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "gifting_window_hours", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "trade_restriction", kind: "enum", opt: true, T: () => ["EGCMsgInitiateTradeResponse", EGCMsgInitiateTradeResponse] }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCWrapAndDeliverGiftResponse>): CMsgClientToGCWrapAndDeliverGiftResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCWrapAndDeliverGiftResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCWrapAndDeliverGiftResponse): CMsgClientToGCWrapAndDeliverGiftResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional EGCMsgResponse response */ 1:
                    message.response = reader.int32();
                    break;
                case /* optional uint32 gifting_charge_uses */ 2:
                    message.giftingChargeUses = reader.uint32();
                    break;
                case /* optional int32 gifting_charge_max */ 3:
                    message.giftingChargeMax = reader.int32();
                    break;
                case /* optional uint32 gifting_uses */ 4:
                    message.giftingUses = reader.uint32();
                    break;
                case /* optional int32 gifting_max */ 5:
                    message.giftingMax = reader.int32();
                    break;
                case /* optional uint32 gifting_window_hours */ 6:
                    message.giftingWindowHours = reader.uint32();
                    break;
                case /* optional EGCMsgInitiateTradeResponse trade_restriction */ 7:
                    message.tradeRestriction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCWrapAndDeliverGiftResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional EGCMsgResponse response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).int32(message.response);
        /* optional uint32 gifting_charge_uses = 2; */
        if (message.giftingChargeUses !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.giftingChargeUses);
        /* optional int32 gifting_charge_max = 3; */
        if (message.giftingChargeMax !== undefined)
            writer.tag(3, WireType.Varint).int32(message.giftingChargeMax);
        /* optional uint32 gifting_uses = 4; */
        if (message.giftingUses !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.giftingUses);
        /* optional int32 gifting_max = 5; */
        if (message.giftingMax !== undefined)
            writer.tag(5, WireType.Varint).int32(message.giftingMax);
        /* optional uint32 gifting_window_hours = 6; */
        if (message.giftingWindowHours !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.giftingWindowHours);
        /* optional EGCMsgInitiateTradeResponse trade_restriction = 7; */
        if (message.tradeRestriction !== undefined)
            writer.tag(7, WireType.Varint).int32(message.tradeRestriction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCWrapAndDeliverGiftResponse
 */
export const CMsgClientToGCWrapAndDeliverGiftResponse = new CMsgClientToGCWrapAndDeliverGiftResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnwrapGift$Type extends MessageType<CMsgClientToGCUnwrapGift> {
    constructor() {
        super("CMsgClientToGCUnwrapGift", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCUnwrapGift>): CMsgClientToGCUnwrapGift {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCUnwrapGift>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCUnwrapGift): CMsgClientToGCUnwrapGift {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCUnwrapGift, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnwrapGift
 */
export const CMsgClientToGCUnwrapGift = new CMsgClientToGCUnwrapGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetGiftPermissions$Type extends MessageType<CMsgClientToGCGetGiftPermissions> {
    constructor() {
        super("CMsgClientToGCGetGiftPermissions", []);
    }
    create(value?: PartialMessage<CMsgClientToGCGetGiftPermissions>): CMsgClientToGCGetGiftPermissions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCGetGiftPermissions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCGetGiftPermissions): CMsgClientToGCGetGiftPermissions {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgClientToGCGetGiftPermissions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetGiftPermissions
 */
export const CMsgClientToGCGetGiftPermissions = new CMsgClientToGCGetGiftPermissions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetGiftPermissionsResponse$Type extends MessageType<CMsgClientToGCGetGiftPermissionsResponse> {
    constructor() {
        super("CMsgClientToGCGetGiftPermissionsResponse", [
            { no: 1, name: "is_unlimited", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "has_two_factor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "sender_permission", kind: "enum", opt: true, T: () => ["EGCMsgInitiateTradeResponse", EGCMsgInitiateTradeResponse] },
            { no: 7, name: "friendship_age_requirement", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "friendship_age_requirement_two_factor", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "friend_permissions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgClientToGCGetGiftPermissionsResponse_FriendPermission }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCGetGiftPermissionsResponse>): CMsgClientToGCGetGiftPermissionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.friendPermissions = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCGetGiftPermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCGetGiftPermissionsResponse): CMsgClientToGCGetGiftPermissionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_unlimited */ 1:
                    message.isUnlimited = reader.bool();
                    break;
                case /* optional bool has_two_factor */ 3:
                    message.hasTwoFactor = reader.bool();
                    break;
                case /* optional EGCMsgInitiateTradeResponse sender_permission */ 6:
                    message.senderPermission = reader.int32();
                    break;
                case /* optional uint32 friendship_age_requirement */ 7:
                    message.friendshipAgeRequirement = reader.uint32();
                    break;
                case /* optional uint32 friendship_age_requirement_two_factor */ 8:
                    message.friendshipAgeRequirementTwoFactor = reader.uint32();
                    break;
                case /* repeated CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions */ 9:
                    message.friendPermissions.push(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCGetGiftPermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_unlimited = 1; */
        if (message.isUnlimited !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isUnlimited);
        /* optional bool has_two_factor = 3; */
        if (message.hasTwoFactor !== undefined)
            writer.tag(3, WireType.Varint).bool(message.hasTwoFactor);
        /* optional EGCMsgInitiateTradeResponse sender_permission = 6; */
        if (message.senderPermission !== undefined)
            writer.tag(6, WireType.Varint).int32(message.senderPermission);
        /* optional uint32 friendship_age_requirement = 7; */
        if (message.friendshipAgeRequirement !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.friendshipAgeRequirement);
        /* optional uint32 friendship_age_requirement_two_factor = 8; */
        if (message.friendshipAgeRequirementTwoFactor !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.friendshipAgeRequirementTwoFactor);
        /* repeated CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9; */
        for (let i = 0; i < message.friendPermissions.length; i++)
            CMsgClientToGCGetGiftPermissionsResponse_FriendPermission.internalBinaryWrite(message.friendPermissions[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetGiftPermissionsResponse
 */
export const CMsgClientToGCGetGiftPermissionsResponse = new CMsgClientToGCGetGiftPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetGiftPermissionsResponse_FriendPermission$Type extends MessageType<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission> {
    constructor() {
        super("CMsgClientToGCGetGiftPermissionsResponse.FriendPermission", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "permission", kind: "enum", opt: true, T: () => ["EGCMsgInitiateTradeResponse", EGCMsgInitiateTradeResponse] }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission>): CMsgClientToGCGetGiftPermissionsResponse_FriendPermission {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCGetGiftPermissionsResponse_FriendPermission): CMsgClientToGCGetGiftPermissionsResponse_FriendPermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional EGCMsgInitiateTradeResponse permission */ 2:
                    message.permission = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional EGCMsgInitiateTradeResponse permission = 2; */
        if (message.permission !== undefined)
            writer.tag(2, WireType.Varint).int32(message.permission);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetGiftPermissionsResponse.FriendPermission
 */
export const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission = new CMsgClientToGCGetGiftPermissionsResponse_FriendPermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnpackBundle$Type extends MessageType<CMsgClientToGCUnpackBundle> {
    constructor() {
        super("CMsgClientToGCUnpackBundle", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCUnpackBundle>): CMsgClientToGCUnpackBundle {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCUnpackBundle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCUnpackBundle): CMsgClientToGCUnpackBundle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCUnpackBundle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnpackBundle
 */
export const CMsgClientToGCUnpackBundle = new CMsgClientToGCUnpackBundle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnpackBundleResponse$Type extends MessageType<CMsgClientToGCUnpackBundleResponse> {
    constructor() {
        super("CMsgClientToGCUnpackBundleResponse", [
            { no: 1, name: "unpacked_item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "response", kind: "enum", opt: true, T: () => ["CMsgClientToGCUnpackBundleResponse.EUnpackBundle", CMsgClientToGCUnpackBundleResponse_EUnpackBundle] },
            { no: 3, name: "unpacked_item_def_indexes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCUnpackBundleResponse>): CMsgClientToGCUnpackBundleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.unpackedItemIds = [];
        message.unpackedItemDefIndexes = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCUnpackBundleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCUnpackBundleResponse): CMsgClientToGCUnpackBundleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 unpacked_item_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedItemIds.push(reader.uint64().toBigInt());
                    else
                        message.unpackedItemIds.push(reader.uint64().toBigInt());
                    break;
                case /* optional CMsgClientToGCUnpackBundleResponse.EUnpackBundle response */ 2:
                    message.response = reader.int32();
                    break;
                case /* repeated uint32 unpacked_item_def_indexes */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedItemDefIndexes.push(reader.uint32());
                    else
                        message.unpackedItemDefIndexes.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCUnpackBundleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 unpacked_item_ids = 1; */
        for (let i = 0; i < message.unpackedItemIds.length; i++)
            writer.tag(1, WireType.Varint).uint64(message.unpackedItemIds[i]);
        /* optional CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2; */
        if (message.response !== undefined)
            writer.tag(2, WireType.Varint).int32(message.response);
        /* repeated uint32 unpacked_item_def_indexes = 3; */
        for (let i = 0; i < message.unpackedItemDefIndexes.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.unpackedItemDefIndexes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnpackBundleResponse
 */
export const CMsgClientToGCUnpackBundleResponse = new CMsgClientToGCUnpackBundleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPackBundle$Type extends MessageType<CMsgClientToGCPackBundle> {
    constructor() {
        super("CMsgClientToGCPackBundle", [
            { no: 1, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bundle_item_def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCPackBundle>): CMsgClientToGCPackBundle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCPackBundle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCPackBundle): CMsgClientToGCPackBundle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 item_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIds.push(reader.uint64().toBigInt());
                    else
                        message.itemIds.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint32 bundle_item_def_index */ 2:
                    message.bundleItemDefIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCPackBundle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 item_ids = 1; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(1, WireType.Varint).uint64(message.itemIds[i]);
        /* optional uint32 bundle_item_def_index = 2; */
        if (message.bundleItemDefIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.bundleItemDefIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPackBundle
 */
export const CMsgClientToGCPackBundle = new CMsgClientToGCPackBundle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPackBundleResponse$Type extends MessageType<CMsgClientToGCPackBundleResponse> {
    constructor() {
        super("CMsgClientToGCPackBundleResponse", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "response", kind: "enum", opt: true, T: () => ["CMsgClientToGCPackBundleResponse.EPackBundle", CMsgClientToGCPackBundleResponse_EPackBundle] }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCPackBundleResponse>): CMsgClientToGCPackBundleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCPackBundleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCPackBundleResponse): CMsgClientToGCPackBundleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional CMsgClientToGCPackBundleResponse.EPackBundle response */ 2:
                    message.response = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCPackBundleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional CMsgClientToGCPackBundleResponse.EPackBundle response = 2; */
        if (message.response !== undefined)
            writer.tag(2, WireType.Varint).int32(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPackBundleResponse
 */
export const CMsgClientToGCPackBundleResponse = new CMsgClientToGCPackBundleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientStoreTransactionCompleted$Type extends MessageType<CMsgGCToClientStoreTransactionCompleted> {
    constructor() {
        super("CMsgGCToClientStoreTransactionCompleted", [
            { no: 1, name: "txn_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToClientStoreTransactionCompleted>): CMsgGCToClientStoreTransactionCompleted {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToClientStoreTransactionCompleted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToClientStoreTransactionCompleted): CMsgGCToClientStoreTransactionCompleted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 txn_id */ 1:
                    message.txnId = reader.uint64().toBigInt();
                    break;
                case /* repeated uint64 item_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIds.push(reader.uint64().toBigInt());
                    else
                        message.itemIds.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToClientStoreTransactionCompleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 txn_id = 1; */
        if (message.txnId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.txnId);
        /* repeated uint64 item_ids = 2; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(2, WireType.Varint).uint64(message.itemIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientStoreTransactionCompleted
 */
export const CMsgGCToClientStoreTransactionCompleted = new CMsgGCToClientStoreTransactionCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCEquipItems$Type extends MessageType<CMsgClientToGCEquipItems> {
    constructor() {
        super("CMsgClientToGCEquipItems", [
            { no: 1, name: "equips", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgAdjustItemEquippedState }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCEquipItems>): CMsgClientToGCEquipItems {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equips = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCEquipItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCEquipItems): CMsgClientToGCEquipItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgAdjustItemEquippedState equips */ 1:
                    message.equips.push(CMsgAdjustItemEquippedState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCEquipItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgAdjustItemEquippedState equips = 1; */
        for (let i = 0; i < message.equips.length; i++)
            CMsgAdjustItemEquippedState.internalBinaryWrite(message.equips[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCEquipItems
 */
export const CMsgClientToGCEquipItems = new CMsgClientToGCEquipItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCEquipItemsResponse$Type extends MessageType<CMsgClientToGCEquipItemsResponse> {
    constructor() {
        super("CMsgClientToGCEquipItemsResponse", [
            { no: 1, name: "so_cache_version_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCEquipItemsResponse>): CMsgClientToGCEquipItemsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCEquipItemsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCEquipItemsResponse): CMsgClientToGCEquipItemsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 so_cache_version_id */ 1:
                    message.soCacheVersionId = reader.fixed64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCEquipItemsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 so_cache_version_id = 1; */
        if (message.soCacheVersionId !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.soCacheVersionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCEquipItemsResponse
 */
export const CMsgClientToGCEquipItemsResponse = new CMsgClientToGCEquipItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetItemStyle$Type extends MessageType<CMsgClientToGCSetItemStyle> {
    constructor() {
        super("CMsgClientToGCSetItemStyle", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "style_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCSetItemStyle>): CMsgClientToGCSetItemStyle {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCSetItemStyle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCSetItemStyle): CMsgClientToGCSetItemStyle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 style_index */ 2:
                    message.styleIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCSetItemStyle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional uint32 style_index = 2; */
        if (message.styleIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.styleIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetItemStyle
 */
export const CMsgClientToGCSetItemStyle = new CMsgClientToGCSetItemStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetItemStyleResponse$Type extends MessageType<CMsgClientToGCSetItemStyleResponse> {
    constructor() {
        super("CMsgClientToGCSetItemStyleResponse", [
            { no: 1, name: "response", kind: "enum", opt: true, T: () => ["CMsgClientToGCSetItemStyleResponse.ESetStyle", CMsgClientToGCSetItemStyleResponse_ESetStyle] }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCSetItemStyleResponse>): CMsgClientToGCSetItemStyleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCSetItemStyleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCSetItemStyleResponse): CMsgClientToGCSetItemStyleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgClientToGCSetItemStyleResponse.ESetStyle response */ 1:
                    message.response = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCSetItemStyleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).int32(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetItemStyleResponse
 */
export const CMsgClientToGCSetItemStyleResponse = new CMsgClientToGCSetItemStyleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockItemStyle$Type extends MessageType<CMsgClientToGCUnlockItemStyle> {
    constructor() {
        super("CMsgClientToGCUnlockItemStyle", [
            { no: 1, name: "item_to_unlock", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "style_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "consumable_item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCUnlockItemStyle>): CMsgClientToGCUnlockItemStyle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.consumableItemIds = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCUnlockItemStyle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCUnlockItemStyle): CMsgClientToGCUnlockItemStyle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_to_unlock */ 1:
                    message.itemToUnlock = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 style_index */ 2:
                    message.styleIndex = reader.uint32();
                    break;
                case /* repeated uint64 consumable_item_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.consumableItemIds.push(reader.uint64().toBigInt());
                    else
                        message.consumableItemIds.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCUnlockItemStyle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_to_unlock = 1; */
        if (message.itemToUnlock !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemToUnlock);
        /* optional uint32 style_index = 2; */
        if (message.styleIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.styleIndex);
        /* repeated uint64 consumable_item_ids = 3; */
        for (let i = 0; i < message.consumableItemIds.length; i++)
            writer.tag(3, WireType.Varint).uint64(message.consumableItemIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockItemStyle
 */
export const CMsgClientToGCUnlockItemStyle = new CMsgClientToGCUnlockItemStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockItemStyleResponse$Type extends MessageType<CMsgClientToGCUnlockItemStyleResponse> {
    constructor() {
        super("CMsgClientToGCUnlockItemStyleResponse", [
            { no: 1, name: "response", kind: "enum", opt: true, T: () => ["CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle", CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle] },
            { no: 2, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "style_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "style_prereq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCUnlockItemStyleResponse>): CMsgClientToGCUnlockItemStyleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCUnlockItemStyleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCUnlockItemStyleResponse): CMsgClientToGCUnlockItemStyleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response */ 1:
                    message.response = reader.int32();
                    break;
                case /* optional uint64 item_id */ 2:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 style_index */ 3:
                    message.styleIndex = reader.uint32();
                    break;
                case /* optional uint32 style_prereq */ 4:
                    message.stylePrereq = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCUnlockItemStyleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).int32(message.response);
        /* optional uint64 item_id = 2; */
        if (message.itemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemId);
        /* optional uint32 style_index = 3; */
        if (message.styleIndex !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.styleIndex);
        /* optional uint32 style_prereq = 4; */
        if (message.stylePrereq !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.stylePrereq);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockItemStyleResponse
 */
export const CMsgClientToGCUnlockItemStyleResponse = new CMsgClientToGCUnlockItemStyleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetItemInventoryCategory$Type extends MessageType<CMsgClientToGCSetItemInventoryCategory> {
    constructor() {
        super("CMsgClientToGCSetItemInventoryCategory", [
            { no: 1, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "set_to_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "remove_categories", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "add_categories", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCSetItemInventoryCategory>): CMsgClientToGCSetItemInventoryCategory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCSetItemInventoryCategory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCSetItemInventoryCategory): CMsgClientToGCSetItemInventoryCategory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 item_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIds.push(reader.uint64().toBigInt());
                    else
                        message.itemIds.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint32 set_to_value */ 2:
                    message.setToValue = reader.uint32();
                    break;
                case /* optional uint32 remove_categories */ 3:
                    message.removeCategories = reader.uint32();
                    break;
                case /* optional uint32 add_categories */ 4:
                    message.addCategories = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCSetItemInventoryCategory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 item_ids = 1; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(1, WireType.Varint).uint64(message.itemIds[i]);
        /* optional uint32 set_to_value = 2; */
        if (message.setToValue !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.setToValue);
        /* optional uint32 remove_categories = 3; */
        if (message.removeCategories !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.removeCategories);
        /* optional uint32 add_categories = 4; */
        if (message.addCategories !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.addCategories);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetItemInventoryCategory
 */
export const CMsgClientToGCSetItemInventoryCategory = new CMsgClientToGCSetItemInventoryCategory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockCrate$Type extends MessageType<CMsgClientToGCUnlockCrate> {
    constructor() {
        super("CMsgClientToGCUnlockCrate", [
            { no: 1, name: "crate_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCUnlockCrate>): CMsgClientToGCUnlockCrate {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCUnlockCrate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCUnlockCrate): CMsgClientToGCUnlockCrate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 crate_item_id */ 1:
                    message.crateItemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 key_item_id */ 2:
                    message.keyItemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCUnlockCrate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 crate_item_id = 1; */
        if (message.crateItemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.crateItemId);
        /* optional uint64 key_item_id = 2; */
        if (message.keyItemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.keyItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockCrate
 */
export const CMsgClientToGCUnlockCrate = new CMsgClientToGCUnlockCrate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockCrateResponse$Type extends MessageType<CMsgClientToGCUnlockCrateResponse> {
    constructor() {
        super("CMsgClientToGCUnlockCrateResponse", [
            { no: 1, name: "result", kind: "enum", opt: true, T: () => ["EGCMsgResponse", EGCMsgResponse] },
            { no: 2, name: "granted_items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgClientToGCUnlockCrateResponse_Item }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCUnlockCrateResponse>): CMsgClientToGCUnlockCrateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.grantedItems = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCUnlockCrateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCUnlockCrateResponse): CMsgClientToGCUnlockCrateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional EGCMsgResponse result */ 1:
                    message.result = reader.int32();
                    break;
                case /* repeated CMsgClientToGCUnlockCrateResponse.Item granted_items */ 2:
                    message.grantedItems.push(CMsgClientToGCUnlockCrateResponse_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCUnlockCrateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional EGCMsgResponse result = 1; */
        if (message.result !== undefined)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* repeated CMsgClientToGCUnlockCrateResponse.Item granted_items = 2; */
        for (let i = 0; i < message.grantedItems.length; i++)
            CMsgClientToGCUnlockCrateResponse_Item.internalBinaryWrite(message.grantedItems[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockCrateResponse
 */
export const CMsgClientToGCUnlockCrateResponse = new CMsgClientToGCUnlockCrateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockCrateResponse_Item$Type extends MessageType<CMsgClientToGCUnlockCrateResponse_Item> {
    constructor() {
        super("CMsgClientToGCUnlockCrateResponse.Item", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCUnlockCrateResponse_Item>): CMsgClientToGCUnlockCrateResponse_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCUnlockCrateResponse_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCUnlockCrateResponse_Item): CMsgClientToGCUnlockCrateResponse_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 def_index */ 2:
                    message.defIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCUnlockCrateResponse_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional uint32 def_index = 2; */
        if (message.defIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.defIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockCrateResponse.Item
 */
export const CMsgClientToGCUnlockCrateResponse_Item = new CMsgClientToGCUnlockCrateResponse_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCRemoveItemAttribute$Type extends MessageType<CMsgClientToGCRemoveItemAttribute> {
    constructor() {
        super("CMsgClientToGCRemoveItemAttribute", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCRemoveItemAttribute>): CMsgClientToGCRemoveItemAttribute {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCRemoveItemAttribute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCRemoveItemAttribute): CMsgClientToGCRemoveItemAttribute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCRemoveItemAttribute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCRemoveItemAttribute
 */
export const CMsgClientToGCRemoveItemAttribute = new CMsgClientToGCRemoveItemAttribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCRemoveItemAttributeResponse$Type extends MessageType<CMsgClientToGCRemoveItemAttributeResponse> {
    constructor() {
        super("CMsgClientToGCRemoveItemAttributeResponse", [
            { no: 1, name: "response", kind: "enum", opt: true, T: () => ["CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute", CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute] },
            { no: 2, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCRemoveItemAttributeResponse>): CMsgClientToGCRemoveItemAttributeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCRemoveItemAttributeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCRemoveItemAttributeResponse): CMsgClientToGCRemoveItemAttributeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response */ 1:
                    message.response = reader.int32();
                    break;
                case /* optional uint64 item_id */ 2:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCRemoveItemAttributeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).int32(message.response);
        /* optional uint64 item_id = 2; */
        if (message.itemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCRemoveItemAttributeResponse
 */
export const CMsgClientToGCRemoveItemAttributeResponse = new CMsgClientToGCRemoveItemAttributeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCNameItem$Type extends MessageType<CMsgClientToGCNameItem> {
    constructor() {
        super("CMsgClientToGCNameItem", [
            { no: 1, name: "subject_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tool_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCNameItem>): CMsgClientToGCNameItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCNameItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCNameItem): CMsgClientToGCNameItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 subject_item_id */ 1:
                    message.subjectItemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 tool_item_id */ 2:
                    message.toolItemId = reader.uint64().toBigInt();
                    break;
                case /* optional string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCNameItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 subject_item_id = 1; */
        if (message.subjectItemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.subjectItemId);
        /* optional uint64 tool_item_id = 2; */
        if (message.toolItemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.toolItemId);
        /* optional string name = 3; */
        if (message.name !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCNameItem
 */
export const CMsgClientToGCNameItem = new CMsgClientToGCNameItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCNameItemResponse$Type extends MessageType<CMsgClientToGCNameItemResponse> {
    constructor() {
        super("CMsgClientToGCNameItemResponse", [
            { no: 1, name: "response", kind: "enum", opt: true, T: () => ["CMsgClientToGCNameItemResponse.ENameItem", CMsgClientToGCNameItemResponse_ENameItem] },
            { no: 2, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCNameItemResponse>): CMsgClientToGCNameItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCNameItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCNameItemResponse): CMsgClientToGCNameItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgClientToGCNameItemResponse.ENameItem response */ 1:
                    message.response = reader.int32();
                    break;
                case /* optional uint64 item_id */ 2:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCNameItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgClientToGCNameItemResponse.ENameItem response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).int32(message.response);
        /* optional uint64 item_id = 2; */
        if (message.itemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCNameItemResponse
 */
export const CMsgClientToGCNameItemResponse = new CMsgClientToGCNameItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCSetItemPosition$Type extends MessageType<CMsgGCSetItemPosition> {
    constructor() {
        super("CMsgGCSetItemPosition", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "new_position", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCSetItemPosition>): CMsgGCSetItemPosition {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCSetItemPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCSetItemPosition): CMsgGCSetItemPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 new_position */ 2:
                    message.newPosition = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCSetItemPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional uint32 new_position = 2; */
        if (message.newPosition !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.newPosition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCSetItemPosition
 */
export const CMsgGCSetItemPosition = new CMsgGCSetItemPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CAttribute_ItemDynamicRecipeComponent$Type extends MessageType<CAttribute_ItemDynamicRecipeComponent> {
    constructor() {
        super("CAttribute_ItemDynamicRecipeComponent", [
            { no: 1, name: "item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_quality", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "item_flags", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "attributes_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "item_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "items_fulfilled", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "item_rarity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "lootlist", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "fulfilled_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "associated_item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CAttribute_ItemDynamicRecipeComponent>): CAttribute_ItemDynamicRecipeComponent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CAttribute_ItemDynamicRecipeComponent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CAttribute_ItemDynamicRecipeComponent): CAttribute_ItemDynamicRecipeComponent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def */ 1:
                    message.itemDef = reader.uint32();
                    break;
                case /* optional uint32 item_quality */ 2:
                    message.itemQuality = reader.uint32();
                    break;
                case /* optional uint32 item_flags */ 3:
                    message.itemFlags = reader.uint32();
                    break;
                case /* optional string attributes_string */ 4:
                    message.attributesString = reader.string();
                    break;
                case /* optional uint32 item_count */ 5:
                    message.itemCount = reader.uint32();
                    break;
                case /* optional uint32 items_fulfilled */ 6:
                    message.itemsFulfilled = reader.uint32();
                    break;
                case /* optional uint32 item_rarity */ 7:
                    message.itemRarity = reader.uint32();
                    break;
                case /* optional string lootlist */ 8:
                    message.lootlist = reader.string();
                    break;
                case /* optional uint64 fulfilled_item_id */ 9:
                    message.fulfilledItemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 associated_item_def */ 10:
                    message.associatedItemDef = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CAttribute_ItemDynamicRecipeComponent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def = 1; */
        if (message.itemDef !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDef);
        /* optional uint32 item_quality = 2; */
        if (message.itemQuality !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.itemQuality);
        /* optional uint32 item_flags = 3; */
        if (message.itemFlags !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.itemFlags);
        /* optional string attributes_string = 4; */
        if (message.attributesString !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.attributesString);
        /* optional uint32 item_count = 5; */
        if (message.itemCount !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.itemCount);
        /* optional uint32 items_fulfilled = 6; */
        if (message.itemsFulfilled !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.itemsFulfilled);
        /* optional uint32 item_rarity = 7; */
        if (message.itemRarity !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.itemRarity);
        /* optional string lootlist = 8; */
        if (message.lootlist !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.lootlist);
        /* optional uint64 fulfilled_item_id = 9; */
        if (message.fulfilledItemId !== undefined)
            writer.tag(9, WireType.Varint).uint64(message.fulfilledItemId);
        /* optional uint32 associated_item_def = 10; */
        if (message.associatedItemDef !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.associatedItemDef);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CAttribute_ItemDynamicRecipeComponent
 */
export const CAttribute_ItemDynamicRecipeComponent = new CAttribute_ItemDynamicRecipeComponent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket$Type extends MessageType<CProtoItemSocket> {
    constructor() {
        super("CProtoItemSocket", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "attr_def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "required_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "required_hero", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "gem_def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "not_tradable", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "required_item_slot", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket>): CProtoItemSocket {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket): CProtoItemSocket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 attr_def_index */ 2:
                    message.attrDefIndex = reader.uint32();
                    break;
                case /* optional uint32 required_type */ 3:
                    message.requiredType = reader.uint32();
                    break;
                case /* optional string required_hero */ 4:
                    message.requiredHero = reader.string();
                    break;
                case /* optional uint32 gem_def_index */ 5:
                    message.gemDefIndex = reader.uint32();
                    break;
                case /* optional bool not_tradable */ 6:
                    message.notTradable = reader.bool();
                    break;
                case /* optional string required_item_slot */ 7:
                    message.requiredItemSlot = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional uint32 attr_def_index = 2; */
        if (message.attrDefIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.attrDefIndex);
        /* optional uint32 required_type = 3; */
        if (message.requiredType !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.requiredType);
        /* optional string required_hero = 4; */
        if (message.requiredHero !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.requiredHero);
        /* optional uint32 gem_def_index = 5; */
        if (message.gemDefIndex !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.gemDefIndex);
        /* optional bool not_tradable = 6; */
        if (message.notTradable !== undefined)
            writer.tag(6, WireType.Varint).bool(message.notTradable);
        /* optional string required_item_slot = 7; */
        if (message.requiredItemSlot !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.requiredItemSlot);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket
 */
export const CProtoItemSocket = new CProtoItemSocket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Empty$Type extends MessageType<CProtoItemSocket_Empty> {
    constructor() {
        super("CProtoItemSocket_Empty", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_Empty>): CProtoItemSocket_Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_Empty): CProtoItemSocket_Empty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Empty
 */
export const CProtoItemSocket_Empty = new CProtoItemSocket_Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Effect$Type extends MessageType<CProtoItemSocket_Effect> {
    constructor() {
        super("CProtoItemSocket_Effect", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
            { no: 2, name: "effect", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_Effect>): CProtoItemSocket_Effect {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_Effect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_Effect): CProtoItemSocket_Effect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                case /* optional uint32 effect */ 2:
                    message.effect = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_Effect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 effect = 2; */
        if (message.effect !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.effect);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Effect
 */
export const CProtoItemSocket_Effect = new CProtoItemSocket_Effect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Color$Type extends MessageType<CProtoItemSocket_Color> {
    constructor() {
        super("CProtoItemSocket_Color", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
            { no: 2, name: "red", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "green", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "blue", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_Color>): CProtoItemSocket_Color {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_Color>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_Color): CProtoItemSocket_Color {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                case /* optional uint32 red */ 2:
                    message.red = reader.uint32();
                    break;
                case /* optional uint32 green */ 3:
                    message.green = reader.uint32();
                    break;
                case /* optional uint32 blue */ 4:
                    message.blue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_Color, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 red = 2; */
        if (message.red !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.red);
        /* optional uint32 green = 3; */
        if (message.green !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.green);
        /* optional uint32 blue = 4; */
        if (message.blue !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.blue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Color
 */
export const CProtoItemSocket_Color = new CProtoItemSocket_Color$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Strange$Type extends MessageType<CProtoItemSocket_Strange> {
    constructor() {
        super("CProtoItemSocket_Strange", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
            { no: 2, name: "strange_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "strange_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_Strange>): CProtoItemSocket_Strange {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_Strange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_Strange): CProtoItemSocket_Strange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                case /* optional uint32 strange_type */ 2:
                    message.strangeType = reader.uint32();
                    break;
                case /* optional uint32 strange_value */ 3:
                    message.strangeValue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_Strange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 strange_type = 2; */
        if (message.strangeType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.strangeType);
        /* optional uint32 strange_value = 3; */
        if (message.strangeValue !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.strangeValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Strange
 */
export const CProtoItemSocket_Strange = new CProtoItemSocket_Strange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY$Type extends MessageType<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY> {
    constructor() {
        super("CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
            { no: 2, name: "strange_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "strange_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "ability_effect", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY>): CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY): CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                case /* optional uint32 strange_type */ 2:
                    message.strangeType = reader.uint32();
                    break;
                case /* optional uint32 strange_value */ 3:
                    message.strangeValue = reader.uint32();
                    break;
                case /* optional uint32 ability_effect */ 4:
                    message.abilityEffect = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 strange_type = 2; */
        if (message.strangeType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.strangeType);
        /* optional uint32 strange_value = 3; */
        if (message.strangeValue !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.strangeValue);
        /* optional uint32 ability_effect = 4; */
        if (message.abilityEffect !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.abilityEffect);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY
 */
export const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY = new CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Spectator$Type extends MessageType<CProtoItemSocket_Spectator> {
    constructor() {
        super("CProtoItemSocket_Spectator", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
            { no: 2, name: "games_viewed", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "corporation_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "league_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "team_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_Spectator>): CProtoItemSocket_Spectator {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_Spectator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_Spectator): CProtoItemSocket_Spectator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                case /* optional uint32 games_viewed */ 2:
                    message.gamesViewed = reader.uint32();
                    break;
                case /* optional uint32 corporation_id */ 3:
                    message.corporationId = reader.uint32();
                    break;
                case /* optional uint32 league_id */ 4:
                    message.leagueId = reader.uint32();
                    break;
                case /* optional uint32 team_id */ 5:
                    message.teamId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_Spectator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 games_viewed = 2; */
        if (message.gamesViewed !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gamesViewed);
        /* optional uint32 corporation_id = 3; */
        if (message.corporationId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.corporationId);
        /* optional uint32 league_id = 4; */
        if (message.leagueId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.leagueId);
        /* optional uint32 team_id = 5; */
        if (message.teamId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Spectator
 */
export const CProtoItemSocket_Spectator = new CProtoItemSocket_Spectator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_AssetModifier$Type extends MessageType<CProtoItemSocket_AssetModifier> {
    constructor() {
        super("CProtoItemSocket_AssetModifier", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
            { no: 2, name: "asset_modifier", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_AssetModifier>): CProtoItemSocket_AssetModifier {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_AssetModifier>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_AssetModifier): CProtoItemSocket_AssetModifier {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                case /* optional uint32 asset_modifier */ 2:
                    message.assetModifier = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_AssetModifier, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 asset_modifier = 2; */
        if (message.assetModifier !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.assetModifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_AssetModifier
 */
export const CProtoItemSocket_AssetModifier = new CProtoItemSocket_AssetModifier$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY$Type extends MessageType<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY> {
    constructor() {
        super("CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
            { no: 2, name: "asset_modifier", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "anim_modifier", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "ability_effect", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY>): CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY): CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                case /* optional uint32 asset_modifier */ 2:
                    message.assetModifier = reader.uint32();
                    break;
                case /* optional uint32 anim_modifier */ 3:
                    message.animModifier = reader.uint32();
                    break;
                case /* optional uint32 ability_effect */ 4:
                    message.abilityEffect = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 asset_modifier = 2; */
        if (message.assetModifier !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.assetModifier);
        /* optional uint32 anim_modifier = 3; */
        if (message.animModifier !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.animModifier);
        /* optional uint32 ability_effect = 4; */
        if (message.abilityEffect !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.abilityEffect);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY
 */
export const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY = new CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Autograph$Type extends MessageType<CProtoItemSocket_Autograph> {
    constructor() {
        super("CProtoItemSocket_Autograph", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
            { no: 2, name: "autograph", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "autograph_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "autograph_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_Autograph>): CProtoItemSocket_Autograph {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_Autograph>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_Autograph): CProtoItemSocket_Autograph {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                case /* optional string autograph */ 2:
                    message.autograph = reader.string();
                    break;
                case /* optional uint32 autograph_id */ 3:
                    message.autographId = reader.uint32();
                    break;
                case /* optional uint32 autograph_score */ 4:
                    message.autographScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_Autograph, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string autograph = 2; */
        if (message.autograph !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.autograph);
        /* optional uint32 autograph_id = 3; */
        if (message.autographId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.autographId);
        /* optional uint32 autograph_score = 4; */
        if (message.autographScore !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.autographScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Autograph
 */
export const CProtoItemSocket_Autograph = new CProtoItemSocket_Autograph$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_StaticVisuals$Type extends MessageType<CProtoItemSocket_StaticVisuals> {
    constructor() {
        super("CProtoItemSocket_StaticVisuals", [
            { no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket }
        ]);
    }
    create(value?: PartialMessage<CProtoItemSocket_StaticVisuals>): CProtoItemSocket_StaticVisuals {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CProtoItemSocket_StaticVisuals>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CProtoItemSocket_StaticVisuals): CProtoItemSocket_StaticVisuals {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CProtoItemSocket socket */ 1:
                    message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CProtoItemSocket_StaticVisuals, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CProtoItemSocket socket = 1; */
        if (message.socket)
            CProtoItemSocket.internalBinaryWrite(message.socket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_StaticVisuals
 */
export const CProtoItemSocket_StaticVisuals = new CProtoItemSocket_StaticVisuals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CAttribute_String$Type extends MessageType<CAttribute_String> {
    constructor() {
        super("CAttribute_String", [
            { no: 1, name: "value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CAttribute_String>): CAttribute_String {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CAttribute_String>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CAttribute_String): CAttribute_String {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CAttribute_String, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string value = 1; */
        if (message.value !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CAttribute_String
 */
export const CAttribute_String = new CAttribute_String$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetItemDailyRevenue_Request$Type extends MessageType<CWorkshop_GetItemDailyRevenue_Request> {
    constructor() {
        super("CWorkshop_GetItemDailyRevenue_Request", [
            { no: 1, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "date_start", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "date_end", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CWorkshop_GetItemDailyRevenue_Request>): CWorkshop_GetItemDailyRevenue_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CWorkshop_GetItemDailyRevenue_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CWorkshop_GetItemDailyRevenue_Request): CWorkshop_GetItemDailyRevenue_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 appid */ 1:
                    message.appid = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 2:
                    message.itemId = reader.uint32();
                    break;
                case /* optional uint32 date_start */ 3:
                    message.dateStart = reader.uint32();
                    break;
                case /* optional uint32 date_end */ 4:
                    message.dateEnd = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CWorkshop_GetItemDailyRevenue_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 appid = 1; */
        if (message.appid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.appid);
        /* optional uint32 item_id = 2; */
        if (message.itemId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.itemId);
        /* optional uint32 date_start = 3; */
        if (message.dateStart !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.dateStart);
        /* optional uint32 date_end = 4; */
        if (message.dateEnd !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dateEnd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetItemDailyRevenue_Request
 */
export const CWorkshop_GetItemDailyRevenue_Request = new CWorkshop_GetItemDailyRevenue_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetItemDailyRevenue_Response$Type extends MessageType<CWorkshop_GetItemDailyRevenue_Response> {
    constructor() {
        super("CWorkshop_GetItemDailyRevenue_Response", [
            { no: 1, name: "country_revenue", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue }
        ]);
    }
    create(value?: PartialMessage<CWorkshop_GetItemDailyRevenue_Response>): CWorkshop_GetItemDailyRevenue_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.countryRevenue = [];
        if (value !== undefined)
            reflectionMergePartial<CWorkshop_GetItemDailyRevenue_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CWorkshop_GetItemDailyRevenue_Response): CWorkshop_GetItemDailyRevenue_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue */ 1:
                    message.countryRevenue.push(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CWorkshop_GetItemDailyRevenue_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1; */
        for (let i = 0; i < message.countryRevenue.length; i++)
            CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue.internalBinaryWrite(message.countryRevenue[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetItemDailyRevenue_Response
 */
export const CWorkshop_GetItemDailyRevenue_Response = new CWorkshop_GetItemDailyRevenue_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue$Type extends MessageType<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue> {
    constructor() {
        super("CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue", [
            { no: 1, name: "country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "date", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "revenue_usd", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "units", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue>): CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue): CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string country_code */ 1:
                    message.countryCode = reader.string();
                    break;
                case /* optional uint32 date */ 2:
                    message.date = reader.uint32();
                    break;
                case /* optional int64 revenue_usd */ 3:
                    message.revenueUsd = reader.int64().toBigInt();
                    break;
                case /* optional int32 units */ 4:
                    message.units = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string country_code = 1; */
        if (message.countryCode !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.countryCode);
        /* optional uint32 date = 2; */
        if (message.date !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.date);
        /* optional int64 revenue_usd = 3; */
        if (message.revenueUsd !== undefined)
            writer.tag(3, WireType.Varint).int64(message.revenueUsd);
        /* optional int32 units = 4; */
        if (message.units !== undefined)
            writer.tag(4, WireType.Varint).int32(message.units);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue
 */
export const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue = new CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetPackageDailyRevenue_Request$Type extends MessageType<CWorkshop_GetPackageDailyRevenue_Request> {
    constructor() {
        super("CWorkshop_GetPackageDailyRevenue_Request", [
            { no: 1, name: "packageid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "date_start", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "date_end", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CWorkshop_GetPackageDailyRevenue_Request>): CWorkshop_GetPackageDailyRevenue_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CWorkshop_GetPackageDailyRevenue_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CWorkshop_GetPackageDailyRevenue_Request): CWorkshop_GetPackageDailyRevenue_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 packageid */ 1:
                    message.packageid = reader.uint32();
                    break;
                case /* optional uint32 date_start */ 2:
                    message.dateStart = reader.uint32();
                    break;
                case /* optional uint32 date_end */ 3:
                    message.dateEnd = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CWorkshop_GetPackageDailyRevenue_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 packageid = 1; */
        if (message.packageid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.packageid);
        /* optional uint32 date_start = 2; */
        if (message.dateStart !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.dateStart);
        /* optional uint32 date_end = 3; */
        if (message.dateEnd !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.dateEnd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetPackageDailyRevenue_Request
 */
export const CWorkshop_GetPackageDailyRevenue_Request = new CWorkshop_GetPackageDailyRevenue_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetPackageDailyRevenue_Response$Type extends MessageType<CWorkshop_GetPackageDailyRevenue_Response> {
    constructor() {
        super("CWorkshop_GetPackageDailyRevenue_Response", [
            { no: 1, name: "country_revenue", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue }
        ]);
    }
    create(value?: PartialMessage<CWorkshop_GetPackageDailyRevenue_Response>): CWorkshop_GetPackageDailyRevenue_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.countryRevenue = [];
        if (value !== undefined)
            reflectionMergePartial<CWorkshop_GetPackageDailyRevenue_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CWorkshop_GetPackageDailyRevenue_Response): CWorkshop_GetPackageDailyRevenue_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue */ 1:
                    message.countryRevenue.push(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CWorkshop_GetPackageDailyRevenue_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1; */
        for (let i = 0; i < message.countryRevenue.length; i++)
            CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue.internalBinaryWrite(message.countryRevenue[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetPackageDailyRevenue_Response
 */
export const CWorkshop_GetPackageDailyRevenue_Response = new CWorkshop_GetPackageDailyRevenue_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue$Type extends MessageType<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue> {
    constructor() {
        super("CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue", [
            { no: 1, name: "country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "date", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "revenue_usd", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "units", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue>): CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue): CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string country_code */ 1:
                    message.countryCode = reader.string();
                    break;
                case /* optional uint32 date */ 2:
                    message.date = reader.uint32();
                    break;
                case /* optional int64 revenue_usd */ 3:
                    message.revenueUsd = reader.int64().toBigInt();
                    break;
                case /* optional int32 units */ 4:
                    message.units = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string country_code = 1; */
        if (message.countryCode !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.countryCode);
        /* optional uint32 date = 2; */
        if (message.date !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.date);
        /* optional int64 revenue_usd = 3; */
        if (message.revenueUsd !== undefined)
            writer.tag(3, WireType.Varint).int64(message.revenueUsd);
        /* optional int32 units = 4; */
        if (message.units !== undefined)
            writer.tag(4, WireType.Varint).int32(message.units);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue
 */
export const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue = new CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgSQLGCToGCGrantBackpackSlots$Type extends MessageType<CMsgSQLGCToGCGrantBackpackSlots> {
    constructor() {
        super("CMsgSQLGCToGCGrantBackpackSlots", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "add_slots", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgSQLGCToGCGrantBackpackSlots>): CMsgSQLGCToGCGrantBackpackSlots {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgSQLGCToGCGrantBackpackSlots>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgSQLGCToGCGrantBackpackSlots): CMsgSQLGCToGCGrantBackpackSlots {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 add_slots */ 2:
                    message.addSlots = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgSQLGCToGCGrantBackpackSlots, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint32 add_slots = 2; */
        if (message.addSlots !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.addSlots);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgSQLGCToGCGrantBackpackSlots
 */
export const CMsgSQLGCToGCGrantBackpackSlots = new CMsgSQLGCToGCGrantBackpackSlots$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCLookupAccountName$Type extends MessageType<CMsgClientToGCLookupAccountName> {
    constructor() {
        super("CMsgClientToGCLookupAccountName", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCLookupAccountName>): CMsgClientToGCLookupAccountName {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCLookupAccountName>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCLookupAccountName): CMsgClientToGCLookupAccountName {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCLookupAccountName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCLookupAccountName
 */
export const CMsgClientToGCLookupAccountName = new CMsgClientToGCLookupAccountName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCLookupAccountNameResponse$Type extends MessageType<CMsgClientToGCLookupAccountNameResponse> {
    constructor() {
        super("CMsgClientToGCLookupAccountNameResponse", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCLookupAccountNameResponse>): CMsgClientToGCLookupAccountNameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCLookupAccountNameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCLookupAccountNameResponse): CMsgClientToGCLookupAccountNameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional string account_name */ 2:
                    message.accountName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCLookupAccountNameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional string account_name = 2; */
        if (message.accountName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.accountName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCLookupAccountNameResponse
 */
export const CMsgClientToGCLookupAccountNameResponse = new CMsgClientToGCLookupAccountNameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipe$Type extends MessageType<CMsgClientToGCCreateStaticRecipe> {
    constructor() {
        super("CMsgClientToGCCreateStaticRecipe", [
            { no: 1, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgClientToGCCreateStaticRecipe_Item },
            { no: 2, name: "recipe_def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipe>): CMsgClientToGCCreateStaticRecipe {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCCreateStaticRecipe>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCCreateStaticRecipe): CMsgClientToGCCreateStaticRecipe {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgClientToGCCreateStaticRecipe.Item items */ 1:
                    message.items.push(CMsgClientToGCCreateStaticRecipe_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 recipe_def_index */ 2:
                    message.recipeDefIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCCreateStaticRecipe, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgClientToGCCreateStaticRecipe.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            CMsgClientToGCCreateStaticRecipe_Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 recipe_def_index = 2; */
        if (message.recipeDefIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.recipeDefIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipe
 */
export const CMsgClientToGCCreateStaticRecipe = new CMsgClientToGCCreateStaticRecipe$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipe_Item$Type extends MessageType<CMsgClientToGCCreateStaticRecipe_Item> {
    constructor() {
        super("CMsgClientToGCCreateStaticRecipe.Item", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipe_Item>): CMsgClientToGCCreateStaticRecipe_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCCreateStaticRecipe_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCCreateStaticRecipe_Item): CMsgClientToGCCreateStaticRecipe_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 slot_id */ 2:
                    message.slotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCCreateStaticRecipe_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional uint32 slot_id = 2; */
        if (message.slotId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.slotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipe.Item
 */
export const CMsgClientToGCCreateStaticRecipe_Item = new CMsgClientToGCCreateStaticRecipe_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipeResponse$Type extends MessageType<CMsgClientToGCCreateStaticRecipeResponse> {
    constructor() {
        super("CMsgClientToGCCreateStaticRecipeResponse", [
            { no: 1, name: "response", kind: "enum", opt: true, T: () => ["CMsgClientToGCCreateStaticRecipeResponse.EResponse", CMsgClientToGCCreateStaticRecipeResponse_EResponse] },
            { no: 2, name: "output_items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgClientToGCCreateStaticRecipeResponse_OutputItem },
            { no: 3, name: "input_errors", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgClientToGCCreateStaticRecipeResponse_InputError },
            { no: 4, name: "additional_outputs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipeResponse>): CMsgClientToGCCreateStaticRecipeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.outputItems = [];
        message.inputErrors = [];
        message.additionalOutputs = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCCreateStaticRecipeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCCreateStaticRecipeResponse): CMsgClientToGCCreateStaticRecipeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgClientToGCCreateStaticRecipeResponse.EResponse response */ 1:
                    message.response = reader.int32();
                    break;
                case /* repeated CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items */ 2:
                    message.outputItems.push(CMsgClientToGCCreateStaticRecipeResponse_OutputItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors */ 3:
                    message.inputErrors.push(CMsgClientToGCCreateStaticRecipeResponse_InputError.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs */ 4:
                    message.additionalOutputs.push(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCCreateStaticRecipeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1; */
        if (message.response !== undefined)
            writer.tag(1, WireType.Varint).int32(message.response);
        /* repeated CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2; */
        for (let i = 0; i < message.outputItems.length; i++)
            CMsgClientToGCCreateStaticRecipeResponse_OutputItem.internalBinaryWrite(message.outputItems[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3; */
        for (let i = 0; i < message.inputErrors.length; i++)
            CMsgClientToGCCreateStaticRecipeResponse_InputError.internalBinaryWrite(message.inputErrors[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4; */
        for (let i = 0; i < message.additionalOutputs.length; i++)
            CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput.internalBinaryWrite(message.additionalOutputs[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipeResponse
 */
export const CMsgClientToGCCreateStaticRecipeResponse = new CMsgClientToGCCreateStaticRecipeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipeResponse_OutputItem$Type extends MessageType<CMsgClientToGCCreateStaticRecipeResponse_OutputItem> {
    constructor() {
        super("CMsgClientToGCCreateStaticRecipeResponse.OutputItem", [
            { no: 1, name: "def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipeResponse_OutputItem>): CMsgClientToGCCreateStaticRecipeResponse_OutputItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCCreateStaticRecipeResponse_OutputItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCCreateStaticRecipeResponse_OutputItem): CMsgClientToGCCreateStaticRecipeResponse_OutputItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 def_index */ 1:
                    message.defIndex = reader.uint32();
                    break;
                case /* optional uint64 item_id */ 2:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 slot_id */ 3:
                    message.slotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCCreateStaticRecipeResponse_OutputItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 def_index = 1; */
        if (message.defIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.defIndex);
        /* optional uint64 item_id = 2; */
        if (message.itemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemId);
        /* optional uint32 slot_id = 3; */
        if (message.slotId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.slotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipeResponse.OutputItem
 */
export const CMsgClientToGCCreateStaticRecipeResponse_OutputItem = new CMsgClientToGCCreateStaticRecipeResponse_OutputItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipeResponse_InputError$Type extends MessageType<CMsgClientToGCCreateStaticRecipeResponse_InputError> {
    constructor() {
        super("CMsgClientToGCCreateStaticRecipeResponse.InputError", [
            { no: 1, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "error", kind: "enum", opt: true, T: () => ["CMsgClientToGCCreateStaticRecipeResponse.EResponse", CMsgClientToGCCreateStaticRecipeResponse_EResponse] }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipeResponse_InputError>): CMsgClientToGCCreateStaticRecipeResponse_InputError {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCCreateStaticRecipeResponse_InputError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCCreateStaticRecipeResponse_InputError): CMsgClientToGCCreateStaticRecipeResponse_InputError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 slot_id */ 1:
                    message.slotId = reader.uint32();
                    break;
                case /* optional CMsgClientToGCCreateStaticRecipeResponse.EResponse error */ 2:
                    message.error = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCCreateStaticRecipeResponse_InputError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 slot_id = 1; */
        if (message.slotId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.slotId);
        /* optional CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2; */
        if (message.error !== undefined)
            writer.tag(2, WireType.Varint).int32(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipeResponse.InputError
 */
export const CMsgClientToGCCreateStaticRecipeResponse_InputError = new CMsgClientToGCCreateStaticRecipeResponse_InputError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput$Type extends MessageType<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput> {
    constructor() {
        super("CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput", [
            { no: 1, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "value", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput>): CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput): CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 slot_id */ 1:
                    message.slotId = reader.uint32();
                    break;
                case /* optional uint64 value */ 2:
                    message.value = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 slot_id = 1; */
        if (message.slotId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.slotId);
        /* optional uint64 value = 2; */
        if (message.value !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput
 */
export const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput = new CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgProcessTransactionOrder$Type extends MessageType<CMsgProcessTransactionOrder> {
    constructor() {
        super("CMsgProcessTransactionOrder", [
            { no: 1, name: "txn_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "steam_txn_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "partner_txn_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "steam_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "time_stamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "watermark", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "purchase_report_status", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "currency", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgProcessTransactionOrder_Item }
        ]);
    }
    create(value?: PartialMessage<CMsgProcessTransactionOrder>): CMsgProcessTransactionOrder {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgProcessTransactionOrder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgProcessTransactionOrder): CMsgProcessTransactionOrder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 txn_id */ 1:
                    message.txnId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 steam_txn_id */ 2:
                    message.steamTxnId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 partner_txn_id */ 3:
                    message.partnerTxnId = reader.uint64().toBigInt();
                    break;
                case /* optional fixed64 steam_id */ 4:
                    message.steamId = reader.fixed64().toBigInt();
                    break;
                case /* optional uint32 time_stamp */ 5:
                    message.timeStamp = reader.uint32();
                    break;
                case /* optional uint64 watermark */ 6:
                    message.watermark = reader.uint64().toBigInt();
                    break;
                case /* optional int32 purchase_report_status */ 7:
                    message.purchaseReportStatus = reader.int32();
                    break;
                case /* optional uint32 currency */ 8:
                    message.currency = reader.uint32();
                    break;
                case /* repeated CMsgProcessTransactionOrder.Item items */ 9:
                    message.items.push(CMsgProcessTransactionOrder_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgProcessTransactionOrder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 txn_id = 1; */
        if (message.txnId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.txnId);
        /* optional uint64 steam_txn_id = 2; */
        if (message.steamTxnId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.steamTxnId);
        /* optional uint64 partner_txn_id = 3; */
        if (message.partnerTxnId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.partnerTxnId);
        /* optional fixed64 steam_id = 4; */
        if (message.steamId !== undefined)
            writer.tag(4, WireType.Bit64).fixed64(message.steamId);
        /* optional uint32 time_stamp = 5; */
        if (message.timeStamp !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.timeStamp);
        /* optional uint64 watermark = 6; */
        if (message.watermark !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.watermark);
        /* optional int32 purchase_report_status = 7; */
        if (message.purchaseReportStatus !== undefined)
            writer.tag(7, WireType.Varint).int32(message.purchaseReportStatus);
        /* optional uint32 currency = 8; */
        if (message.currency !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.currency);
        /* repeated CMsgProcessTransactionOrder.Item items = 9; */
        for (let i = 0; i < message.items.length; i++)
            CMsgProcessTransactionOrder_Item.internalBinaryWrite(message.items[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgProcessTransactionOrder
 */
export const CMsgProcessTransactionOrder = new CMsgProcessTransactionOrder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgProcessTransactionOrder_Item$Type extends MessageType<CMsgProcessTransactionOrder_Item> {
    constructor() {
        super("CMsgProcessTransactionOrder.Item", [
            { no: 1, name: "item_def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_price", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "quantity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "category_desc", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "store_purchase_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "source_reference_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "parent_stack_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "default_price", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "is_user_facing", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "price_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgProcessTransactionOrder_Item>): CMsgProcessTransactionOrder_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgProcessTransactionOrder_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgProcessTransactionOrder_Item): CMsgProcessTransactionOrder_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def_index */ 1:
                    message.itemDefIndex = reader.uint32();
                    break;
                case /* optional uint32 item_price */ 2:
                    message.itemPrice = reader.uint32();
                    break;
                case /* optional uint32 quantity */ 3:
                    message.quantity = reader.uint32();
                    break;
                case /* optional string category_desc */ 4:
                    message.categoryDesc = reader.string();
                    break;
                case /* optional uint32 store_purchase_type */ 5:
                    message.storePurchaseType = reader.uint32();
                    break;
                case /* optional uint64 source_reference_id */ 6:
                    message.sourceReferenceId = reader.uint64().toBigInt();
                    break;
                case /* optional int32 parent_stack_index */ 7:
                    message.parentStackIndex = reader.int32();
                    break;
                case /* optional bool default_price */ 8:
                    message.defaultPrice = reader.bool();
                    break;
                case /* optional bool is_user_facing */ 9:
                    message.isUserFacing = reader.bool();
                    break;
                case /* optional int32 price_index */ 11:
                    message.priceIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgProcessTransactionOrder_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def_index = 1; */
        if (message.itemDefIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDefIndex);
        /* optional uint32 item_price = 2; */
        if (message.itemPrice !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.itemPrice);
        /* optional uint32 quantity = 3; */
        if (message.quantity !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.quantity);
        /* optional string category_desc = 4; */
        if (message.categoryDesc !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.categoryDesc);
        /* optional uint32 store_purchase_type = 5; */
        if (message.storePurchaseType !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.storePurchaseType);
        /* optional uint64 source_reference_id = 6; */
        if (message.sourceReferenceId !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.sourceReferenceId);
        /* optional int32 parent_stack_index = 7; */
        if (message.parentStackIndex !== undefined)
            writer.tag(7, WireType.Varint).int32(message.parentStackIndex);
        /* optional bool default_price = 8; */
        if (message.defaultPrice !== undefined)
            writer.tag(8, WireType.Varint).bool(message.defaultPrice);
        /* optional bool is_user_facing = 9; */
        if (message.isUserFacing !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isUserFacing);
        /* optional int32 price_index = 11; */
        if (message.priceIndex !== undefined)
            writer.tag(11, WireType.Varint).int32(message.priceIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgProcessTransactionOrder.Item
 */
export const CMsgProcessTransactionOrder_Item = new CMsgProcessTransactionOrder_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCStoreProcessCDKeyTransaction$Type extends MessageType<CMsgGCToGCStoreProcessCDKeyTransaction> {
    constructor() {
        super("CMsgGCToGCStoreProcessCDKeyTransaction", [
            { no: 1, name: "order", kind: "message", T: () => CMsgProcessTransactionOrder },
            { no: 2, name: "reason_code", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "partner", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCStoreProcessCDKeyTransaction>): CMsgGCToGCStoreProcessCDKeyTransaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCStoreProcessCDKeyTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCStoreProcessCDKeyTransaction): CMsgGCToGCStoreProcessCDKeyTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgProcessTransactionOrder order */ 1:
                    message.order = CMsgProcessTransactionOrder.internalBinaryRead(reader, reader.uint32(), options, message.order);
                    break;
                case /* optional uint32 reason_code */ 2:
                    message.reasonCode = reader.uint32();
                    break;
                case /* optional uint32 partner */ 3:
                    message.partner = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCStoreProcessCDKeyTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgProcessTransactionOrder order = 1; */
        if (message.order)
            CMsgProcessTransactionOrder.internalBinaryWrite(message.order, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 reason_code = 2; */
        if (message.reasonCode !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.reasonCode);
        /* optional uint32 partner = 3; */
        if (message.partner !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.partner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCStoreProcessCDKeyTransaction
 */
export const CMsgGCToGCStoreProcessCDKeyTransaction = new CMsgGCToGCStoreProcessCDKeyTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCStoreProcessCDKeyTransactionResponse$Type extends MessageType<CMsgGCToGCStoreProcessCDKeyTransactionResponse> {
    constructor() {
        super("CMsgGCToGCStoreProcessCDKeyTransactionResponse", [
            { no: 1, name: "success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCStoreProcessCDKeyTransactionResponse>): CMsgGCToGCStoreProcessCDKeyTransactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCStoreProcessCDKeyTransactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCStoreProcessCDKeyTransactionResponse): CMsgGCToGCStoreProcessCDKeyTransactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCStoreProcessCDKeyTransactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool success = 1; */
        if (message.success !== undefined)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCStoreProcessCDKeyTransactionResponse
 */
export const CMsgGCToGCStoreProcessCDKeyTransactionResponse = new CMsgGCToGCStoreProcessCDKeyTransactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCStoreProcessSettlement$Type extends MessageType<CMsgGCToGCStoreProcessSettlement> {
    constructor() {
        super("CMsgGCToGCStoreProcessSettlement", [
            { no: 1, name: "order", kind: "message", T: () => CMsgProcessTransactionOrder }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCStoreProcessSettlement>): CMsgGCToGCStoreProcessSettlement {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCStoreProcessSettlement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCStoreProcessSettlement): CMsgGCToGCStoreProcessSettlement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgProcessTransactionOrder order */ 1:
                    message.order = CMsgProcessTransactionOrder.internalBinaryRead(reader, reader.uint32(), options, message.order);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCStoreProcessSettlement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgProcessTransactionOrder order = 1; */
        if (message.order)
            CMsgProcessTransactionOrder.internalBinaryWrite(message.order, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCStoreProcessSettlement
 */
export const CMsgGCToGCStoreProcessSettlement = new CMsgGCToGCStoreProcessSettlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCStoreProcessSettlementResponse$Type extends MessageType<CMsgGCToGCStoreProcessSettlementResponse> {
    constructor() {
        super("CMsgGCToGCStoreProcessSettlementResponse", [
            { no: 1, name: "success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCStoreProcessSettlementResponse>): CMsgGCToGCStoreProcessSettlementResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCStoreProcessSettlementResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCStoreProcessSettlementResponse): CMsgGCToGCStoreProcessSettlementResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCStoreProcessSettlementResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool success = 1; */
        if (message.success !== undefined)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCStoreProcessSettlementResponse
 */
export const CMsgGCToGCStoreProcessSettlementResponse = new CMsgGCToGCStoreProcessSettlementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCBroadcastConsoleCommand$Type extends MessageType<CMsgGCToGCBroadcastConsoleCommand> {
    constructor() {
        super("CMsgGCToGCBroadcastConsoleCommand", [
            { no: 1, name: "con_command", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "report_output", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "sending_gc", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "output_initiator", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sender_source", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCBroadcastConsoleCommand>): CMsgGCToGCBroadcastConsoleCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCBroadcastConsoleCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCBroadcastConsoleCommand): CMsgGCToGCBroadcastConsoleCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string con_command */ 1:
                    message.conCommand = reader.string();
                    break;
                case /* optional bool report_output */ 2:
                    message.reportOutput = reader.bool();
                    break;
                case /* optional int32 sending_gc */ 3:
                    message.sendingGc = reader.int32();
                    break;
                case /* optional string output_initiator */ 4:
                    message.outputInitiator = reader.string();
                    break;
                case /* optional string sender_source */ 5:
                    message.senderSource = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCBroadcastConsoleCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string con_command = 1; */
        if (message.conCommand !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.conCommand);
        /* optional bool report_output = 2; */
        if (message.reportOutput !== undefined)
            writer.tag(2, WireType.Varint).bool(message.reportOutput);
        /* optional int32 sending_gc = 3; */
        if (message.sendingGc !== undefined)
            writer.tag(3, WireType.Varint).int32(message.sendingGc);
        /* optional string output_initiator = 4; */
        if (message.outputInitiator !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.outputInitiator);
        /* optional string sender_source = 5; */
        if (message.senderSource !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.senderSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCBroadcastConsoleCommand
 */
export const CMsgGCToGCBroadcastConsoleCommand = new CMsgGCToGCBroadcastConsoleCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCConsoleOutput$Type extends MessageType<CMsgGCToGCConsoleOutput> {
    constructor() {
        super("CMsgGCToGCConsoleOutput", [
            { no: 1, name: "initiator", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sending_gc", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "msgs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCToGCConsoleOutput_OutputLine },
            { no: 4, name: "is_last_for_source_job", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCConsoleOutput>): CMsgGCToGCConsoleOutput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgs = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCConsoleOutput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCConsoleOutput): CMsgGCToGCConsoleOutput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string initiator */ 1:
                    message.initiator = reader.string();
                    break;
                case /* optional int32 sending_gc */ 2:
                    message.sendingGc = reader.int32();
                    break;
                case /* repeated CMsgGCToGCConsoleOutput.OutputLine msgs */ 3:
                    message.msgs.push(CMsgGCToGCConsoleOutput_OutputLine.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_last_for_source_job */ 4:
                    message.isLastForSourceJob = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCConsoleOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string initiator = 1; */
        if (message.initiator !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.initiator);
        /* optional int32 sending_gc = 2; */
        if (message.sendingGc !== undefined)
            writer.tag(2, WireType.Varint).int32(message.sendingGc);
        /* repeated CMsgGCToGCConsoleOutput.OutputLine msgs = 3; */
        for (let i = 0; i < message.msgs.length; i++)
            CMsgGCToGCConsoleOutput_OutputLine.internalBinaryWrite(message.msgs[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_last_for_source_job = 4; */
        if (message.isLastForSourceJob !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isLastForSourceJob);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCConsoleOutput
 */
export const CMsgGCToGCConsoleOutput = new CMsgGCToGCConsoleOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCConsoleOutput_OutputLine$Type extends MessageType<CMsgGCToGCConsoleOutput_OutputLine> {
    constructor() {
        super("CMsgGCToGCConsoleOutput.OutputLine", [
            { no: 1, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "spew_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCConsoleOutput_OutputLine>): CMsgGCToGCConsoleOutput_OutputLine {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCConsoleOutput_OutputLine>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCConsoleOutput_OutputLine): CMsgGCToGCConsoleOutput_OutputLine {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string text */ 1:
                    message.text = reader.string();
                    break;
                case /* optional uint32 spew_level */ 2:
                    message.spewLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCConsoleOutput_OutputLine, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string text = 1; */
        if (message.text !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* optional uint32 spew_level = 2; */
        if (message.spewLevel !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.spewLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCConsoleOutput.OutputLine
 */
export const CMsgGCToGCConsoleOutput_OutputLine = new CMsgGCToGCConsoleOutput_OutputLine$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgItemAges$Type extends MessageType<CMsgItemAges> {
    constructor() {
        super("CMsgItemAges", [
            { no: 1, name: "max_item_id_timestamps", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgItemAges_MaxItemIDTimestamp }
        ]);
    }
    create(value?: PartialMessage<CMsgItemAges>): CMsgItemAges {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.maxItemIdTimestamps = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgItemAges>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgItemAges): CMsgItemAges {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps */ 1:
                    message.maxItemIdTimestamps.push(CMsgItemAges_MaxItemIDTimestamp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgItemAges, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1; */
        for (let i = 0; i < message.maxItemIdTimestamps.length; i++)
            CMsgItemAges_MaxItemIDTimestamp.internalBinaryWrite(message.maxItemIdTimestamps[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgItemAges
 */
export const CMsgItemAges = new CMsgItemAges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgItemAges_MaxItemIDTimestamp$Type extends MessageType<CMsgItemAges_MaxItemIDTimestamp> {
    constructor() {
        super("CMsgItemAges.MaxItemIDTimestamp", [
            { no: 1, name: "timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "max_item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgItemAges_MaxItemIDTimestamp>): CMsgItemAges_MaxItemIDTimestamp {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgItemAges_MaxItemIDTimestamp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgItemAges_MaxItemIDTimestamp): CMsgItemAges_MaxItemIDTimestamp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 timestamp */ 1:
                    message.timestamp = reader.uint32();
                    break;
                case /* optional uint64 max_item_id */ 2:
                    message.maxItemId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgItemAges_MaxItemIDTimestamp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 timestamp = 1; */
        if (message.timestamp !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.timestamp);
        /* optional uint64 max_item_id = 2; */
        if (message.maxItemId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.maxItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgItemAges.MaxItemIDTimestamp
 */
export const CMsgItemAges_MaxItemIDTimestamp = new CMsgItemAges_MaxItemIDTimestamp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCInternalTestMsg$Type extends MessageType<CMsgGCToGCInternalTestMsg> {
    constructor() {
        super("CMsgGCToGCInternalTestMsg", [
            { no: 1, name: "sending_gc", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "sender_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "context", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "message_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "message_body", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "job_id_source", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "job_id_target", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCInternalTestMsg>): CMsgGCToGCInternalTestMsg {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCInternalTestMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCInternalTestMsg): CMsgGCToGCInternalTestMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 sending_gc */ 1:
                    message.sendingGc = reader.int32();
                    break;
                case /* optional fixed64 sender_id */ 2:
                    message.senderId = reader.fixed64().toBigInt();
                    break;
                case /* optional uint32 context */ 3:
                    message.context = reader.uint32();
                    break;
                case /* optional uint32 message_id */ 4:
                    message.messageId = reader.uint32();
                    break;
                case /* optional bytes message_body */ 5:
                    message.messageBody = reader.bytes();
                    break;
                case /* optional fixed64 job_id_source */ 6:
                    message.jobIdSource = reader.fixed64().toBigInt();
                    break;
                case /* optional fixed64 job_id_target */ 7:
                    message.jobIdTarget = reader.fixed64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCInternalTestMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 sending_gc = 1; */
        if (message.sendingGc !== undefined)
            writer.tag(1, WireType.Varint).int32(message.sendingGc);
        /* optional fixed64 sender_id = 2; */
        if (message.senderId !== undefined)
            writer.tag(2, WireType.Bit64).fixed64(message.senderId);
        /* optional uint32 context = 3; */
        if (message.context !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.context);
        /* optional uint32 message_id = 4; */
        if (message.messageId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.messageId);
        /* optional bytes message_body = 5; */
        if (message.messageBody !== undefined)
            writer.tag(5, WireType.LengthDelimited).bytes(message.messageBody);
        /* optional fixed64 job_id_source = 6; */
        if (message.jobIdSource !== undefined)
            writer.tag(6, WireType.Bit64).fixed64(message.jobIdSource);
        /* optional fixed64 job_id_target = 7; */
        if (message.jobIdTarget !== undefined)
            writer.tag(7, WireType.Bit64).fixed64(message.jobIdTarget);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCInternalTestMsg
 */
export const CMsgGCToGCInternalTestMsg = new CMsgGCToGCInternalTestMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCClientServerVersionsUpdated$Type extends MessageType<CMsgGCToGCClientServerVersionsUpdated> {
    constructor() {
        super("CMsgGCToGCClientServerVersionsUpdated", [
            { no: 1, name: "client_min_allowed_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "client_active_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "server_active_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "server_deployed_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "what_changed", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCClientServerVersionsUpdated>): CMsgGCToGCClientServerVersionsUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCClientServerVersionsUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCClientServerVersionsUpdated): CMsgGCToGCClientServerVersionsUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 client_min_allowed_version */ 1:
                    message.clientMinAllowedVersion = reader.uint32();
                    break;
                case /* optional uint32 client_active_version */ 2:
                    message.clientActiveVersion = reader.uint32();
                    break;
                case /* optional uint32 server_active_version */ 3:
                    message.serverActiveVersion = reader.uint32();
                    break;
                case /* optional uint32 server_deployed_version */ 4:
                    message.serverDeployedVersion = reader.uint32();
                    break;
                case /* optional uint32 what_changed */ 5:
                    message.whatChanged = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCClientServerVersionsUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 client_min_allowed_version = 1; */
        if (message.clientMinAllowedVersion !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.clientMinAllowedVersion);
        /* optional uint32 client_active_version = 2; */
        if (message.clientActiveVersion !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.clientActiveVersion);
        /* optional uint32 server_active_version = 3; */
        if (message.serverActiveVersion !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.serverActiveVersion);
        /* optional uint32 server_deployed_version = 4; */
        if (message.serverDeployedVersion !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.serverDeployedVersion);
        /* optional uint32 what_changed = 5; */
        if (message.whatChanged !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.whatChanged);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCClientServerVersionsUpdated
 */
export const CMsgGCToGCClientServerVersionsUpdated = new CMsgGCToGCClientServerVersionsUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCBroadcastMessageFromSub$Type extends MessageType<CMsgGCToGCBroadcastMessageFromSub> {
    constructor() {
        super("CMsgGCToGCBroadcastMessageFromSub", [
            { no: 1, name: "msg_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "serialized_msg", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "account_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "steam_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCBroadcastMessageFromSub>): CMsgGCToGCBroadcastMessageFromSub {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountIdList = [];
        message.steamIdList = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCBroadcastMessageFromSub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCBroadcastMessageFromSub): CMsgGCToGCBroadcastMessageFromSub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 msg_id */ 1:
                    message.msgId = reader.uint32();
                    break;
                case /* optional bytes serialized_msg */ 2:
                    message.serializedMsg = reader.bytes();
                    break;
                case /* repeated uint32 account_id_list = 3 [packed = true];*/ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.accountIdList.push(reader.uint32());
                    else
                        message.accountIdList.push(reader.uint32());
                    break;
                case /* repeated fixed64 steam_id_list = 4 [packed = true];*/ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.steamIdList.push(reader.fixed64().toBigInt());
                    else
                        message.steamIdList.push(reader.fixed64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCBroadcastMessageFromSub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 msg_id = 1; */
        if (message.msgId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.msgId);
        /* optional bytes serialized_msg = 2; */
        if (message.serializedMsg !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.serializedMsg);
        /* repeated uint32 account_id_list = 3 [packed = true]; */
        if (message.accountIdList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.accountIdList.length; i++)
                writer.uint32(message.accountIdList[i]);
            writer.join();
        }
        /* repeated fixed64 steam_id_list = 4 [packed = true]; */
        if (message.steamIdList.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.steamIdList.length; i++)
                writer.fixed64(message.steamIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCBroadcastMessageFromSub
 */
export const CMsgGCToGCBroadcastMessageFromSub = new CMsgGCToGCBroadcastMessageFromSub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientCurrencyPricePoints$Type extends MessageType<CMsgGCToClientCurrencyPricePoints> {
    constructor() {
        super("CMsgGCToClientCurrencyPricePoints", [
            { no: 1, name: "price_key", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "currencies", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCToClientCurrencyPricePoints_Currency }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToClientCurrencyPricePoints>): CMsgGCToClientCurrencyPricePoints {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.priceKey = [];
        message.currencies = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToClientCurrencyPricePoints>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToClientCurrencyPricePoints): CMsgGCToClientCurrencyPricePoints {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 price_key = 1 [packed = true];*/ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.priceKey.push(reader.uint64().toBigInt());
                    else
                        message.priceKey.push(reader.uint64().toBigInt());
                    break;
                case /* repeated CMsgGCToClientCurrencyPricePoints.Currency currencies */ 2:
                    message.currencies.push(CMsgGCToClientCurrencyPricePoints_Currency.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToClientCurrencyPricePoints, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 price_key = 1 [packed = true]; */
        if (message.priceKey.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.priceKey.length; i++)
                writer.uint64(message.priceKey[i]);
            writer.join();
        }
        /* repeated CMsgGCToClientCurrencyPricePoints.Currency currencies = 2; */
        for (let i = 0; i < message.currencies.length; i++)
            CMsgGCToClientCurrencyPricePoints_Currency.internalBinaryWrite(message.currencies[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientCurrencyPricePoints
 */
export const CMsgGCToClientCurrencyPricePoints = new CMsgGCToClientCurrencyPricePoints$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientCurrencyPricePoints_Currency$Type extends MessageType<CMsgGCToClientCurrencyPricePoints_Currency> {
    constructor() {
        super("CMsgGCToClientCurrencyPricePoints.Currency", [
            { no: 1, name: "currency_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "currency_price", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToClientCurrencyPricePoints_Currency>): CMsgGCToClientCurrencyPricePoints_Currency {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currencyPrice = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToClientCurrencyPricePoints_Currency>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToClientCurrencyPricePoints_Currency): CMsgGCToClientCurrencyPricePoints_Currency {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 currency_id */ 1:
                    message.currencyId = reader.uint32();
                    break;
                case /* repeated uint64 currency_price = 2 [packed = true];*/ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.currencyPrice.push(reader.uint64().toBigInt());
                    else
                        message.currencyPrice.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToClientCurrencyPricePoints_Currency, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 currency_id = 1; */
        if (message.currencyId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.currencyId);
        /* repeated uint64 currency_price = 2 [packed = true]; */
        if (message.currencyPrice.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.currencyPrice.length; i++)
                writer.uint64(message.currencyPrice[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientCurrencyPricePoints.Currency
 */
export const CMsgGCToClientCurrencyPricePoints_Currency = new CMsgGCToClientCurrencyPricePoints_Currency$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgBannedWordList$Type extends MessageType<CMsgBannedWordList> {
    constructor() {
        super("CMsgBannedWordList", [
            { no: 1, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "banned_words", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgBannedWordList>): CMsgBannedWordList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bannedWords = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgBannedWordList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgBannedWordList): CMsgBannedWordList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 version */ 1:
                    message.version = reader.uint32();
                    break;
                case /* repeated string banned_words */ 2:
                    message.bannedWords.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgBannedWordList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 version = 1; */
        if (message.version !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.version);
        /* repeated string banned_words = 2; */
        for (let i = 0; i < message.bannedWords.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.bannedWords[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgBannedWordList
 */
export const CMsgBannedWordList = new CMsgBannedWordList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCFlushSteamInventoryCache$Type extends MessageType<CMsgGCToGCFlushSteamInventoryCache> {
    constructor() {
        super("CMsgGCToGCFlushSteamInventoryCache", [
            { no: 1, name: "keys", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCToGCFlushSteamInventoryCache_Key }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCFlushSteamInventoryCache>): CMsgGCToGCFlushSteamInventoryCache {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keys = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCFlushSteamInventoryCache>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCFlushSteamInventoryCache): CMsgGCToGCFlushSteamInventoryCache {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgGCToGCFlushSteamInventoryCache.Key keys */ 1:
                    message.keys.push(CMsgGCToGCFlushSteamInventoryCache_Key.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCFlushSteamInventoryCache, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgGCToGCFlushSteamInventoryCache.Key keys = 1; */
        for (let i = 0; i < message.keys.length; i++)
            CMsgGCToGCFlushSteamInventoryCache_Key.internalBinaryWrite(message.keys[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCFlushSteamInventoryCache
 */
export const CMsgGCToGCFlushSteamInventoryCache = new CMsgGCToGCFlushSteamInventoryCache$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCFlushSteamInventoryCache_Key$Type extends MessageType<CMsgGCToGCFlushSteamInventoryCache_Key> {
    constructor() {
        super("CMsgGCToGCFlushSteamInventoryCache.Key", [
            { no: 1, name: "steamid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "contextid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCFlushSteamInventoryCache_Key>): CMsgGCToGCFlushSteamInventoryCache_Key {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCFlushSteamInventoryCache_Key>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCFlushSteamInventoryCache_Key): CMsgGCToGCFlushSteamInventoryCache_Key {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 steamid */ 1:
                    message.steamid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 contextid */ 2:
                    message.contextid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCFlushSteamInventoryCache_Key, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 steamid = 1; */
        if (message.steamid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.steamid);
        /* optional uint64 contextid = 2; */
        if (message.contextid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.contextid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCFlushSteamInventoryCache.Key
 */
export const CMsgGCToGCFlushSteamInventoryCache_Key = new CMsgGCToGCFlushSteamInventoryCache_Key$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCUpdateSubscriptionItems$Type extends MessageType<CMsgGCToGCUpdateSubscriptionItems> {
    constructor() {
        super("CMsgGCToGCUpdateSubscriptionItems", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "always_notify", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCUpdateSubscriptionItems>): CMsgGCToGCUpdateSubscriptionItems {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCUpdateSubscriptionItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCUpdateSubscriptionItems): CMsgGCToGCUpdateSubscriptionItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional bool always_notify */ 2:
                    message.alwaysNotify = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCUpdateSubscriptionItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional bool always_notify = 2; */
        if (message.alwaysNotify !== undefined)
            writer.tag(2, WireType.Varint).bool(message.alwaysNotify);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCUpdateSubscriptionItems
 */
export const CMsgGCToGCUpdateSubscriptionItems = new CMsgGCToGCUpdateSubscriptionItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCSelfPing$Type extends MessageType<CMsgGCToGCSelfPing> {
    constructor() {
        super("CMsgGCToGCSelfPing", [
            { no: 1, name: "sample_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCSelfPing>): CMsgGCToGCSelfPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCSelfPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCSelfPing): CMsgGCToGCSelfPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 sample_id */ 1:
                    message.sampleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCSelfPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 sample_id = 1; */
        if (message.sampleId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.sampleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCSelfPing
 */
export const CMsgGCToGCSelfPing = new CMsgGCToGCSelfPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetInfuxIntervalStats$Type extends MessageType<CMsgGCToGCGetInfuxIntervalStats> {
    constructor() {
        super("CMsgGCToGCGetInfuxIntervalStats", []);
    }
    create(value?: PartialMessage<CMsgGCToGCGetInfuxIntervalStats>): CMsgGCToGCGetInfuxIntervalStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGetInfuxIntervalStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGetInfuxIntervalStats): CMsgGCToGCGetInfuxIntervalStats {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgGCToGCGetInfuxIntervalStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetInfuxIntervalStats
 */
export const CMsgGCToGCGetInfuxIntervalStats = new CMsgGCToGCGetInfuxIntervalStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetInfuxIntervalStatsResponse$Type extends MessageType<CMsgGCToGCGetInfuxIntervalStatsResponse> {
    constructor() {
        super("CMsgGCToGCGetInfuxIntervalStatsResponse", [
            { no: 1, name: "stat_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 2, name: "stat_total", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "stat_samples", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "stat_max", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "sample_duration_ms", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCGetInfuxIntervalStatsResponse>): CMsgGCToGCGetInfuxIntervalStatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statIds = [];
        message.statTotal = [];
        message.statSamples = [];
        message.statMax = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCGetInfuxIntervalStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCGetInfuxIntervalStatsResponse): CMsgGCToGCGetInfuxIntervalStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated fixed32 stat_ids = 1 [packed = true];*/ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statIds.push(reader.fixed32());
                    else
                        message.statIds.push(reader.fixed32());
                    break;
                case /* repeated uint64 stat_total = 2 [packed = true];*/ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statTotal.push(reader.uint64().toBigInt());
                    else
                        message.statTotal.push(reader.uint64().toBigInt());
                    break;
                case /* repeated uint32 stat_samples = 3 [packed = true];*/ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statSamples.push(reader.uint32());
                    else
                        message.statSamples.push(reader.uint32());
                    break;
                case /* repeated uint32 stat_max = 4 [packed = true];*/ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statMax.push(reader.uint32());
                    else
                        message.statMax.push(reader.uint32());
                    break;
                case /* optional uint32 sample_duration_ms */ 5:
                    message.sampleDurationMs = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCGetInfuxIntervalStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated fixed32 stat_ids = 1 [packed = true]; */
        if (message.statIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statIds.length; i++)
                writer.fixed32(message.statIds[i]);
            writer.join();
        }
        /* repeated uint64 stat_total = 2 [packed = true]; */
        if (message.statTotal.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statTotal.length; i++)
                writer.uint64(message.statTotal[i]);
            writer.join();
        }
        /* repeated uint32 stat_samples = 3 [packed = true]; */
        if (message.statSamples.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statSamples.length; i++)
                writer.uint32(message.statSamples[i]);
            writer.join();
        }
        /* repeated uint32 stat_max = 4 [packed = true]; */
        if (message.statMax.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statMax.length; i++)
                writer.uint32(message.statMax[i]);
            writer.join();
        }
        /* optional uint32 sample_duration_ms = 5; */
        if (message.sampleDurationMs !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sampleDurationMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetInfuxIntervalStatsResponse
 */
export const CMsgGCToGCGetInfuxIntervalStatsResponse = new CMsgGCToGCGetInfuxIntervalStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCPurchaseSucceeded$Type extends MessageType<CMsgGCToGCPurchaseSucceeded> {
    constructor() {
        super("CMsgGCToGCPurchaseSucceeded", []);
    }
    create(value?: PartialMessage<CMsgGCToGCPurchaseSucceeded>): CMsgGCToGCPurchaseSucceeded {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCPurchaseSucceeded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCPurchaseSucceeded): CMsgGCToGCPurchaseSucceeded {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgGCToGCPurchaseSucceeded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCPurchaseSucceeded
 */
export const CMsgGCToGCPurchaseSucceeded = new CMsgGCToGCPurchaseSucceeded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetLimitedItemPurchaseQuantity$Type extends MessageType<CMsgClientToGCGetLimitedItemPurchaseQuantity> {
    constructor() {
        super("CMsgClientToGCGetLimitedItemPurchaseQuantity", [
            { no: 1, name: "item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCGetLimitedItemPurchaseQuantity>): CMsgClientToGCGetLimitedItemPurchaseQuantity {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCGetLimitedItemPurchaseQuantity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCGetLimitedItemPurchaseQuantity): CMsgClientToGCGetLimitedItemPurchaseQuantity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def */ 1:
                    message.itemDef = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCGetLimitedItemPurchaseQuantity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def = 1; */
        if (message.itemDef !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDef);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetLimitedItemPurchaseQuantity
 */
export const CMsgClientToGCGetLimitedItemPurchaseQuantity = new CMsgClientToGCGetLimitedItemPurchaseQuantity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetLimitedItemPurchaseQuantityResponse$Type extends MessageType<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse> {
    constructor() {
        super("CMsgClientToGCGetLimitedItemPurchaseQuantityResponse", [
            { no: 1, name: "result", kind: "enum", opt: true, T: () => ["CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse", CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse] },
            { no: 2, name: "quantity_purchased", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse>): CMsgClientToGCGetLimitedItemPurchaseQuantityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCGetLimitedItemPurchaseQuantityResponse): CMsgClientToGCGetLimitedItemPurchaseQuantityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result */ 1:
                    message.result = reader.int32();
                    break;
                case /* optional uint32 quantity_purchased */ 2:
                    message.quantityPurchased = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1; */
        if (message.result !== undefined)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* optional uint32 quantity_purchased = 2; */
        if (message.quantityPurchased !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.quantityPurchased);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetLimitedItemPurchaseQuantityResponse
 */
export const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse = new CMsgClientToGCGetLimitedItemPurchaseQuantityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetInFlightItemCharges$Type extends MessageType<CMsgClientToGCGetInFlightItemCharges> {
    constructor() {
        super("CMsgClientToGCGetInFlightItemCharges", [
            { no: 1, name: "item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCGetInFlightItemCharges>): CMsgClientToGCGetInFlightItemCharges {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCGetInFlightItemCharges>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCGetInFlightItemCharges): CMsgClientToGCGetInFlightItemCharges {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def */ 1:
                    message.itemDef = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCGetInFlightItemCharges, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def = 1; */
        if (message.itemDef !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDef);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetInFlightItemCharges
 */
export const CMsgClientToGCGetInFlightItemCharges = new CMsgClientToGCGetInFlightItemCharges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetInFlightItemChargesResponse$Type extends MessageType<CMsgClientToGCGetInFlightItemChargesResponse> {
    constructor() {
        super("CMsgClientToGCGetInFlightItemChargesResponse", [
            { no: 1, name: "result", kind: "enum", opt: true, T: () => ["CMsgClientToGCGetInFlightItemChargesResponse.EResponse", CMsgClientToGCGetInFlightItemChargesResponse_EResponse] },
            { no: 2, name: "charges_in_flight", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCGetInFlightItemChargesResponse>): CMsgClientToGCGetInFlightItemChargesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCGetInFlightItemChargesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCGetInFlightItemChargesResponse): CMsgClientToGCGetInFlightItemChargesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgClientToGCGetInFlightItemChargesResponse.EResponse result */ 1:
                    message.result = reader.int32();
                    break;
                case /* optional uint32 charges_in_flight */ 2:
                    message.chargesInFlight = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCGetInFlightItemChargesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgClientToGCGetInFlightItemChargesResponse.EResponse result = 1; */
        if (message.result !== undefined)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* optional uint32 charges_in_flight = 2; */
        if (message.chargesInFlight !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.chargesInFlight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetInFlightItemChargesResponse
 */
export const CMsgClientToGCGetInFlightItemChargesResponse = new CMsgClientToGCGetInFlightItemChargesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPurchaseChargeCostItems$Type extends MessageType<CMsgClientToGCPurchaseChargeCostItems> {
    constructor() {
        super("CMsgClientToGCPurchaseChargeCostItems", [
            { no: 1, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgClientToGCPurchaseChargeCostItems_Item },
            { no: 2, name: "currency", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCPurchaseChargeCostItems>): CMsgClientToGCPurchaseChargeCostItems {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCPurchaseChargeCostItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCPurchaseChargeCostItems): CMsgClientToGCPurchaseChargeCostItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgClientToGCPurchaseChargeCostItems.Item items */ 1:
                    message.items.push(CMsgClientToGCPurchaseChargeCostItems_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 currency */ 2:
                    message.currency = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCPurchaseChargeCostItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgClientToGCPurchaseChargeCostItems.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            CMsgClientToGCPurchaseChargeCostItems_Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 currency = 2; */
        if (message.currency !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPurchaseChargeCostItems
 */
export const CMsgClientToGCPurchaseChargeCostItems = new CMsgClientToGCPurchaseChargeCostItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPurchaseChargeCostItems_Item$Type extends MessageType<CMsgClientToGCPurchaseChargeCostItems_Item> {
    constructor() {
        super("CMsgClientToGCPurchaseChargeCostItems.Item", [
            { no: 1, name: "item_def_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "quantity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "source_reference_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "price_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCPurchaseChargeCostItems_Item>): CMsgClientToGCPurchaseChargeCostItems_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCPurchaseChargeCostItems_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCPurchaseChargeCostItems_Item): CMsgClientToGCPurchaseChargeCostItems_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def_index */ 1:
                    message.itemDefIndex = reader.uint32();
                    break;
                case /* optional uint32 quantity */ 2:
                    message.quantity = reader.uint32();
                    break;
                case /* optional uint64 source_reference_id */ 3:
                    message.sourceReferenceId = reader.uint64().toBigInt();
                    break;
                case /* optional int32 price_index */ 4:
                    message.priceIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCPurchaseChargeCostItems_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def_index = 1; */
        if (message.itemDefIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDefIndex);
        /* optional uint32 quantity = 2; */
        if (message.quantity !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.quantity);
        /* optional uint64 source_reference_id = 3; */
        if (message.sourceReferenceId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.sourceReferenceId);
        /* optional int32 price_index = 4; */
        if (message.priceIndex !== undefined)
            writer.tag(4, WireType.Varint).int32(message.priceIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPurchaseChargeCostItems.Item
 */
export const CMsgClientToGCPurchaseChargeCostItems_Item = new CMsgClientToGCPurchaseChargeCostItems_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPurchaseChargeCostItemsResponse$Type extends MessageType<CMsgClientToGCPurchaseChargeCostItemsResponse> {
    constructor() {
        super("CMsgClientToGCPurchaseChargeCostItemsResponse", [
            { no: 1, name: "result", kind: "enum", opt: true, T: () => ["CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse", CMsgClientToGCPurchaseChargeCostItemsResponse_EResponse] },
            { no: 2, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCPurchaseChargeCostItemsResponse>): CMsgClientToGCPurchaseChargeCostItemsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCPurchaseChargeCostItemsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCPurchaseChargeCostItemsResponse): CMsgClientToGCPurchaseChargeCostItemsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse result */ 1:
                    message.result = reader.int32();
                    break;
                case /* repeated uint64 item_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIds.push(reader.uint64().toBigInt());
                    else
                        message.itemIds.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCPurchaseChargeCostItemsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse result = 1; */
        if (message.result !== undefined)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* repeated uint64 item_ids = 2; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(2, WireType.Varint).uint64(message.itemIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPurchaseChargeCostItemsResponse
 */
export const CMsgClientToGCPurchaseChargeCostItemsResponse = new CMsgClientToGCPurchaseChargeCostItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientInFlightChargesUpdated$Type extends MessageType<CMsgGCToClientInFlightChargesUpdated> {
    constructor() {
        super("CMsgGCToClientInFlightChargesUpdated", [
            { no: 2, name: "in_flight_charges", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCToClientInFlightChargesUpdated_ItemCharges }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToClientInFlightChargesUpdated>): CMsgGCToClientInFlightChargesUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inFlightCharges = [];
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToClientInFlightChargesUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToClientInFlightChargesUpdated): CMsgGCToClientInFlightChargesUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgGCToClientInFlightChargesUpdated.ItemCharges in_flight_charges */ 2:
                    message.inFlightCharges.push(CMsgGCToClientInFlightChargesUpdated_ItemCharges.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToClientInFlightChargesUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgGCToClientInFlightChargesUpdated.ItemCharges in_flight_charges = 2; */
        for (let i = 0; i < message.inFlightCharges.length; i++)
            CMsgGCToClientInFlightChargesUpdated_ItemCharges.internalBinaryWrite(message.inFlightCharges[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientInFlightChargesUpdated
 */
export const CMsgGCToClientInFlightChargesUpdated = new CMsgGCToClientInFlightChargesUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientInFlightChargesUpdated_ItemCharges$Type extends MessageType<CMsgGCToClientInFlightChargesUpdated_ItemCharges> {
    constructor() {
        super("CMsgGCToClientInFlightChargesUpdated.ItemCharges", [
            { no: 1, name: "item_def", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "charges_in_flight", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToClientInFlightChargesUpdated_ItemCharges>): CMsgGCToClientInFlightChargesUpdated_ItemCharges {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToClientInFlightChargesUpdated_ItemCharges>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToClientInFlightChargesUpdated_ItemCharges): CMsgGCToClientInFlightChargesUpdated_ItemCharges {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_def */ 1:
                    message.itemDef = reader.uint32();
                    break;
                case /* optional uint32 charges_in_flight */ 2:
                    message.chargesInFlight = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToClientInFlightChargesUpdated_ItemCharges, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_def = 1; */
        if (message.itemDef !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemDef);
        /* optional uint32 charges_in_flight = 2; */
        if (message.chargesInFlight !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.chargesInFlight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientInFlightChargesUpdated.ItemCharges
 */
export const CMsgGCToClientInFlightChargesUpdated_ItemCharges = new CMsgGCToClientInFlightChargesUpdated_ItemCharges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCancelUnfinalizedTransactions$Type extends MessageType<CMsgClientToGCCancelUnfinalizedTransactions> {
    constructor() {
        super("CMsgClientToGCCancelUnfinalizedTransactions", [
            { no: 1, name: "unused", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCCancelUnfinalizedTransactions>): CMsgClientToGCCancelUnfinalizedTransactions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCCancelUnfinalizedTransactions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCCancelUnfinalizedTransactions): CMsgClientToGCCancelUnfinalizedTransactions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 unused */ 1:
                    message.unused = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCCancelUnfinalizedTransactions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 unused = 1; */
        if (message.unused !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.unused);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCancelUnfinalizedTransactions
 */
export const CMsgClientToGCCancelUnfinalizedTransactions = new CMsgClientToGCCancelUnfinalizedTransactions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCancelUnfinalizedTransactionsResponse$Type extends MessageType<CMsgClientToGCCancelUnfinalizedTransactionsResponse> {
    constructor() {
        super("CMsgClientToGCCancelUnfinalizedTransactionsResponse", [
            { no: 1, name: "result", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgClientToGCCancelUnfinalizedTransactionsResponse>): CMsgClientToGCCancelUnfinalizedTransactionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgClientToGCCancelUnfinalizedTransactionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgClientToGCCancelUnfinalizedTransactionsResponse): CMsgClientToGCCancelUnfinalizedTransactionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 result */ 1:
                    message.result = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgClientToGCCancelUnfinalizedTransactionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 result = 1; */
        if (message.result !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCancelUnfinalizedTransactionsResponse
 */
export const CMsgClientToGCCancelUnfinalizedTransactionsResponse = new CMsgClientToGCCancelUnfinalizedTransactionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCUpdateWelcomeMsg$Type extends MessageType<CMsgGCToGCUpdateWelcomeMsg> {
    constructor() {
        super("CMsgGCToGCUpdateWelcomeMsg", [
            { no: 1, name: "server", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "new_msg", kind: "message", T: () => CExtraMsgBlock },
            { no: 3, name: "broadcast", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToGCUpdateWelcomeMsg>): CMsgGCToGCUpdateWelcomeMsg {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToGCUpdateWelcomeMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToGCUpdateWelcomeMsg): CMsgGCToGCUpdateWelcomeMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool server */ 1:
                    message.server = reader.bool();
                    break;
                case /* optional CExtraMsgBlock new_msg */ 2:
                    message.newMsg = CExtraMsgBlock.internalBinaryRead(reader, reader.uint32(), options, message.newMsg);
                    break;
                case /* optional bool broadcast */ 3:
                    message.broadcast = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToGCUpdateWelcomeMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool server = 1; */
        if (message.server !== undefined)
            writer.tag(1, WireType.Varint).bool(message.server);
        /* optional CExtraMsgBlock new_msg = 2; */
        if (message.newMsg)
            CExtraMsgBlock.internalBinaryWrite(message.newMsg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool broadcast = 3; */
        if (message.broadcast !== undefined)
            writer.tag(3, WireType.Varint).bool(message.broadcast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCUpdateWelcomeMsg
 */
export const CMsgGCToGCUpdateWelcomeMsg = new CMsgGCToGCUpdateWelcomeMsg$Type();
