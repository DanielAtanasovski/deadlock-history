// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "citadel_gcmessages_server.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ELobbyServerState } from "./citadel_gcmessages_common";
import { ECitadelAccountStatMedal } from "./citadel_gcmessages_common";
import { ECitadelTeamObjective } from "./citadel_gcmessages_common";
import { EGCPlatform } from "./steammessages";
import { ECitadelLobbyTeam } from "./citadel_gcmessages_common";
import { ECitadelRegionMode } from "./citadel_gcmessages_common";
import { ECitadelBotDifficulty } from "./citadel_gcmessages_common";
import { CExtraMsgBlock } from "./gcsdk_gcmessages";
import { CMsgAccountBookStats } from "./citadel_gcmessages_common";
import { CMsgAccountHeroStats } from "./citadel_gcmessages_common";
import { ECitadelGameMode } from "./citadel_gcmessages_common";
import { ECitadelMatchMode } from "./citadel_gcmessages_common";
/**
 * @generated from protobuf message CMsgServerCrashSentinelFile
 */
export interface CMsgServerCrashSentinelFile {
  /**
   * @generated from protobuf field: optional uint32 version = 1;
   */
  version?: number;
  /**
   * @generated from protobuf field: optional fixed64 server_steam_id = 2;
   */
  serverSteamId?: bigint;
  /**
   * @generated from protobuf field: optional fixed32 server_public_ip_addr = 3;
   */
  serverPublicIpAddr?: number;
  /**
   * @generated from protobuf field: optional uint32 server_port = 4;
   */
  serverPort?: number;
  /**
   * @generated from protobuf field: optional uint32 server_cluster = 5;
   */
  serverCluster?: number;
  /**
   * @generated from protobuf field: optional uint32 pid = 6;
   */
  pid?: number;
  /**
   * @generated from protobuf field: optional uint32 saved_time = 7;
   */
  savedTime?: number;
  /**
   * @generated from protobuf field: optional uint32 server_version = 8;
   */
  serverVersion?: number;
  /**
   * @generated from protobuf field: optional CMsgServerCrashSentinelFile.GameInfo game_info = 9;
   */
  gameInfo?: CMsgServerCrashSentinelFile_GameInfo;
  /**
   * @generated from protobuf field: optional uint32 server_private_ip_addr = 10;
   */
  serverPrivateIpAddr?: number;
  /**
   * @generated from protobuf field: optional uint32 instance_id = 11;
   */
  instanceId?: number;
}
/**
 * @generated from protobuf message CMsgServerCrashSentinelFile.Player
 */
export interface CMsgServerCrashSentinelFile_Player {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 2;
   */
  heroId?: number;
}
/**
 * @generated from protobuf message CMsgServerCrashSentinelFile.GameInfo
 */
export interface CMsgServerCrashSentinelFile_GameInfo {
  /**
   * @generated from protobuf field: optional uint64 match_id = 1;
   */
  matchId?: bigint;
  /**
   * @generated from protobuf field: optional fixed64 lobby_id = 2;
   */
  lobbyId?: bigint;
  /**
   * @generated from protobuf field: optional uint32 server_state = 3;
   */
  serverState?: number;
  /**
   * @generated from protobuf field: repeated CMsgServerCrashSentinelFile.Player players = 5;
   */
  players: CMsgServerCrashSentinelFile_Player[];
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 6;
   */
  matchMode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 7;
   */
  gameMode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional bool was_server_shutdown = 8;
   */
  wasServerShutdown?: boolean;
}
/**
 * @generated from protobuf message CServerLobbyData_PlayerMMR
 */
export interface CServerLobbyData_PlayerMMR {
  /**
   * @generated from protobuf field: repeated CServerLobbyData_PlayerMMR.Player players = 1;
   */
  players: CServerLobbyData_PlayerMMR_Player[];
}
/**
 * @generated from protobuf message CServerLobbyData_PlayerMMR.Player
 */
export interface CServerLobbyData_PlayerMMR_Player {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional uint32 player_mmr = 2;
   */
  playerMmr?: number;
  /**
   * @generated from protobuf field: optional uint32 player_uncertainty = 3;
   */
  playerUncertainty?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_mmr = 4;
   */
  heroMmr?: number;
}
/**
 * @generated from protobuf message CServerLobbyData_PlayerInfo
 */
export interface CServerLobbyData_PlayerInfo {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: repeated CMsgAccountHeroStats account_stats = 2;
   */
  accountStats: CMsgAccountHeroStats[];
  /**
   * @generated from protobuf field: optional uint32 mmr_level = 4;
   */
  mmrLevel?: number;
  /**
   * @generated from protobuf field: repeated CMsgAccountBookStats book_info = 5;
   */
  bookInfo: CMsgAccountBookStats[];
}
/**
 * @generated from protobuf message CServerLobbyData_PostMatchSurvey
 */
export interface CServerLobbyData_PostMatchSurvey {
  /**
   * @generated from protobuf field: repeated CServerLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1;
   */
  surveys: CServerLobbyData_PostMatchSurvey_PlayerSurvey[];
}
/**
 * @generated from protobuf message CServerLobbyData_PostMatchSurvey.PlayerSurvey
 */
export interface CServerLobbyData_PostMatchSurvey_PlayerSurvey {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional uint32 question_id = 2;
   */
  questionId?: number;
}
/**
 * @generated from protobuf message CServerLobbyData_AutoTest
 */
export interface CServerLobbyData_AutoTest {
  /**
   * @generated from protobuf field: optional uint32 max_duration_s = 2;
   */
  maxDurationS?: number;
}
/**
 * @generated from protobuf message CSOCitadelServerDynamicLobby
 */
export interface CSOCitadelServerDynamicLobby {
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 1;
   */
  lobbyId?: bigint;
  /**
   * @generated from protobuf field: repeated uint32 left_account_ids = 2 [packed = true];
   */
  leftAccountIds: number[];
  /**
   * @generated from protobuf field: optional bool broadcast_active = 3;
   */
  broadcastActive?: boolean;
  /**
   * @generated from protobuf field: optional uint32 spectator_count = 4;
   */
  spectatorCount?: number;
}
/**
 * @generated from protobuf message CSOCitadelServerStaticLobby
 */
export interface CSOCitadelServerStaticLobby {
  /**
   * @generated from protobuf field: repeated CExtraMsgBlock extra_messages = 1;
   */
  extraMessages: CExtraMsgBlock[];
  /**
   * @generated from protobuf field: optional fixed64 server_steam_id = 2;
   */
  serverSteamId?: bigint;
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 3;
   */
  lobbyId?: bigint;
  /**
   * @generated from protobuf field: optional fixed32 replay_salt = 4;
   */
  replaySalt?: number;
  /**
   * @generated from protobuf field: optional string level_name = 5;
   */
  levelName?: string;
  /**
   * @generated from protobuf field: repeated CSOCitadelServerStaticLobby.Member members = 6;
   */
  members: CSOCitadelServerStaticLobby_Member[];
  /**
   * @generated from protobuf field: optional CSOCitadelServerStaticLobby.DevSettings dev_settings = 7;
   */
  devSettings?: CSOCitadelServerStaticLobby_DevSettings;
  /**
   * @generated from protobuf field: optional bool gc_provided_heroes = 8;
   */
  gcProvidedHeroes?: boolean;
  /**
   * @generated from protobuf field: optional ECitadelBotDifficulty bot_difficulty = 9;
   */
  botDifficulty?: ECitadelBotDifficulty;
  /**
   * @generated from protobuf field: optional fixed32 metadata_salt = 10;
   */
  metadataSalt?: number;
  /**
   * @generated from protobuf field: optional uint32 match_start_time = 11;
   */
  matchStartTime?: number;
  /**
   * @generated from protobuf field: optional uint32 experimental_gameplay_state = 15;
   */
  experimentalGameplayState?: number;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 16;
   */
  regionMode?: ECitadelRegionMode;
  /**
   * @generated from protobuf field: optional string broadcast_url = 17;
   */
  broadcastUrl?: string;
  /**
   * @generated from protobuf field: optional bool new_player_pool = 18;
   */
  newPlayerPool?: boolean;
  /**
   * @generated from protobuf field: optional bool low_pri_pool = 19;
   */
  lowPriPool?: boolean;
}
/**
 * @generated from protobuf message CSOCitadelServerStaticLobby.Member
 */
export interface CSOCitadelServerStaticLobby_Member {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional string persona_name = 2;
   */
  personaName?: string;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team = 3;
   */
  team?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional uint32 player_slot = 4;
   */
  playerSlot?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 5;
   */
  heroId?: number;
  /**
   * @generated from protobuf field: optional uint32 party_index = 6;
   */
  partyIndex?: number;
  /**
   * @generated from protobuf field: optional EGCPlatform platform = 7;
   */
  platform?: EGCPlatform;
  /**
   * @generated from protobuf field: repeated CSOCitadelServerStaticLobby.EAwardIDs award_ids = 8;
   */
  awardIds: CSOCitadelServerStaticLobby_EAwardIDs[];
  /**
   * @generated from protobuf field: optional bool is_comms_restricted = 9;
   */
  isCommsRestricted?: boolean;
}
/**
 * @generated from protobuf message CSOCitadelServerStaticLobby.DevSettings
 */
export interface CSOCitadelServerStaticLobby_DevSettings {
  /**
   * @generated from protobuf field: optional string console_string = 1;
   */
  consoleString?: string;
}
/**
 * @generated from protobuf enum CSOCitadelServerStaticLobby.EAwardIDs
 */
export enum CSOCitadelServerStaticLobby_EAwardIDs {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_eAward_KingPanda = 1;
   */
  k_eAward_KingPanda = 1,
}
/**
 * @generated from protobuf message CMsgServerSignoutData_ServerPerfStats
 */
export interface CMsgServerSignoutData_ServerPerfStats {
  /**
   * @generated from protobuf field: optional uint64 peak_memory_bytes = 1;
   */
  peakMemoryBytes?: bigint;
  /**
   * @generated from protobuf field: optional uint64 end_memory_bytes = 2;
   */
  endMemoryBytes?: bigint;
  /**
   * @generated from protobuf field: optional uint32 frame_time_max_micro_s = 3;
   */
  frameTimeMaxMicroS?: number;
  /**
   * @generated from protobuf field: optional uint32 frame_time_95_micro_s = 4;
   */
  frameTime95MicroS?: number;
  /**
   * @generated from protobuf field: optional uint32 frame_time_avg_micro_s = 5;
   */
  frameTimeAvgMicroS?: number;
  /**
   * @generated from protobuf field: optional uint32 frame_idle_time_95_micro_s = 6;
   */
  frameIdleTime95MicroS?: number;
  /**
   * @generated from protobuf field: optional uint32 frame_idle_time_avg_micro_s = 7;
   */
  frameIdleTimeAvgMicroS?: number;
  /**
   * @generated from protobuf field: optional uint32 frame_time_80_micro_s = 8;
   */
  frameTime80MicroS?: number;
  /**
   * @generated from protobuf field: optional uint32 frame_time_99_micro_s = 9;
   */
  frameTime99MicroS?: number;
  /**
   * @generated from protobuf field: optional CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples perf_samples = 10;
   */
  perfSamples?: CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_ServerPerfStats.FrameCounts
 */
export interface CMsgServerSignoutData_ServerPerfStats_FrameCounts {
  /**
   * @generated from protobuf field: optional uint32 num_frames = 1;
   */
  numFrames?: number;
  /**
   * @generated from protobuf field: optional uint32 longest_run = 2;
   */
  longestRun?: number;
  /**
   * @generated from protobuf field: optional uint32 num_runs = 3;
   */
  numRuns?: number;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_ServerPerfStats.PerfSample
 */
export interface CMsgServerSignoutData_ServerPerfStats_PerfSample {
  /**
   * @generated from protobuf field: optional uint32 game_time_s = 1;
   */
  gameTimeS?: number;
  /**
   * @generated from protobuf field: optional float avg_frame = 2;
   */
  avgFrame?: number;
  /**
   * @generated from protobuf field: optional float avg_idle = 3;
   */
  avgIdle?: number;
  /**
   * @generated from protobuf field: optional uint32 total_frames = 4;
   */
  totalFrames?: number;
  /**
   * @generated from protobuf field: optional CMsgServerSignoutData_ServerPerfStats.FrameCounts performant_frames = 5;
   */
  performantFrames?: CMsgServerSignoutData_ServerPerfStats_FrameCounts;
  /**
   * @generated from protobuf field: optional CMsgServerSignoutData_ServerPerfStats.FrameCounts long_frames = 6;
   */
  longFrames?: CMsgServerSignoutData_ServerPerfStats_FrameCounts;
  /**
   * @generated from protobuf field: optional CMsgServerSignoutData_ServerPerfStats.FrameCounts low_idle_frames = 7;
   */
  lowIdleFrames?: CMsgServerSignoutData_ServerPerfStats_FrameCounts;
  /**
   * @generated from protobuf field: optional uint64 memory_bytes = 8;
   */
  memoryBytes?: bigint;
  /**
   * @generated from protobuf field: optional uint64 peak_memory_bytes = 9;
   */
  peakMemoryBytes?: bigint;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples
 */
export interface CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples {
  /**
   * @generated from protobuf field: optional float long_frame_threshold = 1;
   */
  longFrameThreshold?: number;
  /**
   * @generated from protobuf field: optional float low_idle_threshold = 2;
   */
  lowIdleThreshold?: number;
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_ServerPerfStats.PerfSample samples = 3;
   */
  samples: CMsgServerSignoutData_ServerPerfStats_PerfSample[];
}
/**
 * @generated from protobuf message CMsgServerToGCUpdateMatchInfo
 */
export interface CMsgServerToGCUpdateMatchInfo {
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 1;
   */
  lobbyId?: bigint;
  /**
   * @generated from protobuf field: optional uint32 kills_team_0 = 3;
   */
  killsTeam0?: number;
  /**
   * @generated from protobuf field: optional uint32 kills_team_1 = 4;
   */
  killsTeam1?: number;
  /**
   * @generated from protobuf field: optional uint32 net_worth_team_0 = 5;
   */
  netWorthTeam0?: number;
  /**
   * @generated from protobuf field: optional uint32 net_worth_team_1 = 6;
   */
  netWorthTeam1?: number;
  /**
   * @generated from protobuf field: optional uint32 spectators = 7;
   */
  spectators?: number;
  /**
   * @generated from protobuf field: optional uint32 open_spectator_slots = 8;
   */
  openSpectatorSlots?: number;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team0 = 9;
   */
  objectivesMaskTeam0?: bigint;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team1 = 10;
   */
  objectivesMaskTeam1?: bigint;
}
/**
 * @generated from protobuf message CMsgServerToGCMatchSignoutPermission
 */
export interface CMsgServerToGCMatchSignoutPermission {
  /**
   * @generated from protobuf field: optional uint32 signout_start = 1;
   */
  signoutStart?: number;
  /**
   * @generated from protobuf field: optional uint32 permission_request = 2;
   */
  permissionRequest?: number;
  /**
   * @generated from protobuf field: optional uint64 match_id = 3;
   */
  matchId?: bigint;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 4;
   */
  matchMode?: ECitadelMatchMode;
}
/**
 * @generated from protobuf message CMsgServerToGCMatchSignoutPermissionResponse
 */
export interface CMsgServerToGCMatchSignoutPermissionResponse {
  /**
   * @generated from protobuf field: optional bool can_sign_out = 1;
   */
  canSignOut?: boolean;
  /**
   * @generated from protobuf field: optional uint32 retry_time_s = 2;
   */
  retryTimeS?: number;
  /**
   * @generated from protobuf field: repeated EGCServerSignoutData requested_data = 3;
   */
  requestedData: EGCServerSignoutData[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_Disconnections
 */
export interface CMsgServerSignoutData_Disconnections {
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection disconnections = 1;
   */
  disconnections: CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection
 */
export interface CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional uint32 disconnect_time = 2;
   */
  disconnectTime?: number;
  /**
   * @generated from protobuf field: optional uint32 connection_state = 3;
   */
  connectionState?: number;
  /**
   * @generated from protobuf field: optional uint32 reason_code = 4;
   */
  reasonCode?: number;
  /**
   * @generated from protobuf field: optional uint32 reconnect_delay = 5;
   */
  reconnectDelay?: number;
  /**
   * @generated from protobuf field: optional uint32 match_disconnect_time = 6;
   */
  matchDisconnectTime?: number;
  /**
   * @generated from protobuf field: optional uint32 match_reconnect_delay = 7;
   */
  matchReconnectDelay?: number;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_DetailedStats
 */
export interface CMsgServerSignoutData_DetailedStats {
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_DetailedStats.Player player_stats = 1;
   */
  playerStats: CMsgServerSignoutData_DetailedStats_Player[];
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_DetailedStats.Objective objectives = 2;
   */
  objectives: CMsgServerSignoutData_DetailedStats_Objective[];
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_DetailedStats.MidBoss mid_boss = 3;
   */
  midBoss: CMsgServerSignoutData_DetailedStats_MidBoss[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_DetailedStats.Position
 */
export interface CMsgServerSignoutData_DetailedStats_Position {
  /**
   * @generated from protobuf field: optional float x = 1;
   */
  x?: number;
  /**
   * @generated from protobuf field: optional float y = 2;
   */
  y?: number;
  /**
   * @generated from protobuf field: optional float z = 3;
   */
  z?: number;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_DetailedStats.TimeSample
 */
export interface CMsgServerSignoutData_DetailedStats_TimeSample {
  /**
   * @generated from protobuf field: optional uint32 match_time_s = 1;
   */
  matchTimeS?: number;
  /**
   * @generated from protobuf field: optional CMsgServerSignoutData_DetailedStats.TimeSample.Stats stats = 2;
   */
  stats?: CMsgServerSignoutData_DetailedStats_TimeSample_Stats;
  /**
   * @generated from protobuf field: optional CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats gold_stats = 4;
   */
  goldStats?: CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_DetailedStats.TimeSample.Stats
 */
export interface CMsgServerSignoutData_DetailedStats_TimeSample_Stats {
  /**
   * @generated from protobuf field: optional uint32 net_worth = 1;
   */
  netWorth?: number;
  /**
   * @generated from protobuf field: optional uint32 kills = 2;
   */
  kills?: number;
  /**
   * @generated from protobuf field: optional uint32 deaths = 3;
   */
  deaths?: number;
  /**
   * @generated from protobuf field: optional uint32 assists = 4;
   */
  assists?: number;
  /**
   * @generated from protobuf field: optional uint32 possible_creeps = 5;
   */
  possibleCreeps?: number;
  /**
   * @generated from protobuf field: optional uint32 creep_kills = 6;
   */
  creepKills?: number;
  /**
   * @generated from protobuf field: optional uint32 neutral_kills = 7;
   */
  neutralKills?: number;
  /**
   * @generated from protobuf field: optional uint32 creep_damage = 8;
   */
  creepDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 neutral_damage = 9;
   */
  neutralDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 boss_damage = 10;
   */
  bossDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 player_damage = 11;
   */
  playerDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 denies = 12;
   */
  denies?: number;
  /**
   * @generated from protobuf field: optional uint32 player_healing = 13;
   */
  playerHealing?: number;
  /**
   * @generated from protobuf field: optional uint32 ability_points = 14;
   */
  abilityPoints?: number;
  /**
   * @generated from protobuf field: optional uint32 self_healing = 15;
   */
  selfHealing?: number;
  /**
   * @generated from protobuf field: optional uint32 player_damage_taken = 16;
   */
  playerDamageTaken?: number;
  /**
   * @generated from protobuf field: optional uint32 max_health = 17;
   */
  maxHealth?: number;
  /**
   * @generated from protobuf field: optional uint32 weapon_power = 18;
   */
  weaponPower?: number;
  /**
   * @generated from protobuf field: optional uint32 tech_power = 19;
   */
  techPower?: number;
  /**
   * @generated from protobuf field: optional uint32 shots_hit = 20;
   */
  shotsHit?: number;
  /**
   * @generated from protobuf field: optional uint32 shots_missed = 21;
   */
  shotsMissed?: number;
  /**
   * @generated from protobuf field: optional uint32 damage_absorbed = 22;
   */
  damageAbsorbed?: number;
  /**
   * @generated from protobuf field: optional uint32 absorption_provided = 23;
   */
  absorptionProvided?: number;
  /**
   * @generated from protobuf field: optional uint32 heal_prevented = 26;
   */
  healPrevented?: number;
  /**
   * @generated from protobuf field: optional uint32 heal_lost = 27;
   */
  healLost?: number;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats
 */
export interface CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats {
  /**
   * @generated from protobuf field: optional uint32 player = 1;
   */
  player?: number;
  /**
   * @generated from protobuf field: optional uint32 player_orb = 2;
   */
  playerOrb?: number;
  /**
   * @generated from protobuf field: optional uint32 lane_creep_orb = 3;
   */
  laneCreepOrb?: number;
  /**
   * @generated from protobuf field: optional uint32 neutral_creep_orb = 4;
   */
  neutralCreepOrb?: number;
  /**
   * @generated from protobuf field: optional uint32 boss = 5;
   */
  boss?: number;
  /**
   * @generated from protobuf field: optional uint32 boss_orb = 6;
   */
  bossOrb?: number;
  /**
   * @generated from protobuf field: optional uint32 treasure = 7;
   */
  treasure?: number;
  /**
   * @generated from protobuf field: optional uint32 denied = 8;
   */
  denied?: number;
  /**
   * @generated from protobuf field: optional uint32 death_loss = 9;
   */
  deathLoss?: number;
  /**
   * @generated from protobuf field: optional uint32 lane_creep = 10;
   */
  laneCreep?: number;
  /**
   * @generated from protobuf field: optional uint32 neutral_creep = 11;
   */
  neutralCreep?: number;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_DetailedStats.Objective
 */
export interface CMsgServerSignoutData_DetailedStats_Objective {
  /**
   * @generated from protobuf field: optional uint32 destroyed_time_s = 2;
   */
  destroyedTimeS?: number;
  /**
   * @generated from protobuf field: optional uint32 creep_damage = 4;
   */
  creepDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 creep_damage_mitigated = 5;
   */
  creepDamageMitigated?: number;
  /**
   * @generated from protobuf field: optional uint32 player_damage = 6;
   */
  playerDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 player_damage_mitigated = 7;
   */
  playerDamageMitigated?: number;
  /**
   * @generated from protobuf field: optional uint32 first_damage_time_s = 8;
   */
  firstDamageTimeS?: number;
  /**
   * @generated from protobuf field: optional ECitadelTeamObjective team_objective_id = 9;
   */
  teamObjectiveId?: ECitadelTeamObjective;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team = 10;
   */
  team?: ECitadelLobbyTeam;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_DetailedStats.MidBoss
 */
export interface CMsgServerSignoutData_DetailedStats_MidBoss {
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team_killed = 1;
   */
  teamKilled?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team_claimed = 2;
   */
  teamClaimed?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional uint32 destroyed_time_s = 3;
   */
  destroyedTimeS?: number;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_DetailedStats.Player
 */
export interface CMsgServerSignoutData_DetailedStats_Player {
  /**
   * @generated from protobuf field: optional uint32 player_slot = 1;
   */
  playerSlot?: number;
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_DetailedStats.TimeSample time_samples = 3;
   */
  timeSamples: CMsgServerSignoutData_DetailedStats_TimeSample[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_PerfData
 */
export interface CMsgServerSignoutData_PerfData {
  /**
   * @generated from protobuf field: repeated float average_frame_time = 1;
   */
  averageFrameTime: number[];
  /**
   * @generated from protobuf field: repeated float max_frame_time = 2;
   */
  maxFrameTime: number[];
  /**
   * @generated from protobuf field: optional float server_average_frame_time = 3;
   */
  serverAverageFrameTime?: number;
  /**
   * @generated from protobuf field: optional float server_max_frame_time = 4;
   */
  serverMaxFrameTime?: number;
  /**
   * @generated from protobuf field: repeated float average_compute_time = 5;
   */
  averageComputeTime: number[];
  /**
   * @generated from protobuf field: repeated float max_compute_time = 6;
   */
  maxComputeTime: number[];
  /**
   * @generated from protobuf field: repeated float average_client_tick_time = 7;
   */
  averageClientTickTime: number[];
  /**
   * @generated from protobuf field: repeated float max_client_tick_time = 8;
   */
  maxClientTickTime: number[];
  /**
   * @generated from protobuf field: repeated float average_client_simulate_time = 9;
   */
  averageClientSimulateTime: number[];
  /**
   * @generated from protobuf field: repeated float max_client_simulate_time = 10;
   */
  maxClientSimulateTime: number[];
  /**
   * @generated from protobuf field: repeated float average_output_time = 11;
   */
  averageOutputTime: number[];
  /**
   * @generated from protobuf field: repeated float max_output_time = 12;
   */
  maxOutputTime: number[];
  /**
   * @generated from protobuf field: repeated float average_wait_for_rendering_to_complete_time = 13;
   */
  averageWaitForRenderingToCompleteTime: number[];
  /**
   * @generated from protobuf field: repeated float max_wait_for_rendering_to_complete_time = 14;
   */
  maxWaitForRenderingToCompleteTime: number[];
  /**
   * @generated from protobuf field: repeated float average_swap_time = 15;
   */
  averageSwapTime: number[];
  /**
   * @generated from protobuf field: repeated float max_swap_time = 16;
   */
  maxSwapTime: number[];
  /**
   * @generated from protobuf field: repeated float average_frame_update_time = 17;
   */
  averageFrameUpdateTime: number[];
  /**
   * @generated from protobuf field: repeated float max_frame_update_time = 18;
   */
  maxFrameUpdateTime: number[];
  /**
   * @generated from protobuf field: repeated float average_idle_time = 19;
   */
  averageIdleTime: number[];
  /**
   * @generated from protobuf field: repeated float max_idle_time = 20;
   */
  maxIdleTime: number[];
  /**
   * @generated from protobuf field: repeated float average_input_processing_time = 21;
   */
  averageInputProcessingTime: number[];
  /**
   * @generated from protobuf field: repeated float max_input_processing_time = 22;
   */
  maxInputProcessingTime: number[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_BookRewards
 */
export interface CMsgServerSignoutData_BookRewards {
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_BookRewards.AccountRewards account_rewards = 1;
   */
  accountRewards: CMsgServerSignoutData_BookRewards_AccountRewards[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_BookRewards.BookReward
 */
export interface CMsgServerSignoutData_BookRewards_BookReward {
  /**
   * @generated from protobuf field: optional uint32 book_id = 1;
   */
  bookId?: number;
  /**
   * @generated from protobuf field: optional uint32 xp_reward = 2;
   */
  xpReward?: number;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_BookRewards.AccountRewards
 */
export interface CMsgServerSignoutData_BookRewards_AccountRewards {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional CMsgServerSignoutData_BookRewards.BookReward book_reward = 2;
   */
  bookReward?: CMsgServerSignoutData_BookRewards_BookReward;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_AccountStatChanges
 */
export interface CMsgServerSignoutData_AccountStatChanges {
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_AccountStatChanges.AccountStats account_stats = 1;
   */
  accountStats: CMsgServerSignoutData_AccountStatChanges_AccountStats[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_AccountStatChanges.Stat
 */
export interface CMsgServerSignoutData_AccountStatChanges_Stat {
  /**
   * @generated from protobuf field: optional uint32 hero_id = 1;
   */
  heroId?: number;
  /**
   * @generated from protobuf field: optional uint32 stat_id = 2;
   */
  statId?: number;
  /**
   * @generated from protobuf field: optional uint32 value = 3;
   */
  value?: number;
  /**
   * @generated from protobuf field: optional ECitadelAccountStatMedal medal = 4;
   */
  medal?: ECitadelAccountStatMedal;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_AccountStatChanges.AccountStats
 */
export interface CMsgServerSignoutData_AccountStatChanges_AccountStats {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_AccountStatChanges.Stat stats = 2;
   */
  stats: CMsgServerSignoutData_AccountStatChanges_Stat[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_PlayerChat
 */
export interface CMsgServerSignoutData_PlayerChat {
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_PlayerChat.ChatLine chat_lines = 1;
   */
  chatLines: CMsgServerSignoutData_PlayerChat_ChatLine[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_PlayerChat.ChatLine
 */
export interface CMsgServerSignoutData_PlayerChat_ChatLine {
  /**
   * @generated from protobuf field: optional uint32 player_slot = 1;
   */
  playerSlot?: number;
  /**
   * @generated from protobuf field: optional float game_time = 2;
   */
  gameTime?: number;
  /**
   * @generated from protobuf field: optional bool team_only = 3;
   */
  teamOnly?: boolean;
  /**
   * @generated from protobuf field: optional string chat_line = 4;
   */
  chatLine?: string;
}
/**
 * @generated from protobuf message CMsgServerSignoutData_PenalizedPlayers
 */
export interface CMsgServerSignoutData_PenalizedPlayers {
  /**
   * @generated from protobuf field: repeated CMsgServerSignoutData_PenalizedPlayers.Penalty penalized_players = 1;
   */
  penalizedPlayers: CMsgServerSignoutData_PenalizedPlayers_Penalty[];
}
/**
 * @generated from protobuf message CMsgServerSignoutData_PenalizedPlayers.Penalty
 */
export interface CMsgServerSignoutData_PenalizedPlayers_Penalty {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason reason = 2;
   */
  reason?: CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason;
  /**
   * @generated from protobuf field: optional uint32 match_time_s = 3;
   */
  matchTimeS?: number;
  /**
   * @generated from protobuf field: optional uint32 time_stamp = 4;
   */
  timeStamp?: number;
}
/**
 * @generated from protobuf enum CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason
 */
export enum CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason {
  /**
   * @generated from protobuf enum value: k_EPenaltyReason_Abandon = 0;
   */
  k_EPenaltyReason_Abandon = 0,
  /**
   * @generated from protobuf enum value: k_EPenaltyReason_DisconnectedTooLong = 1;
   */
  k_EPenaltyReason_DisconnectedTooLong = 1,
}
/**
 * @generated from protobuf message CMsgMatchData
 */
export interface CMsgMatchData {
  /**
   * @generated from protobuf field: optional uint32 match_duration_s = 1;
   */
  matchDurationS?: number;
  /**
   * @generated from protobuf field: optional CMsgMatchData.EEndReason end_reason = 2;
   */
  endReason?: CMsgMatchData_EEndReason;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam winning_team = 3;
   */
  winningTeam?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: repeated CMsgMatchData.PlayerInfo players = 4;
   */
  players: CMsgMatchData_PlayerInfo[];
  /**
   * @generated from protobuf field: optional uint32 objectives_mask_legacy = 5;
   */
  objectivesMaskLegacy?: number;
  /**
   * @generated from protobuf field: optional uint32 server_version = 6;
   */
  serverVersion?: number;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 7;
   */
  gameMode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 8;
   */
  matchMode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team0 = 9;
   */
  objectivesMaskTeam0?: bigint;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team1 = 10;
   */
  objectivesMaskTeam1?: bigint;
  /**
   * @generated from protobuf field: optional uint32 match_end_time = 11;
   */
  matchEndTime?: number;
  /**
   * @generated from protobuf field: optional float stomp_score = 12;
   */
  stompScore?: number;
  /**
   * @generated from protobuf field: optional bool safe_to_abandon = 13;
   */
  safeToAbandon?: boolean;
  /**
   * @generated from protobuf field: optional bool team_abandon = 14;
   */
  teamAbandon?: boolean;
  /**
   * @generated from protobuf field: optional bool new_player_pool = 15;
   */
  newPlayerPool?: boolean;
  /**
   * @generated from protobuf field: optional bool low_pri_pool = 16;
   */
  lowPriPool?: boolean;
}
/**
 * @generated from protobuf message CMsgMatchData.PlayerItem
 */
export interface CMsgMatchData_PlayerItem {
  /**
   * @generated from protobuf field: optional uint32 item_id = 1;
   */
  itemId?: number;
  /**
   * @generated from protobuf field: optional uint32 game_time_s = 2;
   */
  gameTimeS?: number;
  /**
   * @generated from protobuf field: optional uint32 upgrade_id = 3;
   */
  upgradeId?: number;
  /**
   * @generated from protobuf field: optional uint32 sold_time_s = 4;
   */
  soldTimeS?: number;
  /**
   * @generated from protobuf field: optional uint32 flags = 5;
   */
  flags?: number;
  /**
   * @generated from protobuf field: optional uint32 imbued_ability_id = 6;
   */
  imbuedAbilityId?: number;
}
/**
 * @generated from protobuf message CMsgMatchData.PlayerInfo
 */
export interface CMsgMatchData_PlayerInfo {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team = 2;
   */
  team?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional uint32 player_slot = 3;
   */
  playerSlot?: number;
  /**
   * @generated from protobuf field: optional uint32 player_mmr = 5;
   */
  playerMmr?: number;
  /**
   * @generated from protobuf field: optional uint32 player_uncertainty = 6;
   */
  playerUncertainty?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 7;
   */
  heroId?: number;
  /**
   * @generated from protobuf field: optional uint32 kills = 8;
   */
  kills?: number;
  /**
   * @generated from protobuf field: optional uint32 deaths = 9;
   */
  deaths?: number;
  /**
   * @generated from protobuf field: optional uint32 net_worth = 10;
   */
  netWorth?: number;
  /**
   * @generated from protobuf field: optional uint32 assists = 11;
   */
  assists?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_mmr = 12;
   */
  heroMmr?: number;
  /**
   * @generated from protobuf field: repeated CMsgMatchData.PlayerItem items = 13;
   */
  items: CMsgMatchData_PlayerItem[];
  /**
   * @generated from protobuf field: optional uint32 gpm_10min = 14 [json_name = "gpm10min"];
   */
  gpm10Min?: number;
  /**
   * @generated from protobuf field: optional uint32 gpm_15min = 15 [json_name = "gpm15min"];
   */
  gpm15Min?: number;
  /**
   * @generated from protobuf field: optional uint32 gpm_20min = 16 [json_name = "gpm20min"];
   */
  gpm20Min?: number;
  /**
   * @generated from protobuf field: optional uint32 gpm_25min = 17 [json_name = "gpm25min"];
   */
  gpm25Min?: number;
  /**
   * @generated from protobuf field: optional uint32 gpm_30min = 18 [json_name = "gpm30min"];
   */
  gpm30Min?: number;
  /**
   * @generated from protobuf field: optional uint32 gpm_35min = 19 [json_name = "gpm35min"];
   */
  gpm35Min?: number;
  /**
   * @generated from protobuf field: optional uint32 gpm_end = 20;
   */
  gpmEnd?: number;
  /**
   * @generated from protobuf field: optional uint32 last_hits = 21;
   */
  lastHits?: number;
  /**
   * @generated from protobuf field: optional uint32 denies = 22;
   */
  denies?: number;
  /**
   * @generated from protobuf field: optional uint32 ability_points = 23;
   */
  abilityPoints?: number;
  /**
   * @generated from protobuf field: optional uint32 level = 24;
   */
  level?: number;
  /**
   * @generated from protobuf field: optional uint32 assigned_lane = 25;
   */
  assignedLane?: number;
  /**
   * @generated from protobuf field: optional uint32 party_index = 26;
   */
  partyIndex?: number;
  /**
   * @generated from protobuf field: optional EGCPlatform platform = 27;
   */
  platform?: EGCPlatform;
  /**
   * @generated from protobuf field: optional uint32 ability_damage = 28;
   */
  abilityDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 bullet_damage = 29;
   */
  bulletDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_bullets_hit = 30;
   */
  heroBulletsHit?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_bullets_hit_crit = 31;
   */
  heroBulletsHitCrit?: number;
  /**
   * @generated from protobuf field: optional uint32 player_healing = 32;
   */
  playerHealing?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_bullets_fired = 33;
   */
  heroBulletsFired?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_incoming_bullets_fired = 34;
   */
  heroIncomingBulletsFired?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_incoming_bullets_hit = 35;
   */
  heroIncomingBulletsHit?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_incoming_bullets_crit = 36;
   */
  heroIncomingBulletsCrit?: number;
  /**
   * @generated from protobuf field: optional uint32 time_dead_s = 37;
   */
  timeDeadS?: number;
  /**
   * @generated from protobuf field: optional uint32 player_bullet_damage = 38;
   */
  playerBulletDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 player_ability_damage = 39;
   */
  playerAbilityDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 player_melee_damage = 40;
   */
  playerMeleeDamage?: number;
  /**
   * @generated from protobuf field: optional uint32 abandon_match_time_s = 41;
   */
  abandonMatchTimeS?: number;
  /**
   * @generated from protobuf field: optional uint32 abandon_time_stamp = 42;
   */
  abandonTimeStamp?: number;
  /**
   * @generated from protobuf field: optional uint32 trooper_kill_excluded = 43;
   */
  trooperKillExcluded?: number;
}
/**
 * @generated from protobuf enum CMsgMatchData.EEndReason
 */
export enum CMsgMatchData_EEndReason {
  /**
   * @generated from protobuf enum value: k_EEndReason_TeamWin = 0;
   */
  k_EEndReason_TeamWin = 0,
  /**
   * @generated from protobuf enum value: k_EEndReason_AllAbandoned = 2;
   */
  k_EEndReason_AllAbandoned = 2,
  /**
   * @generated from protobuf enum value: k_EEndReason_NetworkIssues = 3;
   */
  k_EEndReason_NetworkIssues = 3,
  /**
   * @generated from protobuf enum value: k_EEndReason_MatchLength = 4;
   */
  k_EEndReason_MatchLength = 4,
  /**
   * @generated from protobuf enum value: k_EEndReason_PlayerNeverConnected = 5;
   */
  k_EEndReason_PlayerNeverConnected = 5,
}
/**
 * @generated from protobuf message CMsgServerToGCMatchSignout
 */
export interface CMsgServerToGCMatchSignout {
  /**
   * @generated from protobuf field: repeated CExtraMsgBlock additional_data = 1;
   */
  additionalData: CExtraMsgBlock[];
  /**
   * @generated from protobuf field: optional uint32 signout_attempt = 2;
   */
  signoutAttempt?: number;
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 3;
   */
  lobbyId?: bigint;
  /**
   * @generated from protobuf field: optional uint64 match_id = 4;
   */
  matchId?: bigint;
  /**
   * @generated from protobuf field: optional uint32 cluster_id = 9;
   */
  clusterId?: number;
  /**
   * @generated from protobuf field: optional CMsgMatchData match_data = 10;
   */
  matchData?: CMsgMatchData;
}
/**
 * @generated from protobuf message CMsgServerToGCMatchSignoutResponse
 */
export interface CMsgServerToGCMatchSignoutResponse {
  /**
   * @generated from protobuf field: optional CMsgServerToGCMatchSignoutResponse.ESignoutResult result = 1;
   */
  result?: CMsgServerToGCMatchSignoutResponse_ESignoutResult;
}
/**
 * @generated from protobuf enum CMsgServerToGCMatchSignoutResponse.ESignoutResult
 */
export enum CMsgServerToGCMatchSignoutResponse_ESignoutResult {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_ESignout_Failed_Retry = 1;
   */
  k_ESignout_Failed_Retry = 1,
  /**
   * @generated from protobuf enum value: k_ESignout_Failed_NoRetry = 2;
   */
  k_ESignout_Failed_NoRetry = 2,
  /**
   * @generated from protobuf enum value: k_ESignout_Failed_InFlight = 3;
   */
  k_ESignout_Failed_InFlight = 3,
  /**
   * @generated from protobuf enum value: k_ESignout_Success = 4;
   */
  k_ESignout_Success = 4,
  /**
   * @generated from protobuf enum value: k_ESignout_Success_AlreadySignedOut = 5;
   */
  k_ESignout_Success_AlreadySignedOut = 5,
}
/**
 * @generated from protobuf message CMsgServerWelcomeCitadel
 */
export interface CMsgServerWelcomeCitadel {}
/**
 * @generated from protobuf message CMsgServerToGCIdlePing
 */
export interface CMsgServerToGCIdlePing {
  /**
   * @generated from protobuf field: optional uint32 server_version = 1;
   */
  serverVersion?: number;
}
/**
 * @generated from protobuf message CMsgGCToServerRequestPing
 */
export interface CMsgGCToServerRequestPing {}
/**
 * @generated from protobuf message CMsgGCToServerAllocateForMatch
 */
export interface CMsgGCToServerAllocateForMatch {
  /**
   * @generated from protobuf field: optional uint64 match_id = 1;
   */
  matchId?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToServerAllocateForMatchResponse
 */
export interface CMsgGCToServerAllocateForMatchResponse {
  /**
   * @generated from protobuf field: optional bool success = 1;
   */
  success?: boolean;
}
/**
 * @generated from protobuf message CMsgServerToGCEnterMatchmaking
 */
export interface CMsgServerToGCEnterMatchmaking {
  /**
   * @generated from protobuf field: optional uint32 server_version = 1;
   */
  serverVersion?: number;
  /**
   * @generated from protobuf field: optional string search_key = 2;
   */
  searchKey?: string;
  /**
   * @generated from protobuf field: optional uint32 region_id = 3;
   */
  regionId?: number;
  /**
   * @generated from protobuf field: optional uint32 cluster_id = 4;
   */
  clusterId?: number;
  /**
   * @generated from protobuf field: optional uint32 server_public_ip = 5;
   */
  serverPublicIp?: number;
  /**
   * @generated from protobuf field: optional uint32 server_private_ip = 6;
   */
  serverPrivateIp?: number;
  /**
   * @generated from protobuf field: optional uint32 server_port = 7;
   */
  serverPort?: number;
  /**
   * @generated from protobuf field: optional bytes sdr_address = 9;
   */
  sdrAddress?: Uint8Array;
}
/**
 * @generated from protobuf message CMsgGCToServerCancelAllocateForMatch
 */
export interface CMsgGCToServerCancelAllocateForMatch {
  /**
   * @generated from protobuf field: optional uint64 match_id = 1;
   */
  matchId?: bigint;
}
/**
 * @generated from protobuf message CMsgServerToGCUpdateLobbyServerState
 */
export interface CMsgServerToGCUpdateLobbyServerState {
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 1;
   */
  lobbyId?: bigint;
  /**
   * @generated from protobuf field: optional ELobbyServerState server_state = 2;
   */
  serverState?: ELobbyServerState;
  /**
   * @generated from protobuf field: optional bool safe_to_abandon = 3;
   */
  safeToAbandon?: boolean;
}
/**
 * @generated from protobuf message CMsgServerToGCAbandonMatch
 */
export interface CMsgServerToGCAbandonMatch {
  /**
   * @generated from protobuf field: optional fixed64 server_steam_id = 1;
   */
  serverSteamId?: bigint;
  /**
   * @generated from protobuf field: optional fixed64 lobby_id = 2;
   */
  lobbyId?: bigint;
  /**
   * @generated from protobuf field: optional uint32 cluster_id = 3;
   */
  clusterId?: number;
  /**
   * @generated from protobuf field: optional CMsgServerToGCAbandonMatch.EReason reason_code = 4;
   */
  reasonCode?: CMsgServerToGCAbandonMatch_EReason;
  /**
   * @generated from protobuf field: optional uint64 additional_data = 5;
   */
  additionalData?: bigint;
  /**
   * @generated from protobuf field: optional uint64 match_id = 6;
   */
  matchId?: bigint;
  /**
   * @generated from protobuf field: repeated CMsgServerToGCAbandonMatch.Player players = 8;
   */
  players: CMsgServerToGCAbandonMatch_Player[];
  /**
   * @generated from protobuf field: optional fixed32 public_ip_address = 9;
   */
  publicIpAddress?: number;
  /**
   * @generated from protobuf field: optional uint32 port = 10;
   */
  port?: number;
  /**
   * @generated from protobuf field: optional uint32 server_version = 11;
   */
  serverVersion?: number;
  /**
   * @generated from protobuf field: optional uint32 pid = 12;
   */
  pid?: number;
  /**
   * @generated from protobuf field: optional uint32 instance_id = 13;
   */
  instanceId?: number;
  /**
   * @generated from protobuf field: optional uint32 private_ip_address = 14;
   */
  privateIpAddress?: number;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 15;
   */
  matchMode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 16;
   */
  gameMode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional bool was_server_shutdown = 17;
   */
  wasServerShutdown?: boolean;
}
/**
 * @generated from protobuf message CMsgServerToGCAbandonMatch.Player
 */
export interface CMsgServerToGCAbandonMatch_Player {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional uint64 additional_data = 2;
   */
  additionalData?: bigint;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 3;
   */
  heroId?: number;
}
/**
 * @generated from protobuf enum CMsgServerToGCAbandonMatch.EReason
 */
export enum CMsgServerToGCAbandonMatch_EReason {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: eReason_ServerCrash = 1;
   */
  eReason_ServerCrash = 1,
  /**
   * @generated from protobuf enum value: eReason_ClientsFailedToConnect = 2;
   */
  eReason_ClientsFailedToConnect = 2,
}
/**
 * @generated from protobuf message CMsgServerToGCAbandonMatchResponse
 */
export interface CMsgServerToGCAbandonMatchResponse {}
/**
 * @generated from protobuf message CMsgServerToGCTestConnection
 */
export interface CMsgServerToGCTestConnection {}
/**
 * @generated from protobuf message CMsgServerToGCTestConnectionResponse
 */
export interface CMsgServerToGCTestConnectionResponse {
  /**
   * @generated from protobuf field: optional uint32 state = 1;
   */
  state?: number;
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 2;
   */
  lobbyId?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToServerSetServerConVar
 */
export interface CMsgGCToServerSetServerConVar {
  /**
   * @generated from protobuf field: optional string convar_name = 1;
   */
  convarName?: string;
  /**
   * @generated from protobuf field: optional string convar_value = 2;
   */
  convarValue?: string;
}
/**
 * @generated from protobuf message CMsgGCToServerSetServerConVarResponse
 */
export interface CMsgGCToServerSetServerConVarResponse {
  /**
   * @generated from protobuf field: optional bool success = 1;
   */
  success?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToServerAddSpectator
 */
export interface CMsgGCToServerAddSpectator {
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 1;
   */
  lobbyId?: bigint;
  /**
   * @generated from protobuf field: optional uint32 account_id = 2;
   */
  accountId?: number;
  /**
   * @generated from protobuf field: optional uint32 account_to_spectate = 3;
   */
  accountToSpectate?: number;
}
/**
 * @generated from protobuf message CMsgGCToServerAddSpectatorResponse
 */
export interface CMsgGCToServerAddSpectatorResponse {
  /**
   * @generated from protobuf field: optional CMsgGCToServerAddSpectatorResponse.EResponse result = 1;
   */
  result?: CMsgGCToServerAddSpectatorResponse_EResponse;
  /**
   * @generated from protobuf field: optional uint32 requesting_account_id = 2;
   */
  requestingAccountId?: number;
}
/**
 * @generated from protobuf enum CMsgGCToServerAddSpectatorResponse.EResponse
 */
export enum CMsgGCToServerAddSpectatorResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eServerFull = 2;
   */
  k_eServerFull = 2,
}
/**
 * @generated from protobuf enum EGCCitadelServerMessages
 */
export enum EGCCitadelServerMessages {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCMatchSignoutPermission = 10012;
   */
  k_EMsgServerToGCMatchSignoutPermission = 10012,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCMatchSignoutPermissionResponse = 10013;
   */
  k_EMsgServerToGCMatchSignoutPermissionResponse = 10013,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCMatchSignout = 10014;
   */
  k_EMsgServerToGCMatchSignout = 10014,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCMatchSignoutResponse = 10015;
   */
  k_EMsgServerToGCMatchSignoutResponse = 10015,
  /**
   * @generated from protobuf enum value: k_EMsgGCToServerAddSpectator = 10016;
   */
  k_EMsgGCToServerAddSpectator = 10016,
  /**
   * @generated from protobuf enum value: k_EMsgGCToServerAddSpectatorResponse = 10017;
   */
  k_EMsgGCToServerAddSpectatorResponse = 10017,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCIdlePing = 10018;
   */
  k_EMsgServerToGCIdlePing = 10018,
  /**
   * @generated from protobuf enum value: k_EMsgGCToServerRequestPing = 10019;
   */
  k_EMsgGCToServerRequestPing = 10019,
  /**
   * @generated from protobuf enum value: k_EMsgGCToServerAllocateForMatch = 10021;
   */
  k_EMsgGCToServerAllocateForMatch = 10021,
  /**
   * @generated from protobuf enum value: k_EMsgGCToServerAllocateForMatchResponse = 10022;
   */
  k_EMsgGCToServerAllocateForMatchResponse = 10022,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCEnterMatchmaking = 10023;
   */
  k_EMsgServerToGCEnterMatchmaking = 10023,
  /**
   * @generated from protobuf enum value: k_EMsgGCToServerCancelAllocateForMatch = 10024;
   */
  k_EMsgGCToServerCancelAllocateForMatch = 10024,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCUpdateLobbyServerState = 10025;
   */
  k_EMsgServerToGCUpdateLobbyServerState = 10025,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCAbandonMatch = 10026;
   */
  k_EMsgServerToGCAbandonMatch = 10026,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCAbandonMatchResponse = 10027;
   */
  k_EMsgServerToGCAbandonMatchResponse = 10027,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCTestConnection = 10028;
   */
  k_EMsgServerToGCTestConnection = 10028,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCTestConnectionResponse = 10029;
   */
  k_EMsgServerToGCTestConnectionResponse = 10029,
  /**
   * @generated from protobuf enum value: k_EMsgGCToServerSetServerConVar = 10039;
   */
  k_EMsgGCToServerSetServerConVar = 10039,
  /**
   * @generated from protobuf enum value: k_EMsgGCToServerSetServerConVarResponse = 10040;
   */
  k_EMsgGCToServerSetServerConVarResponse = 10040,
  /**
   * @generated from protobuf enum value: k_EMsgServerToGCUpdateMatchInfo = 10041;
   */
  k_EMsgServerToGCUpdateMatchInfo = 10041,
}
/**
 * @generated from protobuf enum EGCServerLobbyData
 */
export enum EGCServerLobbyData {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_EServerLobbyData_PlayerMMR = 1;
   */
  k_EServerLobbyData_PlayerMMR = 1,
  /**
   * @generated from protobuf enum value: k_EServerLobbyData_PlayerInfo = 2;
   */
  k_EServerLobbyData_PlayerInfo = 2,
  /**
   * @generated from protobuf enum value: k_EServerLobbyData_PostMatchSurvey = 3;
   */
  k_EServerLobbyData_PostMatchSurvey = 3,
  /**
   * @generated from protobuf enum value: k_EServerLobbyData_AutoTest = 4;
   */
  k_EServerLobbyData_AutoTest = 4,
}
/**
 * @generated from protobuf enum EGCServerSignoutData
 */
export enum EGCServerSignoutData {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_EServerSignoutData_Disconnections = 2;
   */
  k_EServerSignoutData_Disconnections = 2,
  /**
   * @generated from protobuf enum value: k_EServerSignoutData_AccountStatChanges = 3;
   */
  k_EServerSignoutData_AccountStatChanges = 3,
  /**
   * @generated from protobuf enum value: k_EServerSignoutData_DetailedStats = 4;
   */
  k_EServerSignoutData_DetailedStats = 4,
  /**
   * @generated from protobuf enum value: k_EServerSignoutData_ServerPerfStats = 5;
   */
  k_EServerSignoutData_ServerPerfStats = 5,
  /**
   * @generated from protobuf enum value: k_EServerSignoutData_PerfData = 6;
   */
  k_EServerSignoutData_PerfData = 6,
  /**
   * @generated from protobuf enum value: k_EServerSignoutData_PlayerChat = 7;
   */
  k_EServerSignoutData_PlayerChat = 7,
  /**
   * @generated from protobuf enum value: k_EServerSignoutData_BookRewards = 8;
   */
  k_EServerSignoutData_BookRewards = 8,
  /**
   * @generated from protobuf enum value: k_EServerSignoutData_PenalizedPlayers = 9;
   */
  k_EServerSignoutData_PenalizedPlayers = 9,
}
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerCrashSentinelFile$Type extends MessageType<CMsgServerCrashSentinelFile> {
  constructor() {
    super("CMsgServerCrashSentinelFile", [
      {
        no: 1,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "server_steam_id",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "server_public_ip_addr",
        kind: "scalar",
        opt: true,
        T: 7 /*ScalarType.FIXED32*/,
      },
      {
        no: 4,
        name: "server_port",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "server_cluster",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "pid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "saved_time",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "server_version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "game_info",
        kind: "message",
        T: () => CMsgServerCrashSentinelFile_GameInfo,
      },
      {
        no: 10,
        name: "server_private_ip_addr",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "instance_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerCrashSentinelFile>,
  ): CMsgServerCrashSentinelFile {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerCrashSentinelFile>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerCrashSentinelFile,
  ): CMsgServerCrashSentinelFile {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 version */ 1:
          message.version = reader.uint32();
          break;
        case /* optional fixed64 server_steam_id */ 2:
          message.serverSteamId = reader.fixed64().toBigInt();
          break;
        case /* optional fixed32 server_public_ip_addr */ 3:
          message.serverPublicIpAddr = reader.fixed32();
          break;
        case /* optional uint32 server_port */ 4:
          message.serverPort = reader.uint32();
          break;
        case /* optional uint32 server_cluster */ 5:
          message.serverCluster = reader.uint32();
          break;
        case /* optional uint32 pid */ 6:
          message.pid = reader.uint32();
          break;
        case /* optional uint32 saved_time */ 7:
          message.savedTime = reader.uint32();
          break;
        case /* optional uint32 server_version */ 8:
          message.serverVersion = reader.uint32();
          break;
        case /* optional CMsgServerCrashSentinelFile.GameInfo game_info */ 9:
          message.gameInfo =
            CMsgServerCrashSentinelFile_GameInfo.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.gameInfo,
            );
          break;
        case /* optional uint32 server_private_ip_addr */ 10:
          message.serverPrivateIpAddr = reader.uint32();
          break;
        case /* optional uint32 instance_id */ 11:
          message.instanceId = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerCrashSentinelFile,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 version = 1; */
    if (message.version !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.version);
    /* optional fixed64 server_steam_id = 2; */
    if (message.serverSteamId !== undefined)
      writer.tag(2, WireType.Bit64).fixed64(message.serverSteamId);
    /* optional fixed32 server_public_ip_addr = 3; */
    if (message.serverPublicIpAddr !== undefined)
      writer.tag(3, WireType.Bit32).fixed32(message.serverPublicIpAddr);
    /* optional uint32 server_port = 4; */
    if (message.serverPort !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.serverPort);
    /* optional uint32 server_cluster = 5; */
    if (message.serverCluster !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.serverCluster);
    /* optional uint32 pid = 6; */
    if (message.pid !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.pid);
    /* optional uint32 saved_time = 7; */
    if (message.savedTime !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.savedTime);
    /* optional uint32 server_version = 8; */
    if (message.serverVersion !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.serverVersion);
    /* optional CMsgServerCrashSentinelFile.GameInfo game_info = 9; */
    if (message.gameInfo)
      CMsgServerCrashSentinelFile_GameInfo.internalBinaryWrite(
        message.gameInfo,
        writer.tag(9, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 server_private_ip_addr = 10; */
    if (message.serverPrivateIpAddr !== undefined)
      writer.tag(10, WireType.Varint).uint32(message.serverPrivateIpAddr);
    /* optional uint32 instance_id = 11; */
    if (message.instanceId !== undefined)
      writer.tag(11, WireType.Varint).uint32(message.instanceId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerCrashSentinelFile
 */
export const CMsgServerCrashSentinelFile =
  new CMsgServerCrashSentinelFile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerCrashSentinelFile_Player$Type extends MessageType<CMsgServerCrashSentinelFile_Player> {
  constructor() {
    super("CMsgServerCrashSentinelFile.Player", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "hero_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerCrashSentinelFile_Player>,
  ): CMsgServerCrashSentinelFile_Player {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerCrashSentinelFile_Player>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerCrashSentinelFile_Player,
  ): CMsgServerCrashSentinelFile_Player {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional uint32 hero_id */ 2:
          message.heroId = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerCrashSentinelFile_Player,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional uint32 hero_id = 2; */
    if (message.heroId !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.heroId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerCrashSentinelFile.Player
 */
export const CMsgServerCrashSentinelFile_Player =
  new CMsgServerCrashSentinelFile_Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerCrashSentinelFile_GameInfo$Type extends MessageType<CMsgServerCrashSentinelFile_GameInfo> {
  constructor() {
    super("CMsgServerCrashSentinelFile.GameInfo", [
      {
        no: 1,
        name: "match_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "server_state",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "players",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerCrashSentinelFile_Player,
      },
      {
        no: 6,
        name: "match_mode",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 7,
        name: "game_mode",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 8,
        name: "was_server_shutdown",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerCrashSentinelFile_GameInfo>,
  ): CMsgServerCrashSentinelFile_GameInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.players = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerCrashSentinelFile_GameInfo>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerCrashSentinelFile_GameInfo,
  ): CMsgServerCrashSentinelFile_GameInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 match_id */ 1:
          message.matchId = reader.uint64().toBigInt();
          break;
        case /* optional fixed64 lobby_id */ 2:
          message.lobbyId = reader.fixed64().toBigInt();
          break;
        case /* optional uint32 server_state */ 3:
          message.serverState = reader.uint32();
          break;
        case /* repeated CMsgServerCrashSentinelFile.Player players */ 5:
          message.players.push(
            CMsgServerCrashSentinelFile_Player.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* optional ECitadelMatchMode match_mode */ 6:
          message.matchMode = reader.int32();
          break;
        case /* optional ECitadelGameMode game_mode */ 7:
          message.gameMode = reader.int32();
          break;
        case /* optional bool was_server_shutdown */ 8:
          message.wasServerShutdown = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerCrashSentinelFile_GameInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 match_id = 1; */
    if (message.matchId !== undefined)
      writer.tag(1, WireType.Varint).uint64(message.matchId);
    /* optional fixed64 lobby_id = 2; */
    if (message.lobbyId !== undefined)
      writer.tag(2, WireType.Bit64).fixed64(message.lobbyId);
    /* optional uint32 server_state = 3; */
    if (message.serverState !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.serverState);
    /* repeated CMsgServerCrashSentinelFile.Player players = 5; */
    for (let i = 0; i < message.players.length; i++)
      CMsgServerCrashSentinelFile_Player.internalBinaryWrite(
        message.players[i],
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional ECitadelMatchMode match_mode = 6; */
    if (message.matchMode !== undefined)
      writer.tag(6, WireType.Varint).int32(message.matchMode);
    /* optional ECitadelGameMode game_mode = 7; */
    if (message.gameMode !== undefined)
      writer.tag(7, WireType.Varint).int32(message.gameMode);
    /* optional bool was_server_shutdown = 8; */
    if (message.wasServerShutdown !== undefined)
      writer.tag(8, WireType.Varint).bool(message.wasServerShutdown);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerCrashSentinelFile.GameInfo
 */
export const CMsgServerCrashSentinelFile_GameInfo =
  new CMsgServerCrashSentinelFile_GameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CServerLobbyData_PlayerMMR$Type extends MessageType<CServerLobbyData_PlayerMMR> {
  constructor() {
    super("CServerLobbyData_PlayerMMR", [
      {
        no: 1,
        name: "players",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CServerLobbyData_PlayerMMR_Player,
      },
    ]);
  }
  create(
    value?: PartialMessage<CServerLobbyData_PlayerMMR>,
  ): CServerLobbyData_PlayerMMR {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.players = [];
    if (value !== undefined)
      reflectionMergePartial<CServerLobbyData_PlayerMMR>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CServerLobbyData_PlayerMMR,
  ): CServerLobbyData_PlayerMMR {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CServerLobbyData_PlayerMMR.Player players */ 1:
          message.players.push(
            CServerLobbyData_PlayerMMR_Player.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CServerLobbyData_PlayerMMR,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CServerLobbyData_PlayerMMR.Player players = 1; */
    for (let i = 0; i < message.players.length; i++)
      CServerLobbyData_PlayerMMR_Player.internalBinaryWrite(
        message.players[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CServerLobbyData_PlayerMMR
 */
export const CServerLobbyData_PlayerMMR = new CServerLobbyData_PlayerMMR$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CServerLobbyData_PlayerMMR_Player$Type extends MessageType<CServerLobbyData_PlayerMMR_Player> {
  constructor() {
    super("CServerLobbyData_PlayerMMR.Player", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "player_mmr",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "player_uncertainty",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "hero_mmr",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CServerLobbyData_PlayerMMR_Player>,
  ): CServerLobbyData_PlayerMMR_Player {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CServerLobbyData_PlayerMMR_Player>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CServerLobbyData_PlayerMMR_Player,
  ): CServerLobbyData_PlayerMMR_Player {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional uint32 player_mmr */ 2:
          message.playerMmr = reader.uint32();
          break;
        case /* optional uint32 player_uncertainty */ 3:
          message.playerUncertainty = reader.uint32();
          break;
        case /* optional uint32 hero_mmr */ 4:
          message.heroMmr = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CServerLobbyData_PlayerMMR_Player,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional uint32 player_mmr = 2; */
    if (message.playerMmr !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.playerMmr);
    /* optional uint32 player_uncertainty = 3; */
    if (message.playerUncertainty !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.playerUncertainty);
    /* optional uint32 hero_mmr = 4; */
    if (message.heroMmr !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.heroMmr);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CServerLobbyData_PlayerMMR.Player
 */
export const CServerLobbyData_PlayerMMR_Player =
  new CServerLobbyData_PlayerMMR_Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CServerLobbyData_PlayerInfo$Type extends MessageType<CServerLobbyData_PlayerInfo> {
  constructor() {
    super("CServerLobbyData_PlayerInfo", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "account_stats",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgAccountHeroStats,
      },
      {
        no: 4,
        name: "mmr_level",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "book_info",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgAccountBookStats,
      },
    ]);
  }
  create(
    value?: PartialMessage<CServerLobbyData_PlayerInfo>,
  ): CServerLobbyData_PlayerInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.accountStats = [];
    message.bookInfo = [];
    if (value !== undefined)
      reflectionMergePartial<CServerLobbyData_PlayerInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CServerLobbyData_PlayerInfo,
  ): CServerLobbyData_PlayerInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* repeated CMsgAccountHeroStats account_stats */ 2:
          message.accountStats.push(
            CMsgAccountHeroStats.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* optional uint32 mmr_level */ 4:
          message.mmrLevel = reader.uint32();
          break;
        case /* repeated CMsgAccountBookStats book_info */ 5:
          message.bookInfo.push(
            CMsgAccountBookStats.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CServerLobbyData_PlayerInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* repeated CMsgAccountHeroStats account_stats = 2; */
    for (let i = 0; i < message.accountStats.length; i++)
      CMsgAccountHeroStats.internalBinaryWrite(
        message.accountStats[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 mmr_level = 4; */
    if (message.mmrLevel !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.mmrLevel);
    /* repeated CMsgAccountBookStats book_info = 5; */
    for (let i = 0; i < message.bookInfo.length; i++)
      CMsgAccountBookStats.internalBinaryWrite(
        message.bookInfo[i],
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CServerLobbyData_PlayerInfo
 */
export const CServerLobbyData_PlayerInfo =
  new CServerLobbyData_PlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CServerLobbyData_PostMatchSurvey$Type extends MessageType<CServerLobbyData_PostMatchSurvey> {
  constructor() {
    super("CServerLobbyData_PostMatchSurvey", [
      {
        no: 1,
        name: "surveys",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CServerLobbyData_PostMatchSurvey_PlayerSurvey,
      },
    ]);
  }
  create(
    value?: PartialMessage<CServerLobbyData_PostMatchSurvey>,
  ): CServerLobbyData_PostMatchSurvey {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.surveys = [];
    if (value !== undefined)
      reflectionMergePartial<CServerLobbyData_PostMatchSurvey>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CServerLobbyData_PostMatchSurvey,
  ): CServerLobbyData_PostMatchSurvey {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CServerLobbyData_PostMatchSurvey.PlayerSurvey surveys */ 1:
          message.surveys.push(
            CServerLobbyData_PostMatchSurvey_PlayerSurvey.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CServerLobbyData_PostMatchSurvey,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CServerLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1; */
    for (let i = 0; i < message.surveys.length; i++)
      CServerLobbyData_PostMatchSurvey_PlayerSurvey.internalBinaryWrite(
        message.surveys[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CServerLobbyData_PostMatchSurvey
 */
export const CServerLobbyData_PostMatchSurvey =
  new CServerLobbyData_PostMatchSurvey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CServerLobbyData_PostMatchSurvey_PlayerSurvey$Type extends MessageType<CServerLobbyData_PostMatchSurvey_PlayerSurvey> {
  constructor() {
    super("CServerLobbyData_PostMatchSurvey.PlayerSurvey", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "question_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CServerLobbyData_PostMatchSurvey_PlayerSurvey>,
  ): CServerLobbyData_PostMatchSurvey_PlayerSurvey {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CServerLobbyData_PostMatchSurvey_PlayerSurvey>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CServerLobbyData_PostMatchSurvey_PlayerSurvey,
  ): CServerLobbyData_PostMatchSurvey_PlayerSurvey {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional uint32 question_id */ 2:
          message.questionId = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CServerLobbyData_PostMatchSurvey_PlayerSurvey,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional uint32 question_id = 2; */
    if (message.questionId !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.questionId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CServerLobbyData_PostMatchSurvey.PlayerSurvey
 */
export const CServerLobbyData_PostMatchSurvey_PlayerSurvey =
  new CServerLobbyData_PostMatchSurvey_PlayerSurvey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CServerLobbyData_AutoTest$Type extends MessageType<CServerLobbyData_AutoTest> {
  constructor() {
    super("CServerLobbyData_AutoTest", [
      {
        no: 2,
        name: "max_duration_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CServerLobbyData_AutoTest>,
  ): CServerLobbyData_AutoTest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CServerLobbyData_AutoTest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CServerLobbyData_AutoTest,
  ): CServerLobbyData_AutoTest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 max_duration_s */ 2:
          message.maxDurationS = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CServerLobbyData_AutoTest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 max_duration_s = 2; */
    if (message.maxDurationS !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.maxDurationS);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CServerLobbyData_AutoTest
 */
export const CServerLobbyData_AutoTest = new CServerLobbyData_AutoTest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelServerDynamicLobby$Type extends MessageType<CSOCitadelServerDynamicLobby> {
  constructor() {
    super("CSOCitadelServerDynamicLobby", [
      {
        no: 1,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "left_account_ids",
        kind: "scalar",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "broadcast_active",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 4,
        name: "spectator_count",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CSOCitadelServerDynamicLobby>,
  ): CSOCitadelServerDynamicLobby {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.leftAccountIds = [];
    if (value !== undefined)
      reflectionMergePartial<CSOCitadelServerDynamicLobby>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelServerDynamicLobby,
  ): CSOCitadelServerDynamicLobby {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 lobby_id */ 1:
          message.lobbyId = reader.uint64().toBigInt();
          break;
        case /* repeated uint32 left_account_ids = 2 [packed = true];*/ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.leftAccountIds.push(reader.uint32());
          else message.leftAccountIds.push(reader.uint32());
          break;
        case /* optional bool broadcast_active */ 3:
          message.broadcastActive = reader.bool();
          break;
        case /* optional uint32 spectator_count */ 4:
          message.spectatorCount = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelServerDynamicLobby,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 lobby_id = 1; */
    if (message.lobbyId !== undefined)
      writer.tag(1, WireType.Varint).uint64(message.lobbyId);
    /* repeated uint32 left_account_ids = 2 [packed = true]; */
    if (message.leftAccountIds.length) {
      writer.tag(2, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.leftAccountIds.length; i++)
        writer.uint32(message.leftAccountIds[i]);
      writer.join();
    }
    /* optional bool broadcast_active = 3; */
    if (message.broadcastActive !== undefined)
      writer.tag(3, WireType.Varint).bool(message.broadcastActive);
    /* optional uint32 spectator_count = 4; */
    if (message.spectatorCount !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.spectatorCount);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelServerDynamicLobby
 */
export const CSOCitadelServerDynamicLobby =
  new CSOCitadelServerDynamicLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelServerStaticLobby$Type extends MessageType<CSOCitadelServerStaticLobby> {
  constructor() {
    super("CSOCitadelServerStaticLobby", [
      {
        no: 1,
        name: "extra_messages",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CExtraMsgBlock,
      },
      {
        no: 2,
        name: "server_steam_id",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "replay_salt",
        kind: "scalar",
        opt: true,
        T: 7 /*ScalarType.FIXED32*/,
      },
      {
        no: 5,
        name: "level_name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 6,
        name: "members",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CSOCitadelServerStaticLobby_Member,
      },
      {
        no: 7,
        name: "dev_settings",
        kind: "message",
        T: () => CSOCitadelServerStaticLobby_DevSettings,
      },
      {
        no: 8,
        name: "gc_provided_heroes",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 9,
        name: "bot_difficulty",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelBotDifficulty", ECitadelBotDifficulty],
      },
      {
        no: 10,
        name: "metadata_salt",
        kind: "scalar",
        opt: true,
        T: 7 /*ScalarType.FIXED32*/,
      },
      {
        no: 11,
        name: "match_start_time",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "experimental_gameplay_state",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 16,
        name: "region_mode",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
      {
        no: 17,
        name: "broadcast_url",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 18,
        name: "new_player_pool",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 19,
        name: "low_pri_pool",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CSOCitadelServerStaticLobby>,
  ): CSOCitadelServerStaticLobby {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.extraMessages = [];
    message.members = [];
    if (value !== undefined)
      reflectionMergePartial<CSOCitadelServerStaticLobby>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelServerStaticLobby,
  ): CSOCitadelServerStaticLobby {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CExtraMsgBlock extra_messages */ 1:
          message.extraMessages.push(
            CExtraMsgBlock.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional fixed64 server_steam_id */ 2:
          message.serverSteamId = reader.fixed64().toBigInt();
          break;
        case /* optional uint64 lobby_id */ 3:
          message.lobbyId = reader.uint64().toBigInt();
          break;
        case /* optional fixed32 replay_salt */ 4:
          message.replaySalt = reader.fixed32();
          break;
        case /* optional string level_name */ 5:
          message.levelName = reader.string();
          break;
        case /* repeated CSOCitadelServerStaticLobby.Member members */ 6:
          message.members.push(
            CSOCitadelServerStaticLobby_Member.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* optional CSOCitadelServerStaticLobby.DevSettings dev_settings */ 7:
          message.devSettings =
            CSOCitadelServerStaticLobby_DevSettings.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.devSettings,
            );
          break;
        case /* optional bool gc_provided_heroes */ 8:
          message.gcProvidedHeroes = reader.bool();
          break;
        case /* optional ECitadelBotDifficulty bot_difficulty */ 9:
          message.botDifficulty = reader.int32();
          break;
        case /* optional fixed32 metadata_salt */ 10:
          message.metadataSalt = reader.fixed32();
          break;
        case /* optional uint32 match_start_time */ 11:
          message.matchStartTime = reader.uint32();
          break;
        case /* optional uint32 experimental_gameplay_state */ 15:
          message.experimentalGameplayState = reader.uint32();
          break;
        case /* optional ECitadelRegionMode region_mode */ 16:
          message.regionMode = reader.int32();
          break;
        case /* optional string broadcast_url */ 17:
          message.broadcastUrl = reader.string();
          break;
        case /* optional bool new_player_pool */ 18:
          message.newPlayerPool = reader.bool();
          break;
        case /* optional bool low_pri_pool */ 19:
          message.lowPriPool = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelServerStaticLobby,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CExtraMsgBlock extra_messages = 1; */
    for (let i = 0; i < message.extraMessages.length; i++)
      CExtraMsgBlock.internalBinaryWrite(
        message.extraMessages[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional fixed64 server_steam_id = 2; */
    if (message.serverSteamId !== undefined)
      writer.tag(2, WireType.Bit64).fixed64(message.serverSteamId);
    /* optional uint64 lobby_id = 3; */
    if (message.lobbyId !== undefined)
      writer.tag(3, WireType.Varint).uint64(message.lobbyId);
    /* optional fixed32 replay_salt = 4; */
    if (message.replaySalt !== undefined)
      writer.tag(4, WireType.Bit32).fixed32(message.replaySalt);
    /* optional string level_name = 5; */
    if (message.levelName !== undefined)
      writer.tag(5, WireType.LengthDelimited).string(message.levelName);
    /* repeated CSOCitadelServerStaticLobby.Member members = 6; */
    for (let i = 0; i < message.members.length; i++)
      CSOCitadelServerStaticLobby_Member.internalBinaryWrite(
        message.members[i],
        writer.tag(6, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CSOCitadelServerStaticLobby.DevSettings dev_settings = 7; */
    if (message.devSettings)
      CSOCitadelServerStaticLobby_DevSettings.internalBinaryWrite(
        message.devSettings,
        writer.tag(7, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional bool gc_provided_heroes = 8; */
    if (message.gcProvidedHeroes !== undefined)
      writer.tag(8, WireType.Varint).bool(message.gcProvidedHeroes);
    /* optional ECitadelBotDifficulty bot_difficulty = 9; */
    if (message.botDifficulty !== undefined)
      writer.tag(9, WireType.Varint).int32(message.botDifficulty);
    /* optional fixed32 metadata_salt = 10; */
    if (message.metadataSalt !== undefined)
      writer.tag(10, WireType.Bit32).fixed32(message.metadataSalt);
    /* optional uint32 match_start_time = 11; */
    if (message.matchStartTime !== undefined)
      writer.tag(11, WireType.Varint).uint32(message.matchStartTime);
    /* optional uint32 experimental_gameplay_state = 15; */
    if (message.experimentalGameplayState !== undefined)
      writer.tag(15, WireType.Varint).uint32(message.experimentalGameplayState);
    /* optional ECitadelRegionMode region_mode = 16; */
    if (message.regionMode !== undefined)
      writer.tag(16, WireType.Varint).int32(message.regionMode);
    /* optional string broadcast_url = 17; */
    if (message.broadcastUrl !== undefined)
      writer.tag(17, WireType.LengthDelimited).string(message.broadcastUrl);
    /* optional bool new_player_pool = 18; */
    if (message.newPlayerPool !== undefined)
      writer.tag(18, WireType.Varint).bool(message.newPlayerPool);
    /* optional bool low_pri_pool = 19; */
    if (message.lowPriPool !== undefined)
      writer.tag(19, WireType.Varint).bool(message.lowPriPool);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelServerStaticLobby
 */
export const CSOCitadelServerStaticLobby =
  new CSOCitadelServerStaticLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelServerStaticLobby_Member$Type extends MessageType<CSOCitadelServerStaticLobby_Member> {
  constructor() {
    super("CSOCitadelServerStaticLobby.Member", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "persona_name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "team",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 4,
        name: "player_slot",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "hero_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "party_index",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "platform",
        kind: "enum",
        opt: true,
        T: () => ["EGCPlatform", EGCPlatform],
      },
      {
        no: 8,
        name: "award_ids",
        kind: "enum",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => [
          "CSOCitadelServerStaticLobby.EAwardIDs",
          CSOCitadelServerStaticLobby_EAwardIDs,
        ],
      },
      {
        no: 9,
        name: "is_comms_restricted",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CSOCitadelServerStaticLobby_Member>,
  ): CSOCitadelServerStaticLobby_Member {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.awardIds = [];
    if (value !== undefined)
      reflectionMergePartial<CSOCitadelServerStaticLobby_Member>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelServerStaticLobby_Member,
  ): CSOCitadelServerStaticLobby_Member {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional string persona_name */ 2:
          message.personaName = reader.string();
          break;
        case /* optional ECitadelLobbyTeam team */ 3:
          message.team = reader.int32();
          break;
        case /* optional uint32 player_slot */ 4:
          message.playerSlot = reader.uint32();
          break;
        case /* optional uint32 hero_id */ 5:
          message.heroId = reader.uint32();
          break;
        case /* optional uint32 party_index */ 6:
          message.partyIndex = reader.uint32();
          break;
        case /* optional EGCPlatform platform */ 7:
          message.platform = reader.int32();
          break;
        case /* repeated CSOCitadelServerStaticLobby.EAwardIDs award_ids */ 8:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.awardIds.push(reader.int32());
          else message.awardIds.push(reader.int32());
          break;
        case /* optional bool is_comms_restricted */ 9:
          message.isCommsRestricted = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelServerStaticLobby_Member,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional string persona_name = 2; */
    if (message.personaName !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.personaName);
    /* optional ECitadelLobbyTeam team = 3; */
    if (message.team !== undefined)
      writer.tag(3, WireType.Varint).int32(message.team);
    /* optional uint32 player_slot = 4; */
    if (message.playerSlot !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.playerSlot);
    /* optional uint32 hero_id = 5; */
    if (message.heroId !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.heroId);
    /* optional uint32 party_index = 6; */
    if (message.partyIndex !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.partyIndex);
    /* optional EGCPlatform platform = 7; */
    if (message.platform !== undefined)
      writer.tag(7, WireType.Varint).int32(message.platform);
    /* repeated CSOCitadelServerStaticLobby.EAwardIDs award_ids = 8; */
    for (let i = 0; i < message.awardIds.length; i++)
      writer.tag(8, WireType.Varint).int32(message.awardIds[i]);
    /* optional bool is_comms_restricted = 9; */
    if (message.isCommsRestricted !== undefined)
      writer.tag(9, WireType.Varint).bool(message.isCommsRestricted);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelServerStaticLobby.Member
 */
export const CSOCitadelServerStaticLobby_Member =
  new CSOCitadelServerStaticLobby_Member$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelServerStaticLobby_DevSettings$Type extends MessageType<CSOCitadelServerStaticLobby_DevSettings> {
  constructor() {
    super("CSOCitadelServerStaticLobby.DevSettings", [
      {
        no: 1,
        name: "console_string",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CSOCitadelServerStaticLobby_DevSettings>,
  ): CSOCitadelServerStaticLobby_DevSettings {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CSOCitadelServerStaticLobby_DevSettings>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelServerStaticLobby_DevSettings,
  ): CSOCitadelServerStaticLobby_DevSettings {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string console_string */ 1:
          message.consoleString = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelServerStaticLobby_DevSettings,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string console_string = 1; */
    if (message.consoleString !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.consoleString);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelServerStaticLobby.DevSettings
 */
export const CSOCitadelServerStaticLobby_DevSettings =
  new CSOCitadelServerStaticLobby_DevSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_ServerPerfStats$Type extends MessageType<CMsgServerSignoutData_ServerPerfStats> {
  constructor() {
    super("CMsgServerSignoutData_ServerPerfStats", [
      {
        no: 1,
        name: "peak_memory_bytes",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "end_memory_bytes",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "frame_time_max_micro_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "frame_time_95_micro_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "frame_time_avg_micro_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "frame_idle_time_95_micro_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "frame_idle_time_avg_micro_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "frame_time_80_micro_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "frame_time_99_micro_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "perf_samples",
        kind: "message",
        T: () => CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_ServerPerfStats>,
  ): CMsgServerSignoutData_ServerPerfStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_ServerPerfStats>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_ServerPerfStats,
  ): CMsgServerSignoutData_ServerPerfStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 peak_memory_bytes */ 1:
          message.peakMemoryBytes = reader.uint64().toBigInt();
          break;
        case /* optional uint64 end_memory_bytes */ 2:
          message.endMemoryBytes = reader.uint64().toBigInt();
          break;
        case /* optional uint32 frame_time_max_micro_s */ 3:
          message.frameTimeMaxMicroS = reader.uint32();
          break;
        case /* optional uint32 frame_time_95_micro_s */ 4:
          message.frameTime95MicroS = reader.uint32();
          break;
        case /* optional uint32 frame_time_avg_micro_s */ 5:
          message.frameTimeAvgMicroS = reader.uint32();
          break;
        case /* optional uint32 frame_idle_time_95_micro_s */ 6:
          message.frameIdleTime95MicroS = reader.uint32();
          break;
        case /* optional uint32 frame_idle_time_avg_micro_s */ 7:
          message.frameIdleTimeAvgMicroS = reader.uint32();
          break;
        case /* optional uint32 frame_time_80_micro_s */ 8:
          message.frameTime80MicroS = reader.uint32();
          break;
        case /* optional uint32 frame_time_99_micro_s */ 9:
          message.frameTime99MicroS = reader.uint32();
          break;
        case /* optional CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples perf_samples */ 10:
          message.perfSamples =
            CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.perfSamples,
            );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_ServerPerfStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 peak_memory_bytes = 1; */
    if (message.peakMemoryBytes !== undefined)
      writer.tag(1, WireType.Varint).uint64(message.peakMemoryBytes);
    /* optional uint64 end_memory_bytes = 2; */
    if (message.endMemoryBytes !== undefined)
      writer.tag(2, WireType.Varint).uint64(message.endMemoryBytes);
    /* optional uint32 frame_time_max_micro_s = 3; */
    if (message.frameTimeMaxMicroS !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.frameTimeMaxMicroS);
    /* optional uint32 frame_time_95_micro_s = 4; */
    if (message.frameTime95MicroS !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.frameTime95MicroS);
    /* optional uint32 frame_time_avg_micro_s = 5; */
    if (message.frameTimeAvgMicroS !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.frameTimeAvgMicroS);
    /* optional uint32 frame_idle_time_95_micro_s = 6; */
    if (message.frameIdleTime95MicroS !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.frameIdleTime95MicroS);
    /* optional uint32 frame_idle_time_avg_micro_s = 7; */
    if (message.frameIdleTimeAvgMicroS !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.frameIdleTimeAvgMicroS);
    /* optional uint32 frame_time_80_micro_s = 8; */
    if (message.frameTime80MicroS !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.frameTime80MicroS);
    /* optional uint32 frame_time_99_micro_s = 9; */
    if (message.frameTime99MicroS !== undefined)
      writer.tag(9, WireType.Varint).uint32(message.frameTime99MicroS);
    /* optional CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples perf_samples = 10; */
    if (message.perfSamples)
      CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples.internalBinaryWrite(
        message.perfSamples,
        writer.tag(10, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_ServerPerfStats
 */
export const CMsgServerSignoutData_ServerPerfStats =
  new CMsgServerSignoutData_ServerPerfStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_ServerPerfStats_FrameCounts$Type extends MessageType<CMsgServerSignoutData_ServerPerfStats_FrameCounts> {
  constructor() {
    super("CMsgServerSignoutData_ServerPerfStats.FrameCounts", [
      {
        no: 1,
        name: "num_frames",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "longest_run",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "num_runs",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_ServerPerfStats_FrameCounts>,
  ): CMsgServerSignoutData_ServerPerfStats_FrameCounts {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_ServerPerfStats_FrameCounts>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_ServerPerfStats_FrameCounts,
  ): CMsgServerSignoutData_ServerPerfStats_FrameCounts {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 num_frames */ 1:
          message.numFrames = reader.uint32();
          break;
        case /* optional uint32 longest_run */ 2:
          message.longestRun = reader.uint32();
          break;
        case /* optional uint32 num_runs */ 3:
          message.numRuns = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_ServerPerfStats_FrameCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 num_frames = 1; */
    if (message.numFrames !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.numFrames);
    /* optional uint32 longest_run = 2; */
    if (message.longestRun !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.longestRun);
    /* optional uint32 num_runs = 3; */
    if (message.numRuns !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.numRuns);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_ServerPerfStats.FrameCounts
 */
export const CMsgServerSignoutData_ServerPerfStats_FrameCounts =
  new CMsgServerSignoutData_ServerPerfStats_FrameCounts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_ServerPerfStats_PerfSample$Type extends MessageType<CMsgServerSignoutData_ServerPerfStats_PerfSample> {
  constructor() {
    super("CMsgServerSignoutData_ServerPerfStats.PerfSample", [
      {
        no: 1,
        name: "game_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "avg_frame",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "avg_idle",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 4,
        name: "total_frames",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "performant_frames",
        kind: "message",
        T: () => CMsgServerSignoutData_ServerPerfStats_FrameCounts,
      },
      {
        no: 6,
        name: "long_frames",
        kind: "message",
        T: () => CMsgServerSignoutData_ServerPerfStats_FrameCounts,
      },
      {
        no: 7,
        name: "low_idle_frames",
        kind: "message",
        T: () => CMsgServerSignoutData_ServerPerfStats_FrameCounts,
      },
      {
        no: 8,
        name: "memory_bytes",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 9,
        name: "peak_memory_bytes",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_ServerPerfStats_PerfSample>,
  ): CMsgServerSignoutData_ServerPerfStats_PerfSample {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_ServerPerfStats_PerfSample>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_ServerPerfStats_PerfSample,
  ): CMsgServerSignoutData_ServerPerfStats_PerfSample {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 game_time_s */ 1:
          message.gameTimeS = reader.uint32();
          break;
        case /* optional float avg_frame */ 2:
          message.avgFrame = reader.float();
          break;
        case /* optional float avg_idle */ 3:
          message.avgIdle = reader.float();
          break;
        case /* optional uint32 total_frames */ 4:
          message.totalFrames = reader.uint32();
          break;
        case /* optional CMsgServerSignoutData_ServerPerfStats.FrameCounts performant_frames */ 5:
          message.performantFrames =
            CMsgServerSignoutData_ServerPerfStats_FrameCounts.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.performantFrames,
            );
          break;
        case /* optional CMsgServerSignoutData_ServerPerfStats.FrameCounts long_frames */ 6:
          message.longFrames =
            CMsgServerSignoutData_ServerPerfStats_FrameCounts.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.longFrames,
            );
          break;
        case /* optional CMsgServerSignoutData_ServerPerfStats.FrameCounts low_idle_frames */ 7:
          message.lowIdleFrames =
            CMsgServerSignoutData_ServerPerfStats_FrameCounts.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.lowIdleFrames,
            );
          break;
        case /* optional uint64 memory_bytes */ 8:
          message.memoryBytes = reader.uint64().toBigInt();
          break;
        case /* optional uint64 peak_memory_bytes */ 9:
          message.peakMemoryBytes = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_ServerPerfStats_PerfSample,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 game_time_s = 1; */
    if (message.gameTimeS !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.gameTimeS);
    /* optional float avg_frame = 2; */
    if (message.avgFrame !== undefined)
      writer.tag(2, WireType.Bit32).float(message.avgFrame);
    /* optional float avg_idle = 3; */
    if (message.avgIdle !== undefined)
      writer.tag(3, WireType.Bit32).float(message.avgIdle);
    /* optional uint32 total_frames = 4; */
    if (message.totalFrames !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.totalFrames);
    /* optional CMsgServerSignoutData_ServerPerfStats.FrameCounts performant_frames = 5; */
    if (message.performantFrames)
      CMsgServerSignoutData_ServerPerfStats_FrameCounts.internalBinaryWrite(
        message.performantFrames,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgServerSignoutData_ServerPerfStats.FrameCounts long_frames = 6; */
    if (message.longFrames)
      CMsgServerSignoutData_ServerPerfStats_FrameCounts.internalBinaryWrite(
        message.longFrames,
        writer.tag(6, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgServerSignoutData_ServerPerfStats.FrameCounts low_idle_frames = 7; */
    if (message.lowIdleFrames)
      CMsgServerSignoutData_ServerPerfStats_FrameCounts.internalBinaryWrite(
        message.lowIdleFrames,
        writer.tag(7, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint64 memory_bytes = 8; */
    if (message.memoryBytes !== undefined)
      writer.tag(8, WireType.Varint).uint64(message.memoryBytes);
    /* optional uint64 peak_memory_bytes = 9; */
    if (message.peakMemoryBytes !== undefined)
      writer.tag(9, WireType.Varint).uint64(message.peakMemoryBytes);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_ServerPerfStats.PerfSample
 */
export const CMsgServerSignoutData_ServerPerfStats_PerfSample =
  new CMsgServerSignoutData_ServerPerfStats_PerfSample$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples$Type extends MessageType<CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples> {
  constructor() {
    super("CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples", [
      {
        no: 1,
        name: "long_frame_threshold",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: "low_idle_threshold",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "samples",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_ServerPerfStats_PerfSample,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples>,
  ): CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.samples = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples,
  ): CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional float long_frame_threshold */ 1:
          message.longFrameThreshold = reader.float();
          break;
        case /* optional float low_idle_threshold */ 2:
          message.lowIdleThreshold = reader.float();
          break;
        case /* repeated CMsgServerSignoutData_ServerPerfStats.PerfSample samples */ 3:
          message.samples.push(
            CMsgServerSignoutData_ServerPerfStats_PerfSample.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional float long_frame_threshold = 1; */
    if (message.longFrameThreshold !== undefined)
      writer.tag(1, WireType.Bit32).float(message.longFrameThreshold);
    /* optional float low_idle_threshold = 2; */
    if (message.lowIdleThreshold !== undefined)
      writer.tag(2, WireType.Bit32).float(message.lowIdleThreshold);
    /* repeated CMsgServerSignoutData_ServerPerfStats.PerfSample samples = 3; */
    for (let i = 0; i < message.samples.length; i++)
      CMsgServerSignoutData_ServerPerfStats_PerfSample.internalBinaryWrite(
        message.samples[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples
 */
export const CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples =
  new CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCUpdateMatchInfo$Type extends MessageType<CMsgServerToGCUpdateMatchInfo> {
  constructor() {
    super("CMsgServerToGCUpdateMatchInfo", [
      {
        no: 1,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "kills_team_0",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "kills_team_1",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "net_worth_team_0",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "net_worth_team_1",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "spectators",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "open_spectator_slots",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "objectives_mask_team0",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 10,
        name: "objectives_mask_team1",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCUpdateMatchInfo>,
  ): CMsgServerToGCUpdateMatchInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCUpdateMatchInfo>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCUpdateMatchInfo,
  ): CMsgServerToGCUpdateMatchInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 lobby_id */ 1:
          message.lobbyId = reader.uint64().toBigInt();
          break;
        case /* optional uint32 kills_team_0 */ 3:
          message.killsTeam0 = reader.uint32();
          break;
        case /* optional uint32 kills_team_1 */ 4:
          message.killsTeam1 = reader.uint32();
          break;
        case /* optional uint32 net_worth_team_0 */ 5:
          message.netWorthTeam0 = reader.uint32();
          break;
        case /* optional uint32 net_worth_team_1 */ 6:
          message.netWorthTeam1 = reader.uint32();
          break;
        case /* optional uint32 spectators */ 7:
          message.spectators = reader.uint32();
          break;
        case /* optional uint32 open_spectator_slots */ 8:
          message.openSpectatorSlots = reader.uint32();
          break;
        case /* optional uint64 objectives_mask_team0 */ 9:
          message.objectivesMaskTeam0 = reader.uint64().toBigInt();
          break;
        case /* optional uint64 objectives_mask_team1 */ 10:
          message.objectivesMaskTeam1 = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCUpdateMatchInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 lobby_id = 1; */
    if (message.lobbyId !== undefined)
      writer.tag(1, WireType.Varint).uint64(message.lobbyId);
    /* optional uint32 kills_team_0 = 3; */
    if (message.killsTeam0 !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.killsTeam0);
    /* optional uint32 kills_team_1 = 4; */
    if (message.killsTeam1 !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.killsTeam1);
    /* optional uint32 net_worth_team_0 = 5; */
    if (message.netWorthTeam0 !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.netWorthTeam0);
    /* optional uint32 net_worth_team_1 = 6; */
    if (message.netWorthTeam1 !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.netWorthTeam1);
    /* optional uint32 spectators = 7; */
    if (message.spectators !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.spectators);
    /* optional uint32 open_spectator_slots = 8; */
    if (message.openSpectatorSlots !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.openSpectatorSlots);
    /* optional uint64 objectives_mask_team0 = 9; */
    if (message.objectivesMaskTeam0 !== undefined)
      writer.tag(9, WireType.Varint).uint64(message.objectivesMaskTeam0);
    /* optional uint64 objectives_mask_team1 = 10; */
    if (message.objectivesMaskTeam1 !== undefined)
      writer.tag(10, WireType.Varint).uint64(message.objectivesMaskTeam1);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCUpdateMatchInfo
 */
export const CMsgServerToGCUpdateMatchInfo =
  new CMsgServerToGCUpdateMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCMatchSignoutPermission$Type extends MessageType<CMsgServerToGCMatchSignoutPermission> {
  constructor() {
    super("CMsgServerToGCMatchSignoutPermission", [
      {
        no: 1,
        name: "signout_start",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "permission_request",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "match_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "match_mode",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCMatchSignoutPermission>,
  ): CMsgServerToGCMatchSignoutPermission {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCMatchSignoutPermission>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCMatchSignoutPermission,
  ): CMsgServerToGCMatchSignoutPermission {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 signout_start */ 1:
          message.signoutStart = reader.uint32();
          break;
        case /* optional uint32 permission_request */ 2:
          message.permissionRequest = reader.uint32();
          break;
        case /* optional uint64 match_id */ 3:
          message.matchId = reader.uint64().toBigInt();
          break;
        case /* optional ECitadelMatchMode match_mode */ 4:
          message.matchMode = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCMatchSignoutPermission,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 signout_start = 1; */
    if (message.signoutStart !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.signoutStart);
    /* optional uint32 permission_request = 2; */
    if (message.permissionRequest !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.permissionRequest);
    /* optional uint64 match_id = 3; */
    if (message.matchId !== undefined)
      writer.tag(3, WireType.Varint).uint64(message.matchId);
    /* optional ECitadelMatchMode match_mode = 4; */
    if (message.matchMode !== undefined)
      writer.tag(4, WireType.Varint).int32(message.matchMode);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCMatchSignoutPermission
 */
export const CMsgServerToGCMatchSignoutPermission =
  new CMsgServerToGCMatchSignoutPermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCMatchSignoutPermissionResponse$Type extends MessageType<CMsgServerToGCMatchSignoutPermissionResponse> {
  constructor() {
    super("CMsgServerToGCMatchSignoutPermissionResponse", [
      {
        no: 1,
        name: "can_sign_out",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 2,
        name: "retry_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "requested_data",
        kind: "enum",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => ["EGCServerSignoutData", EGCServerSignoutData],
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCMatchSignoutPermissionResponse>,
  ): CMsgServerToGCMatchSignoutPermissionResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.requestedData = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCMatchSignoutPermissionResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCMatchSignoutPermissionResponse,
  ): CMsgServerToGCMatchSignoutPermissionResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool can_sign_out */ 1:
          message.canSignOut = reader.bool();
          break;
        case /* optional uint32 retry_time_s */ 2:
          message.retryTimeS = reader.uint32();
          break;
        case /* repeated EGCServerSignoutData requested_data */ 3:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.requestedData.push(reader.int32());
          else message.requestedData.push(reader.int32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCMatchSignoutPermissionResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool can_sign_out = 1; */
    if (message.canSignOut !== undefined)
      writer.tag(1, WireType.Varint).bool(message.canSignOut);
    /* optional uint32 retry_time_s = 2; */
    if (message.retryTimeS !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.retryTimeS);
    /* repeated EGCServerSignoutData requested_data = 3; */
    for (let i = 0; i < message.requestedData.length; i++)
      writer.tag(3, WireType.Varint).int32(message.requestedData[i]);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCMatchSignoutPermissionResponse
 */
export const CMsgServerToGCMatchSignoutPermissionResponse =
  new CMsgServerToGCMatchSignoutPermissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_Disconnections$Type extends MessageType<CMsgServerSignoutData_Disconnections> {
  constructor() {
    super("CMsgServerSignoutData_Disconnections", [
      {
        no: 1,
        name: "disconnections",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_Disconnections>,
  ): CMsgServerSignoutData_Disconnections {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.disconnections = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_Disconnections>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_Disconnections,
  ): CMsgServerSignoutData_Disconnections {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection disconnections */ 1:
          message.disconnections.push(
            CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_Disconnections,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection disconnections = 1; */
    for (let i = 0; i < message.disconnections.length; i++)
      CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection.internalBinaryWrite(
        message.disconnections[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_Disconnections
 */
export const CMsgServerSignoutData_Disconnections =
  new CMsgServerSignoutData_Disconnections$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection$Type extends MessageType<CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection> {
  constructor() {
    super("CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "disconnect_time",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "connection_state",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "reason_code",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "reconnect_delay",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "match_disconnect_time",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "match_reconnect_delay",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection>,
  ): CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection,
  ): CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional uint32 disconnect_time */ 2:
          message.disconnectTime = reader.uint32();
          break;
        case /* optional uint32 connection_state */ 3:
          message.connectionState = reader.uint32();
          break;
        case /* optional uint32 reason_code */ 4:
          message.reasonCode = reader.uint32();
          break;
        case /* optional uint32 reconnect_delay */ 5:
          message.reconnectDelay = reader.uint32();
          break;
        case /* optional uint32 match_disconnect_time */ 6:
          message.matchDisconnectTime = reader.uint32();
          break;
        case /* optional uint32 match_reconnect_delay */ 7:
          message.matchReconnectDelay = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional uint32 disconnect_time = 2; */
    if (message.disconnectTime !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.disconnectTime);
    /* optional uint32 connection_state = 3; */
    if (message.connectionState !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.connectionState);
    /* optional uint32 reason_code = 4; */
    if (message.reasonCode !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.reasonCode);
    /* optional uint32 reconnect_delay = 5; */
    if (message.reconnectDelay !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.reconnectDelay);
    /* optional uint32 match_disconnect_time = 6; */
    if (message.matchDisconnectTime !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.matchDisconnectTime);
    /* optional uint32 match_reconnect_delay = 7; */
    if (message.matchReconnectDelay !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.matchReconnectDelay);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection
 */
export const CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection =
  new CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_DetailedStats$Type extends MessageType<CMsgServerSignoutData_DetailedStats> {
  constructor() {
    super("CMsgServerSignoutData_DetailedStats", [
      {
        no: 1,
        name: "player_stats",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_DetailedStats_Player,
      },
      {
        no: 2,
        name: "objectives",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_DetailedStats_Objective,
      },
      {
        no: 3,
        name: "mid_boss",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_DetailedStats_MidBoss,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_DetailedStats>,
  ): CMsgServerSignoutData_DetailedStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.playerStats = [];
    message.objectives = [];
    message.midBoss = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_DetailedStats>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_DetailedStats,
  ): CMsgServerSignoutData_DetailedStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgServerSignoutData_DetailedStats.Player player_stats */ 1:
          message.playerStats.push(
            CMsgServerSignoutData_DetailedStats_Player.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* repeated CMsgServerSignoutData_DetailedStats.Objective objectives */ 2:
          message.objectives.push(
            CMsgServerSignoutData_DetailedStats_Objective.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* repeated CMsgServerSignoutData_DetailedStats.MidBoss mid_boss */ 3:
          message.midBoss.push(
            CMsgServerSignoutData_DetailedStats_MidBoss.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_DetailedStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgServerSignoutData_DetailedStats.Player player_stats = 1; */
    for (let i = 0; i < message.playerStats.length; i++)
      CMsgServerSignoutData_DetailedStats_Player.internalBinaryWrite(
        message.playerStats[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgServerSignoutData_DetailedStats.Objective objectives = 2; */
    for (let i = 0; i < message.objectives.length; i++)
      CMsgServerSignoutData_DetailedStats_Objective.internalBinaryWrite(
        message.objectives[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgServerSignoutData_DetailedStats.MidBoss mid_boss = 3; */
    for (let i = 0; i < message.midBoss.length; i++)
      CMsgServerSignoutData_DetailedStats_MidBoss.internalBinaryWrite(
        message.midBoss[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_DetailedStats
 */
export const CMsgServerSignoutData_DetailedStats =
  new CMsgServerSignoutData_DetailedStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_DetailedStats_Position$Type extends MessageType<CMsgServerSignoutData_DetailedStats_Position> {
  constructor() {
    super("CMsgServerSignoutData_DetailedStats.Position", [
      {
        no: 1,
        name: "x",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: "y",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "z",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_DetailedStats_Position>,
  ): CMsgServerSignoutData_DetailedStats_Position {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_DetailedStats_Position>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_DetailedStats_Position,
  ): CMsgServerSignoutData_DetailedStats_Position {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional float x */ 1:
          message.x = reader.float();
          break;
        case /* optional float y */ 2:
          message.y = reader.float();
          break;
        case /* optional float z */ 3:
          message.z = reader.float();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_DetailedStats_Position,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional float x = 1; */
    if (message.x !== undefined) writer.tag(1, WireType.Bit32).float(message.x);
    /* optional float y = 2; */
    if (message.y !== undefined) writer.tag(2, WireType.Bit32).float(message.y);
    /* optional float z = 3; */
    if (message.z !== undefined) writer.tag(3, WireType.Bit32).float(message.z);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_DetailedStats.Position
 */
export const CMsgServerSignoutData_DetailedStats_Position =
  new CMsgServerSignoutData_DetailedStats_Position$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_DetailedStats_TimeSample$Type extends MessageType<CMsgServerSignoutData_DetailedStats_TimeSample> {
  constructor() {
    super("CMsgServerSignoutData_DetailedStats.TimeSample", [
      {
        no: 1,
        name: "match_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "stats",
        kind: "message",
        T: () => CMsgServerSignoutData_DetailedStats_TimeSample_Stats,
      },
      {
        no: 4,
        name: "gold_stats",
        kind: "message",
        T: () => CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_DetailedStats_TimeSample>,
  ): CMsgServerSignoutData_DetailedStats_TimeSample {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_DetailedStats_TimeSample>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_DetailedStats_TimeSample,
  ): CMsgServerSignoutData_DetailedStats_TimeSample {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 match_time_s */ 1:
          message.matchTimeS = reader.uint32();
          break;
        case /* optional CMsgServerSignoutData_DetailedStats.TimeSample.Stats stats */ 2:
          message.stats =
            CMsgServerSignoutData_DetailedStats_TimeSample_Stats.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.stats,
            );
          break;
        case /* optional CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats gold_stats */ 4:
          message.goldStats =
            CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.goldStats,
            );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_DetailedStats_TimeSample,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 match_time_s = 1; */
    if (message.matchTimeS !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.matchTimeS);
    /* optional CMsgServerSignoutData_DetailedStats.TimeSample.Stats stats = 2; */
    if (message.stats)
      CMsgServerSignoutData_DetailedStats_TimeSample_Stats.internalBinaryWrite(
        message.stats,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats gold_stats = 4; */
    if (message.goldStats)
      CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats.internalBinaryWrite(
        message.goldStats,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_DetailedStats.TimeSample
 */
export const CMsgServerSignoutData_DetailedStats_TimeSample =
  new CMsgServerSignoutData_DetailedStats_TimeSample$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_DetailedStats_TimeSample_Stats$Type extends MessageType<CMsgServerSignoutData_DetailedStats_TimeSample_Stats> {
  constructor() {
    super("CMsgServerSignoutData_DetailedStats.TimeSample.Stats", [
      {
        no: 1,
        name: "net_worth",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "deaths",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "assists",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "possible_creeps",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "creep_kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "neutral_kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "creep_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "neutral_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "boss_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "player_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "denies",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "player_healing",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 14,
        name: "ability_points",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "self_healing",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 16,
        name: "player_damage_taken",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 17,
        name: "max_health",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 18,
        name: "weapon_power",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 19,
        name: "tech_power",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 20,
        name: "shots_hit",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 21,
        name: "shots_missed",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 22,
        name: "damage_absorbed",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 23,
        name: "absorption_provided",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 26,
        name: "heal_prevented",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 27,
        name: "heal_lost",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_DetailedStats_TimeSample_Stats>,
  ): CMsgServerSignoutData_DetailedStats_TimeSample_Stats {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_DetailedStats_TimeSample_Stats>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_DetailedStats_TimeSample_Stats,
  ): CMsgServerSignoutData_DetailedStats_TimeSample_Stats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 net_worth */ 1:
          message.netWorth = reader.uint32();
          break;
        case /* optional uint32 kills */ 2:
          message.kills = reader.uint32();
          break;
        case /* optional uint32 deaths */ 3:
          message.deaths = reader.uint32();
          break;
        case /* optional uint32 assists */ 4:
          message.assists = reader.uint32();
          break;
        case /* optional uint32 possible_creeps */ 5:
          message.possibleCreeps = reader.uint32();
          break;
        case /* optional uint32 creep_kills */ 6:
          message.creepKills = reader.uint32();
          break;
        case /* optional uint32 neutral_kills */ 7:
          message.neutralKills = reader.uint32();
          break;
        case /* optional uint32 creep_damage */ 8:
          message.creepDamage = reader.uint32();
          break;
        case /* optional uint32 neutral_damage */ 9:
          message.neutralDamage = reader.uint32();
          break;
        case /* optional uint32 boss_damage */ 10:
          message.bossDamage = reader.uint32();
          break;
        case /* optional uint32 player_damage */ 11:
          message.playerDamage = reader.uint32();
          break;
        case /* optional uint32 denies */ 12:
          message.denies = reader.uint32();
          break;
        case /* optional uint32 player_healing */ 13:
          message.playerHealing = reader.uint32();
          break;
        case /* optional uint32 ability_points */ 14:
          message.abilityPoints = reader.uint32();
          break;
        case /* optional uint32 self_healing */ 15:
          message.selfHealing = reader.uint32();
          break;
        case /* optional uint32 player_damage_taken */ 16:
          message.playerDamageTaken = reader.uint32();
          break;
        case /* optional uint32 max_health */ 17:
          message.maxHealth = reader.uint32();
          break;
        case /* optional uint32 weapon_power */ 18:
          message.weaponPower = reader.uint32();
          break;
        case /* optional uint32 tech_power */ 19:
          message.techPower = reader.uint32();
          break;
        case /* optional uint32 shots_hit */ 20:
          message.shotsHit = reader.uint32();
          break;
        case /* optional uint32 shots_missed */ 21:
          message.shotsMissed = reader.uint32();
          break;
        case /* optional uint32 damage_absorbed */ 22:
          message.damageAbsorbed = reader.uint32();
          break;
        case /* optional uint32 absorption_provided */ 23:
          message.absorptionProvided = reader.uint32();
          break;
        case /* optional uint32 heal_prevented */ 26:
          message.healPrevented = reader.uint32();
          break;
        case /* optional uint32 heal_lost */ 27:
          message.healLost = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_DetailedStats_TimeSample_Stats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 net_worth = 1; */
    if (message.netWorth !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.netWorth);
    /* optional uint32 kills = 2; */
    if (message.kills !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.kills);
    /* optional uint32 deaths = 3; */
    if (message.deaths !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.deaths);
    /* optional uint32 assists = 4; */
    if (message.assists !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.assists);
    /* optional uint32 possible_creeps = 5; */
    if (message.possibleCreeps !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.possibleCreeps);
    /* optional uint32 creep_kills = 6; */
    if (message.creepKills !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.creepKills);
    /* optional uint32 neutral_kills = 7; */
    if (message.neutralKills !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.neutralKills);
    /* optional uint32 creep_damage = 8; */
    if (message.creepDamage !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.creepDamage);
    /* optional uint32 neutral_damage = 9; */
    if (message.neutralDamage !== undefined)
      writer.tag(9, WireType.Varint).uint32(message.neutralDamage);
    /* optional uint32 boss_damage = 10; */
    if (message.bossDamage !== undefined)
      writer.tag(10, WireType.Varint).uint32(message.bossDamage);
    /* optional uint32 player_damage = 11; */
    if (message.playerDamage !== undefined)
      writer.tag(11, WireType.Varint).uint32(message.playerDamage);
    /* optional uint32 denies = 12; */
    if (message.denies !== undefined)
      writer.tag(12, WireType.Varint).uint32(message.denies);
    /* optional uint32 player_healing = 13; */
    if (message.playerHealing !== undefined)
      writer.tag(13, WireType.Varint).uint32(message.playerHealing);
    /* optional uint32 ability_points = 14; */
    if (message.abilityPoints !== undefined)
      writer.tag(14, WireType.Varint).uint32(message.abilityPoints);
    /* optional uint32 self_healing = 15; */
    if (message.selfHealing !== undefined)
      writer.tag(15, WireType.Varint).uint32(message.selfHealing);
    /* optional uint32 player_damage_taken = 16; */
    if (message.playerDamageTaken !== undefined)
      writer.tag(16, WireType.Varint).uint32(message.playerDamageTaken);
    /* optional uint32 max_health = 17; */
    if (message.maxHealth !== undefined)
      writer.tag(17, WireType.Varint).uint32(message.maxHealth);
    /* optional uint32 weapon_power = 18; */
    if (message.weaponPower !== undefined)
      writer.tag(18, WireType.Varint).uint32(message.weaponPower);
    /* optional uint32 tech_power = 19; */
    if (message.techPower !== undefined)
      writer.tag(19, WireType.Varint).uint32(message.techPower);
    /* optional uint32 shots_hit = 20; */
    if (message.shotsHit !== undefined)
      writer.tag(20, WireType.Varint).uint32(message.shotsHit);
    /* optional uint32 shots_missed = 21; */
    if (message.shotsMissed !== undefined)
      writer.tag(21, WireType.Varint).uint32(message.shotsMissed);
    /* optional uint32 damage_absorbed = 22; */
    if (message.damageAbsorbed !== undefined)
      writer.tag(22, WireType.Varint).uint32(message.damageAbsorbed);
    /* optional uint32 absorption_provided = 23; */
    if (message.absorptionProvided !== undefined)
      writer.tag(23, WireType.Varint).uint32(message.absorptionProvided);
    /* optional uint32 heal_prevented = 26; */
    if (message.healPrevented !== undefined)
      writer.tag(26, WireType.Varint).uint32(message.healPrevented);
    /* optional uint32 heal_lost = 27; */
    if (message.healLost !== undefined)
      writer.tag(27, WireType.Varint).uint32(message.healLost);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_DetailedStats.TimeSample.Stats
 */
export const CMsgServerSignoutData_DetailedStats_TimeSample_Stats =
  new CMsgServerSignoutData_DetailedStats_TimeSample_Stats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats$Type extends MessageType<CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats> {
  constructor() {
    super("CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats", [
      {
        no: 1,
        name: "player",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "player_orb",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "lane_creep_orb",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "neutral_creep_orb",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "boss",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "boss_orb",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "treasure",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "denied",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "death_loss",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "lane_creep",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "neutral_creep",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats>,
  ): CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats,
  ): CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 player */ 1:
          message.player = reader.uint32();
          break;
        case /* optional uint32 player_orb */ 2:
          message.playerOrb = reader.uint32();
          break;
        case /* optional uint32 lane_creep_orb */ 3:
          message.laneCreepOrb = reader.uint32();
          break;
        case /* optional uint32 neutral_creep_orb */ 4:
          message.neutralCreepOrb = reader.uint32();
          break;
        case /* optional uint32 boss */ 5:
          message.boss = reader.uint32();
          break;
        case /* optional uint32 boss_orb */ 6:
          message.bossOrb = reader.uint32();
          break;
        case /* optional uint32 treasure */ 7:
          message.treasure = reader.uint32();
          break;
        case /* optional uint32 denied */ 8:
          message.denied = reader.uint32();
          break;
        case /* optional uint32 death_loss */ 9:
          message.deathLoss = reader.uint32();
          break;
        case /* optional uint32 lane_creep */ 10:
          message.laneCreep = reader.uint32();
          break;
        case /* optional uint32 neutral_creep */ 11:
          message.neutralCreep = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 player = 1; */
    if (message.player !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.player);
    /* optional uint32 player_orb = 2; */
    if (message.playerOrb !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.playerOrb);
    /* optional uint32 lane_creep_orb = 3; */
    if (message.laneCreepOrb !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.laneCreepOrb);
    /* optional uint32 neutral_creep_orb = 4; */
    if (message.neutralCreepOrb !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.neutralCreepOrb);
    /* optional uint32 boss = 5; */
    if (message.boss !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.boss);
    /* optional uint32 boss_orb = 6; */
    if (message.bossOrb !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.bossOrb);
    /* optional uint32 treasure = 7; */
    if (message.treasure !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.treasure);
    /* optional uint32 denied = 8; */
    if (message.denied !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.denied);
    /* optional uint32 death_loss = 9; */
    if (message.deathLoss !== undefined)
      writer.tag(9, WireType.Varint).uint32(message.deathLoss);
    /* optional uint32 lane_creep = 10; */
    if (message.laneCreep !== undefined)
      writer.tag(10, WireType.Varint).uint32(message.laneCreep);
    /* optional uint32 neutral_creep = 11; */
    if (message.neutralCreep !== undefined)
      writer.tag(11, WireType.Varint).uint32(message.neutralCreep);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats
 */
export const CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats =
  new CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_DetailedStats_Objective$Type extends MessageType<CMsgServerSignoutData_DetailedStats_Objective> {
  constructor() {
    super("CMsgServerSignoutData_DetailedStats.Objective", [
      {
        no: 2,
        name: "destroyed_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "creep_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "creep_damage_mitigated",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "player_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "player_damage_mitigated",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "first_damage_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "team_objective_id",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelTeamObjective", ECitadelTeamObjective],
      },
      {
        no: 10,
        name: "team",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_DetailedStats_Objective>,
  ): CMsgServerSignoutData_DetailedStats_Objective {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_DetailedStats_Objective>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_DetailedStats_Objective,
  ): CMsgServerSignoutData_DetailedStats_Objective {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 destroyed_time_s */ 2:
          message.destroyedTimeS = reader.uint32();
          break;
        case /* optional uint32 creep_damage */ 4:
          message.creepDamage = reader.uint32();
          break;
        case /* optional uint32 creep_damage_mitigated */ 5:
          message.creepDamageMitigated = reader.uint32();
          break;
        case /* optional uint32 player_damage */ 6:
          message.playerDamage = reader.uint32();
          break;
        case /* optional uint32 player_damage_mitigated */ 7:
          message.playerDamageMitigated = reader.uint32();
          break;
        case /* optional uint32 first_damage_time_s */ 8:
          message.firstDamageTimeS = reader.uint32();
          break;
        case /* optional ECitadelTeamObjective team_objective_id */ 9:
          message.teamObjectiveId = reader.int32();
          break;
        case /* optional ECitadelLobbyTeam team */ 10:
          message.team = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_DetailedStats_Objective,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 destroyed_time_s = 2; */
    if (message.destroyedTimeS !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.destroyedTimeS);
    /* optional uint32 creep_damage = 4; */
    if (message.creepDamage !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.creepDamage);
    /* optional uint32 creep_damage_mitigated = 5; */
    if (message.creepDamageMitigated !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.creepDamageMitigated);
    /* optional uint32 player_damage = 6; */
    if (message.playerDamage !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.playerDamage);
    /* optional uint32 player_damage_mitigated = 7; */
    if (message.playerDamageMitigated !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.playerDamageMitigated);
    /* optional uint32 first_damage_time_s = 8; */
    if (message.firstDamageTimeS !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.firstDamageTimeS);
    /* optional ECitadelTeamObjective team_objective_id = 9; */
    if (message.teamObjectiveId !== undefined)
      writer.tag(9, WireType.Varint).int32(message.teamObjectiveId);
    /* optional ECitadelLobbyTeam team = 10; */
    if (message.team !== undefined)
      writer.tag(10, WireType.Varint).int32(message.team);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_DetailedStats.Objective
 */
export const CMsgServerSignoutData_DetailedStats_Objective =
  new CMsgServerSignoutData_DetailedStats_Objective$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_DetailedStats_MidBoss$Type extends MessageType<CMsgServerSignoutData_DetailedStats_MidBoss> {
  constructor() {
    super("CMsgServerSignoutData_DetailedStats.MidBoss", [
      {
        no: 1,
        name: "team_killed",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 2,
        name: "team_claimed",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 3,
        name: "destroyed_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_DetailedStats_MidBoss>,
  ): CMsgServerSignoutData_DetailedStats_MidBoss {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_DetailedStats_MidBoss>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_DetailedStats_MidBoss,
  ): CMsgServerSignoutData_DetailedStats_MidBoss {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional ECitadelLobbyTeam team_killed */ 1:
          message.teamKilled = reader.int32();
          break;
        case /* optional ECitadelLobbyTeam team_claimed */ 2:
          message.teamClaimed = reader.int32();
          break;
        case /* optional uint32 destroyed_time_s */ 3:
          message.destroyedTimeS = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_DetailedStats_MidBoss,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional ECitadelLobbyTeam team_killed = 1; */
    if (message.teamKilled !== undefined)
      writer.tag(1, WireType.Varint).int32(message.teamKilled);
    /* optional ECitadelLobbyTeam team_claimed = 2; */
    if (message.teamClaimed !== undefined)
      writer.tag(2, WireType.Varint).int32(message.teamClaimed);
    /* optional uint32 destroyed_time_s = 3; */
    if (message.destroyedTimeS !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.destroyedTimeS);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_DetailedStats.MidBoss
 */
export const CMsgServerSignoutData_DetailedStats_MidBoss =
  new CMsgServerSignoutData_DetailedStats_MidBoss$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_DetailedStats_Player$Type extends MessageType<CMsgServerSignoutData_DetailedStats_Player> {
  constructor() {
    super("CMsgServerSignoutData_DetailedStats.Player", [
      {
        no: 1,
        name: "player_slot",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "time_samples",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_DetailedStats_TimeSample,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_DetailedStats_Player>,
  ): CMsgServerSignoutData_DetailedStats_Player {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.timeSamples = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_DetailedStats_Player>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_DetailedStats_Player,
  ): CMsgServerSignoutData_DetailedStats_Player {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 player_slot */ 1:
          message.playerSlot = reader.uint32();
          break;
        case /* repeated CMsgServerSignoutData_DetailedStats.TimeSample time_samples */ 3:
          message.timeSamples.push(
            CMsgServerSignoutData_DetailedStats_TimeSample.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_DetailedStats_Player,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 player_slot = 1; */
    if (message.playerSlot !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.playerSlot);
    /* repeated CMsgServerSignoutData_DetailedStats.TimeSample time_samples = 3; */
    for (let i = 0; i < message.timeSamples.length; i++)
      CMsgServerSignoutData_DetailedStats_TimeSample.internalBinaryWrite(
        message.timeSamples[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_DetailedStats.Player
 */
export const CMsgServerSignoutData_DetailedStats_Player =
  new CMsgServerSignoutData_DetailedStats_Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_PerfData$Type extends MessageType<CMsgServerSignoutData_PerfData> {
  constructor() {
    super("CMsgServerSignoutData_PerfData", [
      {
        no: 1,
        name: "average_frame_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: "max_frame_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "server_average_frame_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 4,
        name: "server_max_frame_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 5,
        name: "average_compute_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 6,
        name: "max_compute_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 7,
        name: "average_client_tick_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 8,
        name: "max_client_tick_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 9,
        name: "average_client_simulate_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 10,
        name: "max_client_simulate_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 11,
        name: "average_output_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 12,
        name: "max_output_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 13,
        name: "average_wait_for_rendering_to_complete_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 14,
        name: "max_wait_for_rendering_to_complete_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 15,
        name: "average_swap_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 16,
        name: "max_swap_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 17,
        name: "average_frame_update_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 18,
        name: "max_frame_update_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 19,
        name: "average_idle_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 20,
        name: "max_idle_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 21,
        name: "average_input_processing_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 22,
        name: "max_input_processing_time",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_PerfData>,
  ): CMsgServerSignoutData_PerfData {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.averageFrameTime = [];
    message.maxFrameTime = [];
    message.averageComputeTime = [];
    message.maxComputeTime = [];
    message.averageClientTickTime = [];
    message.maxClientTickTime = [];
    message.averageClientSimulateTime = [];
    message.maxClientSimulateTime = [];
    message.averageOutputTime = [];
    message.maxOutputTime = [];
    message.averageWaitForRenderingToCompleteTime = [];
    message.maxWaitForRenderingToCompleteTime = [];
    message.averageSwapTime = [];
    message.maxSwapTime = [];
    message.averageFrameUpdateTime = [];
    message.maxFrameUpdateTime = [];
    message.averageIdleTime = [];
    message.maxIdleTime = [];
    message.averageInputProcessingTime = [];
    message.maxInputProcessingTime = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_PerfData>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_PerfData,
  ): CMsgServerSignoutData_PerfData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated float average_frame_time */ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageFrameTime.push(reader.float());
          else message.averageFrameTime.push(reader.float());
          break;
        case /* repeated float max_frame_time */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxFrameTime.push(reader.float());
          else message.maxFrameTime.push(reader.float());
          break;
        case /* optional float server_average_frame_time */ 3:
          message.serverAverageFrameTime = reader.float();
          break;
        case /* optional float server_max_frame_time */ 4:
          message.serverMaxFrameTime = reader.float();
          break;
        case /* repeated float average_compute_time */ 5:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageComputeTime.push(reader.float());
          else message.averageComputeTime.push(reader.float());
          break;
        case /* repeated float max_compute_time */ 6:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxComputeTime.push(reader.float());
          else message.maxComputeTime.push(reader.float());
          break;
        case /* repeated float average_client_tick_time */ 7:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageClientTickTime.push(reader.float());
          else message.averageClientTickTime.push(reader.float());
          break;
        case /* repeated float max_client_tick_time */ 8:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxClientTickTime.push(reader.float());
          else message.maxClientTickTime.push(reader.float());
          break;
        case /* repeated float average_client_simulate_time */ 9:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageClientSimulateTime.push(reader.float());
          else message.averageClientSimulateTime.push(reader.float());
          break;
        case /* repeated float max_client_simulate_time */ 10:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxClientSimulateTime.push(reader.float());
          else message.maxClientSimulateTime.push(reader.float());
          break;
        case /* repeated float average_output_time */ 11:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageOutputTime.push(reader.float());
          else message.averageOutputTime.push(reader.float());
          break;
        case /* repeated float max_output_time */ 12:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxOutputTime.push(reader.float());
          else message.maxOutputTime.push(reader.float());
          break;
        case /* repeated float average_wait_for_rendering_to_complete_time */ 13:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageWaitForRenderingToCompleteTime.push(
                reader.float(),
              );
          else
            message.averageWaitForRenderingToCompleteTime.push(reader.float());
          break;
        case /* repeated float max_wait_for_rendering_to_complete_time */ 14:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxWaitForRenderingToCompleteTime.push(reader.float());
          else message.maxWaitForRenderingToCompleteTime.push(reader.float());
          break;
        case /* repeated float average_swap_time */ 15:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageSwapTime.push(reader.float());
          else message.averageSwapTime.push(reader.float());
          break;
        case /* repeated float max_swap_time */ 16:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxSwapTime.push(reader.float());
          else message.maxSwapTime.push(reader.float());
          break;
        case /* repeated float average_frame_update_time */ 17:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageFrameUpdateTime.push(reader.float());
          else message.averageFrameUpdateTime.push(reader.float());
          break;
        case /* repeated float max_frame_update_time */ 18:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxFrameUpdateTime.push(reader.float());
          else message.maxFrameUpdateTime.push(reader.float());
          break;
        case /* repeated float average_idle_time */ 19:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageIdleTime.push(reader.float());
          else message.averageIdleTime.push(reader.float());
          break;
        case /* repeated float max_idle_time */ 20:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxIdleTime.push(reader.float());
          else message.maxIdleTime.push(reader.float());
          break;
        case /* repeated float average_input_processing_time */ 21:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.averageInputProcessingTime.push(reader.float());
          else message.averageInputProcessingTime.push(reader.float());
          break;
        case /* repeated float max_input_processing_time */ 22:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.maxInputProcessingTime.push(reader.float());
          else message.maxInputProcessingTime.push(reader.float());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_PerfData,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated float average_frame_time = 1; */
    for (let i = 0; i < message.averageFrameTime.length; i++)
      writer.tag(1, WireType.Bit32).float(message.averageFrameTime[i]);
    /* repeated float max_frame_time = 2; */
    for (let i = 0; i < message.maxFrameTime.length; i++)
      writer.tag(2, WireType.Bit32).float(message.maxFrameTime[i]);
    /* optional float server_average_frame_time = 3; */
    if (message.serverAverageFrameTime !== undefined)
      writer.tag(3, WireType.Bit32).float(message.serverAverageFrameTime);
    /* optional float server_max_frame_time = 4; */
    if (message.serverMaxFrameTime !== undefined)
      writer.tag(4, WireType.Bit32).float(message.serverMaxFrameTime);
    /* repeated float average_compute_time = 5; */
    for (let i = 0; i < message.averageComputeTime.length; i++)
      writer.tag(5, WireType.Bit32).float(message.averageComputeTime[i]);
    /* repeated float max_compute_time = 6; */
    for (let i = 0; i < message.maxComputeTime.length; i++)
      writer.tag(6, WireType.Bit32).float(message.maxComputeTime[i]);
    /* repeated float average_client_tick_time = 7; */
    for (let i = 0; i < message.averageClientTickTime.length; i++)
      writer.tag(7, WireType.Bit32).float(message.averageClientTickTime[i]);
    /* repeated float max_client_tick_time = 8; */
    for (let i = 0; i < message.maxClientTickTime.length; i++)
      writer.tag(8, WireType.Bit32).float(message.maxClientTickTime[i]);
    /* repeated float average_client_simulate_time = 9; */
    for (let i = 0; i < message.averageClientSimulateTime.length; i++)
      writer.tag(9, WireType.Bit32).float(message.averageClientSimulateTime[i]);
    /* repeated float max_client_simulate_time = 10; */
    for (let i = 0; i < message.maxClientSimulateTime.length; i++)
      writer.tag(10, WireType.Bit32).float(message.maxClientSimulateTime[i]);
    /* repeated float average_output_time = 11; */
    for (let i = 0; i < message.averageOutputTime.length; i++)
      writer.tag(11, WireType.Bit32).float(message.averageOutputTime[i]);
    /* repeated float max_output_time = 12; */
    for (let i = 0; i < message.maxOutputTime.length; i++)
      writer.tag(12, WireType.Bit32).float(message.maxOutputTime[i]);
    /* repeated float average_wait_for_rendering_to_complete_time = 13; */
    for (
      let i = 0;
      i < message.averageWaitForRenderingToCompleteTime.length;
      i++
    )
      writer
        .tag(13, WireType.Bit32)
        .float(message.averageWaitForRenderingToCompleteTime[i]);
    /* repeated float max_wait_for_rendering_to_complete_time = 14; */
    for (let i = 0; i < message.maxWaitForRenderingToCompleteTime.length; i++)
      writer
        .tag(14, WireType.Bit32)
        .float(message.maxWaitForRenderingToCompleteTime[i]);
    /* repeated float average_swap_time = 15; */
    for (let i = 0; i < message.averageSwapTime.length; i++)
      writer.tag(15, WireType.Bit32).float(message.averageSwapTime[i]);
    /* repeated float max_swap_time = 16; */
    for (let i = 0; i < message.maxSwapTime.length; i++)
      writer.tag(16, WireType.Bit32).float(message.maxSwapTime[i]);
    /* repeated float average_frame_update_time = 17; */
    for (let i = 0; i < message.averageFrameUpdateTime.length; i++)
      writer.tag(17, WireType.Bit32).float(message.averageFrameUpdateTime[i]);
    /* repeated float max_frame_update_time = 18; */
    for (let i = 0; i < message.maxFrameUpdateTime.length; i++)
      writer.tag(18, WireType.Bit32).float(message.maxFrameUpdateTime[i]);
    /* repeated float average_idle_time = 19; */
    for (let i = 0; i < message.averageIdleTime.length; i++)
      writer.tag(19, WireType.Bit32).float(message.averageIdleTime[i]);
    /* repeated float max_idle_time = 20; */
    for (let i = 0; i < message.maxIdleTime.length; i++)
      writer.tag(20, WireType.Bit32).float(message.maxIdleTime[i]);
    /* repeated float average_input_processing_time = 21; */
    for (let i = 0; i < message.averageInputProcessingTime.length; i++)
      writer
        .tag(21, WireType.Bit32)
        .float(message.averageInputProcessingTime[i]);
    /* repeated float max_input_processing_time = 22; */
    for (let i = 0; i < message.maxInputProcessingTime.length; i++)
      writer.tag(22, WireType.Bit32).float(message.maxInputProcessingTime[i]);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_PerfData
 */
export const CMsgServerSignoutData_PerfData =
  new CMsgServerSignoutData_PerfData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_BookRewards$Type extends MessageType<CMsgServerSignoutData_BookRewards> {
  constructor() {
    super("CMsgServerSignoutData_BookRewards", [
      {
        no: 1,
        name: "account_rewards",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_BookRewards_AccountRewards,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_BookRewards>,
  ): CMsgServerSignoutData_BookRewards {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.accountRewards = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_BookRewards>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_BookRewards,
  ): CMsgServerSignoutData_BookRewards {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgServerSignoutData_BookRewards.AccountRewards account_rewards */ 1:
          message.accountRewards.push(
            CMsgServerSignoutData_BookRewards_AccountRewards.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_BookRewards,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgServerSignoutData_BookRewards.AccountRewards account_rewards = 1; */
    for (let i = 0; i < message.accountRewards.length; i++)
      CMsgServerSignoutData_BookRewards_AccountRewards.internalBinaryWrite(
        message.accountRewards[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_BookRewards
 */
export const CMsgServerSignoutData_BookRewards =
  new CMsgServerSignoutData_BookRewards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_BookRewards_BookReward$Type extends MessageType<CMsgServerSignoutData_BookRewards_BookReward> {
  constructor() {
    super("CMsgServerSignoutData_BookRewards.BookReward", [
      {
        no: 1,
        name: "book_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "xp_reward",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_BookRewards_BookReward>,
  ): CMsgServerSignoutData_BookRewards_BookReward {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_BookRewards_BookReward>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_BookRewards_BookReward,
  ): CMsgServerSignoutData_BookRewards_BookReward {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 book_id */ 1:
          message.bookId = reader.uint32();
          break;
        case /* optional uint32 xp_reward */ 2:
          message.xpReward = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_BookRewards_BookReward,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 book_id = 1; */
    if (message.bookId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.bookId);
    /* optional uint32 xp_reward = 2; */
    if (message.xpReward !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.xpReward);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_BookRewards.BookReward
 */
export const CMsgServerSignoutData_BookRewards_BookReward =
  new CMsgServerSignoutData_BookRewards_BookReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_BookRewards_AccountRewards$Type extends MessageType<CMsgServerSignoutData_BookRewards_AccountRewards> {
  constructor() {
    super("CMsgServerSignoutData_BookRewards.AccountRewards", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "book_reward",
        kind: "message",
        T: () => CMsgServerSignoutData_BookRewards_BookReward,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_BookRewards_AccountRewards>,
  ): CMsgServerSignoutData_BookRewards_AccountRewards {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_BookRewards_AccountRewards>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_BookRewards_AccountRewards,
  ): CMsgServerSignoutData_BookRewards_AccountRewards {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional CMsgServerSignoutData_BookRewards.BookReward book_reward */ 2:
          message.bookReward =
            CMsgServerSignoutData_BookRewards_BookReward.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.bookReward,
            );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_BookRewards_AccountRewards,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional CMsgServerSignoutData_BookRewards.BookReward book_reward = 2; */
    if (message.bookReward)
      CMsgServerSignoutData_BookRewards_BookReward.internalBinaryWrite(
        message.bookReward,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_BookRewards.AccountRewards
 */
export const CMsgServerSignoutData_BookRewards_AccountRewards =
  new CMsgServerSignoutData_BookRewards_AccountRewards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_AccountStatChanges$Type extends MessageType<CMsgServerSignoutData_AccountStatChanges> {
  constructor() {
    super("CMsgServerSignoutData_AccountStatChanges", [
      {
        no: 1,
        name: "account_stats",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_AccountStatChanges_AccountStats,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_AccountStatChanges>,
  ): CMsgServerSignoutData_AccountStatChanges {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.accountStats = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_AccountStatChanges>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_AccountStatChanges,
  ): CMsgServerSignoutData_AccountStatChanges {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgServerSignoutData_AccountStatChanges.AccountStats account_stats */ 1:
          message.accountStats.push(
            CMsgServerSignoutData_AccountStatChanges_AccountStats.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_AccountStatChanges,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgServerSignoutData_AccountStatChanges.AccountStats account_stats = 1; */
    for (let i = 0; i < message.accountStats.length; i++)
      CMsgServerSignoutData_AccountStatChanges_AccountStats.internalBinaryWrite(
        message.accountStats[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_AccountStatChanges
 */
export const CMsgServerSignoutData_AccountStatChanges =
  new CMsgServerSignoutData_AccountStatChanges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_AccountStatChanges_Stat$Type extends MessageType<CMsgServerSignoutData_AccountStatChanges_Stat> {
  constructor() {
    super("CMsgServerSignoutData_AccountStatChanges.Stat", [
      {
        no: 1,
        name: "hero_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "stat_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "value",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "medal",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelAccountStatMedal", ECitadelAccountStatMedal],
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_AccountStatChanges_Stat>,
  ): CMsgServerSignoutData_AccountStatChanges_Stat {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_AccountStatChanges_Stat>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_AccountStatChanges_Stat,
  ): CMsgServerSignoutData_AccountStatChanges_Stat {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 hero_id */ 1:
          message.heroId = reader.uint32();
          break;
        case /* optional uint32 stat_id */ 2:
          message.statId = reader.uint32();
          break;
        case /* optional uint32 value */ 3:
          message.value = reader.uint32();
          break;
        case /* optional ECitadelAccountStatMedal medal */ 4:
          message.medal = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_AccountStatChanges_Stat,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 hero_id = 1; */
    if (message.heroId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.heroId);
    /* optional uint32 stat_id = 2; */
    if (message.statId !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.statId);
    /* optional uint32 value = 3; */
    if (message.value !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.value);
    /* optional ECitadelAccountStatMedal medal = 4; */
    if (message.medal !== undefined)
      writer.tag(4, WireType.Varint).int32(message.medal);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_AccountStatChanges.Stat
 */
export const CMsgServerSignoutData_AccountStatChanges_Stat =
  new CMsgServerSignoutData_AccountStatChanges_Stat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_AccountStatChanges_AccountStats$Type extends MessageType<CMsgServerSignoutData_AccountStatChanges_AccountStats> {
  constructor() {
    super("CMsgServerSignoutData_AccountStatChanges.AccountStats", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "stats",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_AccountStatChanges_Stat,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_AccountStatChanges_AccountStats>,
  ): CMsgServerSignoutData_AccountStatChanges_AccountStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.stats = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_AccountStatChanges_AccountStats>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_AccountStatChanges_AccountStats,
  ): CMsgServerSignoutData_AccountStatChanges_AccountStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* repeated CMsgServerSignoutData_AccountStatChanges.Stat stats */ 2:
          message.stats.push(
            CMsgServerSignoutData_AccountStatChanges_Stat.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_AccountStatChanges_AccountStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* repeated CMsgServerSignoutData_AccountStatChanges.Stat stats = 2; */
    for (let i = 0; i < message.stats.length; i++)
      CMsgServerSignoutData_AccountStatChanges_Stat.internalBinaryWrite(
        message.stats[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_AccountStatChanges.AccountStats
 */
export const CMsgServerSignoutData_AccountStatChanges_AccountStats =
  new CMsgServerSignoutData_AccountStatChanges_AccountStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_PlayerChat$Type extends MessageType<CMsgServerSignoutData_PlayerChat> {
  constructor() {
    super("CMsgServerSignoutData_PlayerChat", [
      {
        no: 1,
        name: "chat_lines",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_PlayerChat_ChatLine,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_PlayerChat>,
  ): CMsgServerSignoutData_PlayerChat {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.chatLines = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_PlayerChat>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_PlayerChat,
  ): CMsgServerSignoutData_PlayerChat {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgServerSignoutData_PlayerChat.ChatLine chat_lines */ 1:
          message.chatLines.push(
            CMsgServerSignoutData_PlayerChat_ChatLine.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_PlayerChat,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgServerSignoutData_PlayerChat.ChatLine chat_lines = 1; */
    for (let i = 0; i < message.chatLines.length; i++)
      CMsgServerSignoutData_PlayerChat_ChatLine.internalBinaryWrite(
        message.chatLines[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_PlayerChat
 */
export const CMsgServerSignoutData_PlayerChat =
  new CMsgServerSignoutData_PlayerChat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_PlayerChat_ChatLine$Type extends MessageType<CMsgServerSignoutData_PlayerChat_ChatLine> {
  constructor() {
    super("CMsgServerSignoutData_PlayerChat.ChatLine", [
      {
        no: 1,
        name: "player_slot",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "game_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "team_only",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 4,
        name: "chat_line",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_PlayerChat_ChatLine>,
  ): CMsgServerSignoutData_PlayerChat_ChatLine {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_PlayerChat_ChatLine>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_PlayerChat_ChatLine,
  ): CMsgServerSignoutData_PlayerChat_ChatLine {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 player_slot */ 1:
          message.playerSlot = reader.uint32();
          break;
        case /* optional float game_time */ 2:
          message.gameTime = reader.float();
          break;
        case /* optional bool team_only */ 3:
          message.teamOnly = reader.bool();
          break;
        case /* optional string chat_line */ 4:
          message.chatLine = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_PlayerChat_ChatLine,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 player_slot = 1; */
    if (message.playerSlot !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.playerSlot);
    /* optional float game_time = 2; */
    if (message.gameTime !== undefined)
      writer.tag(2, WireType.Bit32).float(message.gameTime);
    /* optional bool team_only = 3; */
    if (message.teamOnly !== undefined)
      writer.tag(3, WireType.Varint).bool(message.teamOnly);
    /* optional string chat_line = 4; */
    if (message.chatLine !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.chatLine);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_PlayerChat.ChatLine
 */
export const CMsgServerSignoutData_PlayerChat_ChatLine =
  new CMsgServerSignoutData_PlayerChat_ChatLine$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_PenalizedPlayers$Type extends MessageType<CMsgServerSignoutData_PenalizedPlayers> {
  constructor() {
    super("CMsgServerSignoutData_PenalizedPlayers", [
      {
        no: 1,
        name: "penalized_players",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerSignoutData_PenalizedPlayers_Penalty,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_PenalizedPlayers>,
  ): CMsgServerSignoutData_PenalizedPlayers {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.penalizedPlayers = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_PenalizedPlayers>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_PenalizedPlayers,
  ): CMsgServerSignoutData_PenalizedPlayers {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgServerSignoutData_PenalizedPlayers.Penalty penalized_players */ 1:
          message.penalizedPlayers.push(
            CMsgServerSignoutData_PenalizedPlayers_Penalty.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_PenalizedPlayers,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgServerSignoutData_PenalizedPlayers.Penalty penalized_players = 1; */
    for (let i = 0; i < message.penalizedPlayers.length; i++)
      CMsgServerSignoutData_PenalizedPlayers_Penalty.internalBinaryWrite(
        message.penalizedPlayers[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_PenalizedPlayers
 */
export const CMsgServerSignoutData_PenalizedPlayers =
  new CMsgServerSignoutData_PenalizedPlayers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerSignoutData_PenalizedPlayers_Penalty$Type extends MessageType<CMsgServerSignoutData_PenalizedPlayers_Penalty> {
  constructor() {
    super("CMsgServerSignoutData_PenalizedPlayers.Penalty", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "reason",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason",
          CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason,
        ],
      },
      {
        no: 3,
        name: "match_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "time_stamp",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerSignoutData_PenalizedPlayers_Penalty>,
  ): CMsgServerSignoutData_PenalizedPlayers_Penalty {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerSignoutData_PenalizedPlayers_Penalty>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerSignoutData_PenalizedPlayers_Penalty,
  ): CMsgServerSignoutData_PenalizedPlayers_Penalty {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason reason */ 2:
          message.reason = reader.int32();
          break;
        case /* optional uint32 match_time_s */ 3:
          message.matchTimeS = reader.uint32();
          break;
        case /* optional uint32 time_stamp */ 4:
          message.timeStamp = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerSignoutData_PenalizedPlayers_Penalty,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason reason = 2; */
    if (message.reason !== undefined)
      writer.tag(2, WireType.Varint).int32(message.reason);
    /* optional uint32 match_time_s = 3; */
    if (message.matchTimeS !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.matchTimeS);
    /* optional uint32 time_stamp = 4; */
    if (message.timeStamp !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.timeStamp);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerSignoutData_PenalizedPlayers.Penalty
 */
export const CMsgServerSignoutData_PenalizedPlayers_Penalty =
  new CMsgServerSignoutData_PenalizedPlayers_Penalty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchData$Type extends MessageType<CMsgMatchData> {
  constructor() {
    super("CMsgMatchData", [
      {
        no: 1,
        name: "match_duration_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "end_reason",
        kind: "enum",
        opt: true,
        T: () => ["CMsgMatchData.EEndReason", CMsgMatchData_EEndReason],
      },
      {
        no: 3,
        name: "winning_team",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 4,
        name: "players",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchData_PlayerInfo,
      },
      {
        no: 5,
        name: "objectives_mask_legacy",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "server_version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "game_mode",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 8,
        name: "match_mode",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 9,
        name: "objectives_mask_team0",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 10,
        name: "objectives_mask_team1",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 11,
        name: "match_end_time",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "stomp_score",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 13,
        name: "safe_to_abandon",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 14,
        name: "team_abandon",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 15,
        name: "new_player_pool",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 16,
        name: "low_pri_pool",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchData>): CMsgMatchData {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.players = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgMatchData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchData,
  ): CMsgMatchData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 match_duration_s */ 1:
          message.matchDurationS = reader.uint32();
          break;
        case /* optional CMsgMatchData.EEndReason end_reason */ 2:
          message.endReason = reader.int32();
          break;
        case /* optional ECitadelLobbyTeam winning_team */ 3:
          message.winningTeam = reader.int32();
          break;
        case /* repeated CMsgMatchData.PlayerInfo players */ 4:
          message.players.push(
            CMsgMatchData_PlayerInfo.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* optional uint32 objectives_mask_legacy */ 5:
          message.objectivesMaskLegacy = reader.uint32();
          break;
        case /* optional uint32 server_version */ 6:
          message.serverVersion = reader.uint32();
          break;
        case /* optional ECitadelGameMode game_mode */ 7:
          message.gameMode = reader.int32();
          break;
        case /* optional ECitadelMatchMode match_mode */ 8:
          message.matchMode = reader.int32();
          break;
        case /* optional uint64 objectives_mask_team0 */ 9:
          message.objectivesMaskTeam0 = reader.uint64().toBigInt();
          break;
        case /* optional uint64 objectives_mask_team1 */ 10:
          message.objectivesMaskTeam1 = reader.uint64().toBigInt();
          break;
        case /* optional uint32 match_end_time */ 11:
          message.matchEndTime = reader.uint32();
          break;
        case /* optional float stomp_score */ 12:
          message.stompScore = reader.float();
          break;
        case /* optional bool safe_to_abandon */ 13:
          message.safeToAbandon = reader.bool();
          break;
        case /* optional bool team_abandon */ 14:
          message.teamAbandon = reader.bool();
          break;
        case /* optional bool new_player_pool */ 15:
          message.newPlayerPool = reader.bool();
          break;
        case /* optional bool low_pri_pool */ 16:
          message.lowPriPool = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchData,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 match_duration_s = 1; */
    if (message.matchDurationS !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.matchDurationS);
    /* optional CMsgMatchData.EEndReason end_reason = 2; */
    if (message.endReason !== undefined)
      writer.tag(2, WireType.Varint).int32(message.endReason);
    /* optional ECitadelLobbyTeam winning_team = 3; */
    if (message.winningTeam !== undefined)
      writer.tag(3, WireType.Varint).int32(message.winningTeam);
    /* repeated CMsgMatchData.PlayerInfo players = 4; */
    for (let i = 0; i < message.players.length; i++)
      CMsgMatchData_PlayerInfo.internalBinaryWrite(
        message.players[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 objectives_mask_legacy = 5; */
    if (message.objectivesMaskLegacy !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.objectivesMaskLegacy);
    /* optional uint32 server_version = 6; */
    if (message.serverVersion !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.serverVersion);
    /* optional ECitadelGameMode game_mode = 7; */
    if (message.gameMode !== undefined)
      writer.tag(7, WireType.Varint).int32(message.gameMode);
    /* optional ECitadelMatchMode match_mode = 8; */
    if (message.matchMode !== undefined)
      writer.tag(8, WireType.Varint).int32(message.matchMode);
    /* optional uint64 objectives_mask_team0 = 9; */
    if (message.objectivesMaskTeam0 !== undefined)
      writer.tag(9, WireType.Varint).uint64(message.objectivesMaskTeam0);
    /* optional uint64 objectives_mask_team1 = 10; */
    if (message.objectivesMaskTeam1 !== undefined)
      writer.tag(10, WireType.Varint).uint64(message.objectivesMaskTeam1);
    /* optional uint32 match_end_time = 11; */
    if (message.matchEndTime !== undefined)
      writer.tag(11, WireType.Varint).uint32(message.matchEndTime);
    /* optional float stomp_score = 12; */
    if (message.stompScore !== undefined)
      writer.tag(12, WireType.Bit32).float(message.stompScore);
    /* optional bool safe_to_abandon = 13; */
    if (message.safeToAbandon !== undefined)
      writer.tag(13, WireType.Varint).bool(message.safeToAbandon);
    /* optional bool team_abandon = 14; */
    if (message.teamAbandon !== undefined)
      writer.tag(14, WireType.Varint).bool(message.teamAbandon);
    /* optional bool new_player_pool = 15; */
    if (message.newPlayerPool !== undefined)
      writer.tag(15, WireType.Varint).bool(message.newPlayerPool);
    /* optional bool low_pri_pool = 16; */
    if (message.lowPriPool !== undefined)
      writer.tag(16, WireType.Varint).bool(message.lowPriPool);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchData
 */
export const CMsgMatchData = new CMsgMatchData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchData_PlayerItem$Type extends MessageType<CMsgMatchData_PlayerItem> {
  constructor() {
    super("CMsgMatchData.PlayerItem", [
      {
        no: 1,
        name: "item_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "game_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "upgrade_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "sold_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "flags",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "imbued_ability_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgMatchData_PlayerItem>,
  ): CMsgMatchData_PlayerItem {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgMatchData_PlayerItem>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchData_PlayerItem,
  ): CMsgMatchData_PlayerItem {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 item_id */ 1:
          message.itemId = reader.uint32();
          break;
        case /* optional uint32 game_time_s */ 2:
          message.gameTimeS = reader.uint32();
          break;
        case /* optional uint32 upgrade_id */ 3:
          message.upgradeId = reader.uint32();
          break;
        case /* optional uint32 sold_time_s */ 4:
          message.soldTimeS = reader.uint32();
          break;
        case /* optional uint32 flags */ 5:
          message.flags = reader.uint32();
          break;
        case /* optional uint32 imbued_ability_id */ 6:
          message.imbuedAbilityId = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchData_PlayerItem,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 item_id = 1; */
    if (message.itemId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.itemId);
    /* optional uint32 game_time_s = 2; */
    if (message.gameTimeS !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.gameTimeS);
    /* optional uint32 upgrade_id = 3; */
    if (message.upgradeId !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.upgradeId);
    /* optional uint32 sold_time_s = 4; */
    if (message.soldTimeS !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.soldTimeS);
    /* optional uint32 flags = 5; */
    if (message.flags !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.flags);
    /* optional uint32 imbued_ability_id = 6; */
    if (message.imbuedAbilityId !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.imbuedAbilityId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchData.PlayerItem
 */
export const CMsgMatchData_PlayerItem = new CMsgMatchData_PlayerItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchData_PlayerInfo$Type extends MessageType<CMsgMatchData_PlayerInfo> {
  constructor() {
    super("CMsgMatchData.PlayerInfo", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "team",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 3,
        name: "player_slot",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "player_mmr",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "player_uncertainty",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "hero_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "deaths",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "net_worth",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "assists",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "hero_mmr",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "items",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchData_PlayerItem,
      },
      {
        no: 14,
        name: "gpm_10min",
        kind: "scalar",
        jsonName: "gpm10min",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "gpm_15min",
        kind: "scalar",
        jsonName: "gpm15min",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 16,
        name: "gpm_20min",
        kind: "scalar",
        jsonName: "gpm20min",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 17,
        name: "gpm_25min",
        kind: "scalar",
        jsonName: "gpm25min",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 18,
        name: "gpm_30min",
        kind: "scalar",
        jsonName: "gpm30min",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 19,
        name: "gpm_35min",
        kind: "scalar",
        jsonName: "gpm35min",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 20,
        name: "gpm_end",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 21,
        name: "last_hits",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 22,
        name: "denies",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 23,
        name: "ability_points",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 24,
        name: "level",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 25,
        name: "assigned_lane",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 26,
        name: "party_index",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 27,
        name: "platform",
        kind: "enum",
        opt: true,
        T: () => ["EGCPlatform", EGCPlatform],
      },
      {
        no: 28,
        name: "ability_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 29,
        name: "bullet_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 30,
        name: "hero_bullets_hit",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 31,
        name: "hero_bullets_hit_crit",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 32,
        name: "player_healing",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 33,
        name: "hero_bullets_fired",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 34,
        name: "hero_incoming_bullets_fired",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 35,
        name: "hero_incoming_bullets_hit",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 36,
        name: "hero_incoming_bullets_crit",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 37,
        name: "time_dead_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 38,
        name: "player_bullet_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 39,
        name: "player_ability_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 40,
        name: "player_melee_damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 41,
        name: "abandon_match_time_s",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 42,
        name: "abandon_time_stamp",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 43,
        name: "trooper_kill_excluded",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgMatchData_PlayerInfo>,
  ): CMsgMatchData_PlayerInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.items = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgMatchData_PlayerInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchData_PlayerInfo,
  ): CMsgMatchData_PlayerInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional ECitadelLobbyTeam team */ 2:
          message.team = reader.int32();
          break;
        case /* optional uint32 player_slot */ 3:
          message.playerSlot = reader.uint32();
          break;
        case /* optional uint32 player_mmr */ 5:
          message.playerMmr = reader.uint32();
          break;
        case /* optional uint32 player_uncertainty */ 6:
          message.playerUncertainty = reader.uint32();
          break;
        case /* optional uint32 hero_id */ 7:
          message.heroId = reader.uint32();
          break;
        case /* optional uint32 kills */ 8:
          message.kills = reader.uint32();
          break;
        case /* optional uint32 deaths */ 9:
          message.deaths = reader.uint32();
          break;
        case /* optional uint32 net_worth */ 10:
          message.netWorth = reader.uint32();
          break;
        case /* optional uint32 assists */ 11:
          message.assists = reader.uint32();
          break;
        case /* optional uint32 hero_mmr */ 12:
          message.heroMmr = reader.uint32();
          break;
        case /* repeated CMsgMatchData.PlayerItem items */ 13:
          message.items.push(
            CMsgMatchData_PlayerItem.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* optional uint32 gpm_10min = 14 [json_name = "gpm10min"];*/ 14:
          message.gpm10Min = reader.uint32();
          break;
        case /* optional uint32 gpm_15min = 15 [json_name = "gpm15min"];*/ 15:
          message.gpm15Min = reader.uint32();
          break;
        case /* optional uint32 gpm_20min = 16 [json_name = "gpm20min"];*/ 16:
          message.gpm20Min = reader.uint32();
          break;
        case /* optional uint32 gpm_25min = 17 [json_name = "gpm25min"];*/ 17:
          message.gpm25Min = reader.uint32();
          break;
        case /* optional uint32 gpm_30min = 18 [json_name = "gpm30min"];*/ 18:
          message.gpm30Min = reader.uint32();
          break;
        case /* optional uint32 gpm_35min = 19 [json_name = "gpm35min"];*/ 19:
          message.gpm35Min = reader.uint32();
          break;
        case /* optional uint32 gpm_end */ 20:
          message.gpmEnd = reader.uint32();
          break;
        case /* optional uint32 last_hits */ 21:
          message.lastHits = reader.uint32();
          break;
        case /* optional uint32 denies */ 22:
          message.denies = reader.uint32();
          break;
        case /* optional uint32 ability_points */ 23:
          message.abilityPoints = reader.uint32();
          break;
        case /* optional uint32 level */ 24:
          message.level = reader.uint32();
          break;
        case /* optional uint32 assigned_lane */ 25:
          message.assignedLane = reader.uint32();
          break;
        case /* optional uint32 party_index */ 26:
          message.partyIndex = reader.uint32();
          break;
        case /* optional EGCPlatform platform */ 27:
          message.platform = reader.int32();
          break;
        case /* optional uint32 ability_damage */ 28:
          message.abilityDamage = reader.uint32();
          break;
        case /* optional uint32 bullet_damage */ 29:
          message.bulletDamage = reader.uint32();
          break;
        case /* optional uint32 hero_bullets_hit */ 30:
          message.heroBulletsHit = reader.uint32();
          break;
        case /* optional uint32 hero_bullets_hit_crit */ 31:
          message.heroBulletsHitCrit = reader.uint32();
          break;
        case /* optional uint32 player_healing */ 32:
          message.playerHealing = reader.uint32();
          break;
        case /* optional uint32 hero_bullets_fired */ 33:
          message.heroBulletsFired = reader.uint32();
          break;
        case /* optional uint32 hero_incoming_bullets_fired */ 34:
          message.heroIncomingBulletsFired = reader.uint32();
          break;
        case /* optional uint32 hero_incoming_bullets_hit */ 35:
          message.heroIncomingBulletsHit = reader.uint32();
          break;
        case /* optional uint32 hero_incoming_bullets_crit */ 36:
          message.heroIncomingBulletsCrit = reader.uint32();
          break;
        case /* optional uint32 time_dead_s */ 37:
          message.timeDeadS = reader.uint32();
          break;
        case /* optional uint32 player_bullet_damage */ 38:
          message.playerBulletDamage = reader.uint32();
          break;
        case /* optional uint32 player_ability_damage */ 39:
          message.playerAbilityDamage = reader.uint32();
          break;
        case /* optional uint32 player_melee_damage */ 40:
          message.playerMeleeDamage = reader.uint32();
          break;
        case /* optional uint32 abandon_match_time_s */ 41:
          message.abandonMatchTimeS = reader.uint32();
          break;
        case /* optional uint32 abandon_time_stamp */ 42:
          message.abandonTimeStamp = reader.uint32();
          break;
        case /* optional uint32 trooper_kill_excluded */ 43:
          message.trooperKillExcluded = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchData_PlayerInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional ECitadelLobbyTeam team = 2; */
    if (message.team !== undefined)
      writer.tag(2, WireType.Varint).int32(message.team);
    /* optional uint32 player_slot = 3; */
    if (message.playerSlot !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.playerSlot);
    /* optional uint32 player_mmr = 5; */
    if (message.playerMmr !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.playerMmr);
    /* optional uint32 player_uncertainty = 6; */
    if (message.playerUncertainty !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.playerUncertainty);
    /* optional uint32 hero_id = 7; */
    if (message.heroId !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.heroId);
    /* optional uint32 kills = 8; */
    if (message.kills !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.kills);
    /* optional uint32 deaths = 9; */
    if (message.deaths !== undefined)
      writer.tag(9, WireType.Varint).uint32(message.deaths);
    /* optional uint32 net_worth = 10; */
    if (message.netWorth !== undefined)
      writer.tag(10, WireType.Varint).uint32(message.netWorth);
    /* optional uint32 assists = 11; */
    if (message.assists !== undefined)
      writer.tag(11, WireType.Varint).uint32(message.assists);
    /* optional uint32 hero_mmr = 12; */
    if (message.heroMmr !== undefined)
      writer.tag(12, WireType.Varint).uint32(message.heroMmr);
    /* repeated CMsgMatchData.PlayerItem items = 13; */
    for (let i = 0; i < message.items.length; i++)
      CMsgMatchData_PlayerItem.internalBinaryWrite(
        message.items[i],
        writer.tag(13, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 gpm_10min = 14 [json_name = "gpm10min"]; */
    if (message.gpm10Min !== undefined)
      writer.tag(14, WireType.Varint).uint32(message.gpm10Min);
    /* optional uint32 gpm_15min = 15 [json_name = "gpm15min"]; */
    if (message.gpm15Min !== undefined)
      writer.tag(15, WireType.Varint).uint32(message.gpm15Min);
    /* optional uint32 gpm_20min = 16 [json_name = "gpm20min"]; */
    if (message.gpm20Min !== undefined)
      writer.tag(16, WireType.Varint).uint32(message.gpm20Min);
    /* optional uint32 gpm_25min = 17 [json_name = "gpm25min"]; */
    if (message.gpm25Min !== undefined)
      writer.tag(17, WireType.Varint).uint32(message.gpm25Min);
    /* optional uint32 gpm_30min = 18 [json_name = "gpm30min"]; */
    if (message.gpm30Min !== undefined)
      writer.tag(18, WireType.Varint).uint32(message.gpm30Min);
    /* optional uint32 gpm_35min = 19 [json_name = "gpm35min"]; */
    if (message.gpm35Min !== undefined)
      writer.tag(19, WireType.Varint).uint32(message.gpm35Min);
    /* optional uint32 gpm_end = 20; */
    if (message.gpmEnd !== undefined)
      writer.tag(20, WireType.Varint).uint32(message.gpmEnd);
    /* optional uint32 last_hits = 21; */
    if (message.lastHits !== undefined)
      writer.tag(21, WireType.Varint).uint32(message.lastHits);
    /* optional uint32 denies = 22; */
    if (message.denies !== undefined)
      writer.tag(22, WireType.Varint).uint32(message.denies);
    /* optional uint32 ability_points = 23; */
    if (message.abilityPoints !== undefined)
      writer.tag(23, WireType.Varint).uint32(message.abilityPoints);
    /* optional uint32 level = 24; */
    if (message.level !== undefined)
      writer.tag(24, WireType.Varint).uint32(message.level);
    /* optional uint32 assigned_lane = 25; */
    if (message.assignedLane !== undefined)
      writer.tag(25, WireType.Varint).uint32(message.assignedLane);
    /* optional uint32 party_index = 26; */
    if (message.partyIndex !== undefined)
      writer.tag(26, WireType.Varint).uint32(message.partyIndex);
    /* optional EGCPlatform platform = 27; */
    if (message.platform !== undefined)
      writer.tag(27, WireType.Varint).int32(message.platform);
    /* optional uint32 ability_damage = 28; */
    if (message.abilityDamage !== undefined)
      writer.tag(28, WireType.Varint).uint32(message.abilityDamage);
    /* optional uint32 bullet_damage = 29; */
    if (message.bulletDamage !== undefined)
      writer.tag(29, WireType.Varint).uint32(message.bulletDamage);
    /* optional uint32 hero_bullets_hit = 30; */
    if (message.heroBulletsHit !== undefined)
      writer.tag(30, WireType.Varint).uint32(message.heroBulletsHit);
    /* optional uint32 hero_bullets_hit_crit = 31; */
    if (message.heroBulletsHitCrit !== undefined)
      writer.tag(31, WireType.Varint).uint32(message.heroBulletsHitCrit);
    /* optional uint32 player_healing = 32; */
    if (message.playerHealing !== undefined)
      writer.tag(32, WireType.Varint).uint32(message.playerHealing);
    /* optional uint32 hero_bullets_fired = 33; */
    if (message.heroBulletsFired !== undefined)
      writer.tag(33, WireType.Varint).uint32(message.heroBulletsFired);
    /* optional uint32 hero_incoming_bullets_fired = 34; */
    if (message.heroIncomingBulletsFired !== undefined)
      writer.tag(34, WireType.Varint).uint32(message.heroIncomingBulletsFired);
    /* optional uint32 hero_incoming_bullets_hit = 35; */
    if (message.heroIncomingBulletsHit !== undefined)
      writer.tag(35, WireType.Varint).uint32(message.heroIncomingBulletsHit);
    /* optional uint32 hero_incoming_bullets_crit = 36; */
    if (message.heroIncomingBulletsCrit !== undefined)
      writer.tag(36, WireType.Varint).uint32(message.heroIncomingBulletsCrit);
    /* optional uint32 time_dead_s = 37; */
    if (message.timeDeadS !== undefined)
      writer.tag(37, WireType.Varint).uint32(message.timeDeadS);
    /* optional uint32 player_bullet_damage = 38; */
    if (message.playerBulletDamage !== undefined)
      writer.tag(38, WireType.Varint).uint32(message.playerBulletDamage);
    /* optional uint32 player_ability_damage = 39; */
    if (message.playerAbilityDamage !== undefined)
      writer.tag(39, WireType.Varint).uint32(message.playerAbilityDamage);
    /* optional uint32 player_melee_damage = 40; */
    if (message.playerMeleeDamage !== undefined)
      writer.tag(40, WireType.Varint).uint32(message.playerMeleeDamage);
    /* optional uint32 abandon_match_time_s = 41; */
    if (message.abandonMatchTimeS !== undefined)
      writer.tag(41, WireType.Varint).uint32(message.abandonMatchTimeS);
    /* optional uint32 abandon_time_stamp = 42; */
    if (message.abandonTimeStamp !== undefined)
      writer.tag(42, WireType.Varint).uint32(message.abandonTimeStamp);
    /* optional uint32 trooper_kill_excluded = 43; */
    if (message.trooperKillExcluded !== undefined)
      writer.tag(43, WireType.Varint).uint32(message.trooperKillExcluded);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchData.PlayerInfo
 */
export const CMsgMatchData_PlayerInfo = new CMsgMatchData_PlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCMatchSignout$Type extends MessageType<CMsgServerToGCMatchSignout> {
  constructor() {
    super("CMsgServerToGCMatchSignout", [
      {
        no: 1,
        name: "additional_data",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CExtraMsgBlock,
      },
      {
        no: 2,
        name: "signout_attempt",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "match_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 9,
        name: "cluster_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      { no: 10, name: "match_data", kind: "message", T: () => CMsgMatchData },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCMatchSignout>,
  ): CMsgServerToGCMatchSignout {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.additionalData = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCMatchSignout>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCMatchSignout,
  ): CMsgServerToGCMatchSignout {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CExtraMsgBlock additional_data */ 1:
          message.additionalData.push(
            CExtraMsgBlock.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 signout_attempt */ 2:
          message.signoutAttempt = reader.uint32();
          break;
        case /* optional uint64 lobby_id */ 3:
          message.lobbyId = reader.uint64().toBigInt();
          break;
        case /* optional uint64 match_id */ 4:
          message.matchId = reader.uint64().toBigInt();
          break;
        case /* optional uint32 cluster_id */ 9:
          message.clusterId = reader.uint32();
          break;
        case /* optional CMsgMatchData match_data */ 10:
          message.matchData = CMsgMatchData.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.matchData,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCMatchSignout,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CExtraMsgBlock additional_data = 1; */
    for (let i = 0; i < message.additionalData.length; i++)
      CExtraMsgBlock.internalBinaryWrite(
        message.additionalData[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 signout_attempt = 2; */
    if (message.signoutAttempt !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.signoutAttempt);
    /* optional uint64 lobby_id = 3; */
    if (message.lobbyId !== undefined)
      writer.tag(3, WireType.Varint).uint64(message.lobbyId);
    /* optional uint64 match_id = 4; */
    if (message.matchId !== undefined)
      writer.tag(4, WireType.Varint).uint64(message.matchId);
    /* optional uint32 cluster_id = 9; */
    if (message.clusterId !== undefined)
      writer.tag(9, WireType.Varint).uint32(message.clusterId);
    /* optional CMsgMatchData match_data = 10; */
    if (message.matchData)
      CMsgMatchData.internalBinaryWrite(
        message.matchData,
        writer.tag(10, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCMatchSignout
 */
export const CMsgServerToGCMatchSignout = new CMsgServerToGCMatchSignout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCMatchSignoutResponse$Type extends MessageType<CMsgServerToGCMatchSignoutResponse> {
  constructor() {
    super("CMsgServerToGCMatchSignoutResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgServerToGCMatchSignoutResponse.ESignoutResult",
          CMsgServerToGCMatchSignoutResponse_ESignoutResult,
        ],
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCMatchSignoutResponse>,
  ): CMsgServerToGCMatchSignoutResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCMatchSignoutResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCMatchSignoutResponse,
  ): CMsgServerToGCMatchSignoutResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgServerToGCMatchSignoutResponse.ESignoutResult result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCMatchSignoutResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgServerToGCMatchSignoutResponse.ESignoutResult result = 1; */
    if (message.result !== undefined)
      writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCMatchSignoutResponse
 */
export const CMsgServerToGCMatchSignoutResponse =
  new CMsgServerToGCMatchSignoutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerWelcomeCitadel$Type extends MessageType<CMsgServerWelcomeCitadel> {
  constructor() {
    super("CMsgServerWelcomeCitadel", []);
  }
  create(
    value?: PartialMessage<CMsgServerWelcomeCitadel>,
  ): CMsgServerWelcomeCitadel {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerWelcomeCitadel>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerWelcomeCitadel,
  ): CMsgServerWelcomeCitadel {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgServerWelcomeCitadel,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerWelcomeCitadel
 */
export const CMsgServerWelcomeCitadel = new CMsgServerWelcomeCitadel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCIdlePing$Type extends MessageType<CMsgServerToGCIdlePing> {
  constructor() {
    super("CMsgServerToGCIdlePing", [
      {
        no: 1,
        name: "server_version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCIdlePing>,
  ): CMsgServerToGCIdlePing {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCIdlePing>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCIdlePing,
  ): CMsgServerToGCIdlePing {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 server_version */ 1:
          message.serverVersion = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCIdlePing,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 server_version = 1; */
    if (message.serverVersion !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.serverVersion);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCIdlePing
 */
export const CMsgServerToGCIdlePing = new CMsgServerToGCIdlePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToServerRequestPing$Type extends MessageType<CMsgGCToServerRequestPing> {
  constructor() {
    super("CMsgGCToServerRequestPing", []);
  }
  create(
    value?: PartialMessage<CMsgGCToServerRequestPing>,
  ): CMsgGCToServerRequestPing {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToServerRequestPing>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToServerRequestPing,
  ): CMsgGCToServerRequestPing {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgGCToServerRequestPing,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToServerRequestPing
 */
export const CMsgGCToServerRequestPing = new CMsgGCToServerRequestPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToServerAllocateForMatch$Type extends MessageType<CMsgGCToServerAllocateForMatch> {
  constructor() {
    super("CMsgGCToServerAllocateForMatch", [
      {
        no: 1,
        name: "match_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToServerAllocateForMatch>,
  ): CMsgGCToServerAllocateForMatch {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToServerAllocateForMatch>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToServerAllocateForMatch,
  ): CMsgGCToServerAllocateForMatch {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 match_id */ 1:
          message.matchId = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToServerAllocateForMatch,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 match_id = 1; */
    if (message.matchId !== undefined)
      writer.tag(1, WireType.Varint).uint64(message.matchId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToServerAllocateForMatch
 */
export const CMsgGCToServerAllocateForMatch =
  new CMsgGCToServerAllocateForMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToServerAllocateForMatchResponse$Type extends MessageType<CMsgGCToServerAllocateForMatchResponse> {
  constructor() {
    super("CMsgGCToServerAllocateForMatchResponse", [
      {
        no: 1,
        name: "success",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToServerAllocateForMatchResponse>,
  ): CMsgGCToServerAllocateForMatchResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToServerAllocateForMatchResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToServerAllocateForMatchResponse,
  ): CMsgGCToServerAllocateForMatchResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool success */ 1:
          message.success = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToServerAllocateForMatchResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool success = 1; */
    if (message.success !== undefined)
      writer.tag(1, WireType.Varint).bool(message.success);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToServerAllocateForMatchResponse
 */
export const CMsgGCToServerAllocateForMatchResponse =
  new CMsgGCToServerAllocateForMatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCEnterMatchmaking$Type extends MessageType<CMsgServerToGCEnterMatchmaking> {
  constructor() {
    super("CMsgServerToGCEnterMatchmaking", [
      {
        no: 1,
        name: "server_version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "search_key",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "region_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "cluster_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "server_public_ip",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "server_private_ip",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "server_port",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "sdr_address",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCEnterMatchmaking>,
  ): CMsgServerToGCEnterMatchmaking {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCEnterMatchmaking>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCEnterMatchmaking,
  ): CMsgServerToGCEnterMatchmaking {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 server_version */ 1:
          message.serverVersion = reader.uint32();
          break;
        case /* optional string search_key */ 2:
          message.searchKey = reader.string();
          break;
        case /* optional uint32 region_id */ 3:
          message.regionId = reader.uint32();
          break;
        case /* optional uint32 cluster_id */ 4:
          message.clusterId = reader.uint32();
          break;
        case /* optional uint32 server_public_ip */ 5:
          message.serverPublicIp = reader.uint32();
          break;
        case /* optional uint32 server_private_ip */ 6:
          message.serverPrivateIp = reader.uint32();
          break;
        case /* optional uint32 server_port */ 7:
          message.serverPort = reader.uint32();
          break;
        case /* optional bytes sdr_address */ 9:
          message.sdrAddress = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCEnterMatchmaking,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 server_version = 1; */
    if (message.serverVersion !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.serverVersion);
    /* optional string search_key = 2; */
    if (message.searchKey !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.searchKey);
    /* optional uint32 region_id = 3; */
    if (message.regionId !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.regionId);
    /* optional uint32 cluster_id = 4; */
    if (message.clusterId !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.clusterId);
    /* optional uint32 server_public_ip = 5; */
    if (message.serverPublicIp !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.serverPublicIp);
    /* optional uint32 server_private_ip = 6; */
    if (message.serverPrivateIp !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.serverPrivateIp);
    /* optional uint32 server_port = 7; */
    if (message.serverPort !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.serverPort);
    /* optional bytes sdr_address = 9; */
    if (message.sdrAddress !== undefined)
      writer.tag(9, WireType.LengthDelimited).bytes(message.sdrAddress);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCEnterMatchmaking
 */
export const CMsgServerToGCEnterMatchmaking =
  new CMsgServerToGCEnterMatchmaking$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToServerCancelAllocateForMatch$Type extends MessageType<CMsgGCToServerCancelAllocateForMatch> {
  constructor() {
    super("CMsgGCToServerCancelAllocateForMatch", [
      {
        no: 1,
        name: "match_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToServerCancelAllocateForMatch>,
  ): CMsgGCToServerCancelAllocateForMatch {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToServerCancelAllocateForMatch>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToServerCancelAllocateForMatch,
  ): CMsgGCToServerCancelAllocateForMatch {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 match_id */ 1:
          message.matchId = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToServerCancelAllocateForMatch,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 match_id = 1; */
    if (message.matchId !== undefined)
      writer.tag(1, WireType.Varint).uint64(message.matchId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToServerCancelAllocateForMatch
 */
export const CMsgGCToServerCancelAllocateForMatch =
  new CMsgGCToServerCancelAllocateForMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCUpdateLobbyServerState$Type extends MessageType<CMsgServerToGCUpdateLobbyServerState> {
  constructor() {
    super("CMsgServerToGCUpdateLobbyServerState", [
      {
        no: 1,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "server_state",
        kind: "enum",
        opt: true,
        T: () => ["ELobbyServerState", ELobbyServerState],
      },
      {
        no: 3,
        name: "safe_to_abandon",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCUpdateLobbyServerState>,
  ): CMsgServerToGCUpdateLobbyServerState {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCUpdateLobbyServerState>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCUpdateLobbyServerState,
  ): CMsgServerToGCUpdateLobbyServerState {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 lobby_id */ 1:
          message.lobbyId = reader.uint64().toBigInt();
          break;
        case /* optional ELobbyServerState server_state */ 2:
          message.serverState = reader.int32();
          break;
        case /* optional bool safe_to_abandon */ 3:
          message.safeToAbandon = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCUpdateLobbyServerState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 lobby_id = 1; */
    if (message.lobbyId !== undefined)
      writer.tag(1, WireType.Varint).uint64(message.lobbyId);
    /* optional ELobbyServerState server_state = 2; */
    if (message.serverState !== undefined)
      writer.tag(2, WireType.Varint).int32(message.serverState);
    /* optional bool safe_to_abandon = 3; */
    if (message.safeToAbandon !== undefined)
      writer.tag(3, WireType.Varint).bool(message.safeToAbandon);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCUpdateLobbyServerState
 */
export const CMsgServerToGCUpdateLobbyServerState =
  new CMsgServerToGCUpdateLobbyServerState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCAbandonMatch$Type extends MessageType<CMsgServerToGCAbandonMatch> {
  constructor() {
    super("CMsgServerToGCAbandonMatch", [
      {
        no: 1,
        name: "server_steam_id",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "cluster_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "reason_code",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgServerToGCAbandonMatch.EReason",
          CMsgServerToGCAbandonMatch_EReason,
        ],
      },
      {
        no: 5,
        name: "additional_data",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 6,
        name: "match_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 8,
        name: "players",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgServerToGCAbandonMatch_Player,
      },
      {
        no: 9,
        name: "public_ip_address",
        kind: "scalar",
        opt: true,
        T: 7 /*ScalarType.FIXED32*/,
      },
      {
        no: 10,
        name: "port",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "server_version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "pid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "instance_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 14,
        name: "private_ip_address",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "match_mode",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 16,
        name: "game_mode",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 17,
        name: "was_server_shutdown",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCAbandonMatch>,
  ): CMsgServerToGCAbandonMatch {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.players = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCAbandonMatch>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCAbandonMatch,
  ): CMsgServerToGCAbandonMatch {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 server_steam_id */ 1:
          message.serverSteamId = reader.fixed64().toBigInt();
          break;
        case /* optional fixed64 lobby_id */ 2:
          message.lobbyId = reader.fixed64().toBigInt();
          break;
        case /* optional uint32 cluster_id */ 3:
          message.clusterId = reader.uint32();
          break;
        case /* optional CMsgServerToGCAbandonMatch.EReason reason_code */ 4:
          message.reasonCode = reader.int32();
          break;
        case /* optional uint64 additional_data */ 5:
          message.additionalData = reader.uint64().toBigInt();
          break;
        case /* optional uint64 match_id */ 6:
          message.matchId = reader.uint64().toBigInt();
          break;
        case /* repeated CMsgServerToGCAbandonMatch.Player players */ 8:
          message.players.push(
            CMsgServerToGCAbandonMatch_Player.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* optional fixed32 public_ip_address */ 9:
          message.publicIpAddress = reader.fixed32();
          break;
        case /* optional uint32 port */ 10:
          message.port = reader.uint32();
          break;
        case /* optional uint32 server_version */ 11:
          message.serverVersion = reader.uint32();
          break;
        case /* optional uint32 pid */ 12:
          message.pid = reader.uint32();
          break;
        case /* optional uint32 instance_id */ 13:
          message.instanceId = reader.uint32();
          break;
        case /* optional uint32 private_ip_address */ 14:
          message.privateIpAddress = reader.uint32();
          break;
        case /* optional ECitadelMatchMode match_mode */ 15:
          message.matchMode = reader.int32();
          break;
        case /* optional ECitadelGameMode game_mode */ 16:
          message.gameMode = reader.int32();
          break;
        case /* optional bool was_server_shutdown */ 17:
          message.wasServerShutdown = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCAbandonMatch,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 server_steam_id = 1; */
    if (message.serverSteamId !== undefined)
      writer.tag(1, WireType.Bit64).fixed64(message.serverSteamId);
    /* optional fixed64 lobby_id = 2; */
    if (message.lobbyId !== undefined)
      writer.tag(2, WireType.Bit64).fixed64(message.lobbyId);
    /* optional uint32 cluster_id = 3; */
    if (message.clusterId !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.clusterId);
    /* optional CMsgServerToGCAbandonMatch.EReason reason_code = 4; */
    if (message.reasonCode !== undefined)
      writer.tag(4, WireType.Varint).int32(message.reasonCode);
    /* optional uint64 additional_data = 5; */
    if (message.additionalData !== undefined)
      writer.tag(5, WireType.Varint).uint64(message.additionalData);
    /* optional uint64 match_id = 6; */
    if (message.matchId !== undefined)
      writer.tag(6, WireType.Varint).uint64(message.matchId);
    /* repeated CMsgServerToGCAbandonMatch.Player players = 8; */
    for (let i = 0; i < message.players.length; i++)
      CMsgServerToGCAbandonMatch_Player.internalBinaryWrite(
        message.players[i],
        writer.tag(8, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional fixed32 public_ip_address = 9; */
    if (message.publicIpAddress !== undefined)
      writer.tag(9, WireType.Bit32).fixed32(message.publicIpAddress);
    /* optional uint32 port = 10; */
    if (message.port !== undefined)
      writer.tag(10, WireType.Varint).uint32(message.port);
    /* optional uint32 server_version = 11; */
    if (message.serverVersion !== undefined)
      writer.tag(11, WireType.Varint).uint32(message.serverVersion);
    /* optional uint32 pid = 12; */
    if (message.pid !== undefined)
      writer.tag(12, WireType.Varint).uint32(message.pid);
    /* optional uint32 instance_id = 13; */
    if (message.instanceId !== undefined)
      writer.tag(13, WireType.Varint).uint32(message.instanceId);
    /* optional uint32 private_ip_address = 14; */
    if (message.privateIpAddress !== undefined)
      writer.tag(14, WireType.Varint).uint32(message.privateIpAddress);
    /* optional ECitadelMatchMode match_mode = 15; */
    if (message.matchMode !== undefined)
      writer.tag(15, WireType.Varint).int32(message.matchMode);
    /* optional ECitadelGameMode game_mode = 16; */
    if (message.gameMode !== undefined)
      writer.tag(16, WireType.Varint).int32(message.gameMode);
    /* optional bool was_server_shutdown = 17; */
    if (message.wasServerShutdown !== undefined)
      writer.tag(17, WireType.Varint).bool(message.wasServerShutdown);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCAbandonMatch
 */
export const CMsgServerToGCAbandonMatch = new CMsgServerToGCAbandonMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCAbandonMatch_Player$Type extends MessageType<CMsgServerToGCAbandonMatch_Player> {
  constructor() {
    super("CMsgServerToGCAbandonMatch.Player", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "additional_data",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "hero_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCAbandonMatch_Player>,
  ): CMsgServerToGCAbandonMatch_Player {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCAbandonMatch_Player>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCAbandonMatch_Player,
  ): CMsgServerToGCAbandonMatch_Player {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.accountId = reader.uint32();
          break;
        case /* optional uint64 additional_data */ 2:
          message.additionalData = reader.uint64().toBigInt();
          break;
        case /* optional uint32 hero_id */ 3:
          message.heroId = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCAbandonMatch_Player,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.accountId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.accountId);
    /* optional uint64 additional_data = 2; */
    if (message.additionalData !== undefined)
      writer.tag(2, WireType.Varint).uint64(message.additionalData);
    /* optional uint32 hero_id = 3; */
    if (message.heroId !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.heroId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCAbandonMatch.Player
 */
export const CMsgServerToGCAbandonMatch_Player =
  new CMsgServerToGCAbandonMatch_Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCAbandonMatchResponse$Type extends MessageType<CMsgServerToGCAbandonMatchResponse> {
  constructor() {
    super("CMsgServerToGCAbandonMatchResponse", []);
  }
  create(
    value?: PartialMessage<CMsgServerToGCAbandonMatchResponse>,
  ): CMsgServerToGCAbandonMatchResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCAbandonMatchResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCAbandonMatchResponse,
  ): CMsgServerToGCAbandonMatchResponse {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgServerToGCAbandonMatchResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCAbandonMatchResponse
 */
export const CMsgServerToGCAbandonMatchResponse =
  new CMsgServerToGCAbandonMatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCTestConnection$Type extends MessageType<CMsgServerToGCTestConnection> {
  constructor() {
    super("CMsgServerToGCTestConnection", []);
  }
  create(
    value?: PartialMessage<CMsgServerToGCTestConnection>,
  ): CMsgServerToGCTestConnection {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCTestConnection>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCTestConnection,
  ): CMsgServerToGCTestConnection {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgServerToGCTestConnection,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCTestConnection
 */
export const CMsgServerToGCTestConnection =
  new CMsgServerToGCTestConnection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerToGCTestConnectionResponse$Type extends MessageType<CMsgServerToGCTestConnectionResponse> {
  constructor() {
    super("CMsgServerToGCTestConnectionResponse", [
      {
        no: 1,
        name: "state",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgServerToGCTestConnectionResponse>,
  ): CMsgServerToGCTestConnectionResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgServerToGCTestConnectionResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgServerToGCTestConnectionResponse,
  ): CMsgServerToGCTestConnectionResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 state */ 1:
          message.state = reader.uint32();
          break;
        case /* optional uint64 lobby_id */ 2:
          message.lobbyId = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgServerToGCTestConnectionResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 state = 1; */
    if (message.state !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.state);
    /* optional uint64 lobby_id = 2; */
    if (message.lobbyId !== undefined)
      writer.tag(2, WireType.Varint).uint64(message.lobbyId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgServerToGCTestConnectionResponse
 */
export const CMsgServerToGCTestConnectionResponse =
  new CMsgServerToGCTestConnectionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToServerSetServerConVar$Type extends MessageType<CMsgGCToServerSetServerConVar> {
  constructor() {
    super("CMsgGCToServerSetServerConVar", [
      {
        no: 1,
        name: "convar_name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "convar_value",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToServerSetServerConVar>,
  ): CMsgGCToServerSetServerConVar {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToServerSetServerConVar>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToServerSetServerConVar,
  ): CMsgGCToServerSetServerConVar {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string convar_name */ 1:
          message.convarName = reader.string();
          break;
        case /* optional string convar_value */ 2:
          message.convarValue = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToServerSetServerConVar,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string convar_name = 1; */
    if (message.convarName !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.convarName);
    /* optional string convar_value = 2; */
    if (message.convarValue !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.convarValue);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToServerSetServerConVar
 */
export const CMsgGCToServerSetServerConVar =
  new CMsgGCToServerSetServerConVar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToServerSetServerConVarResponse$Type extends MessageType<CMsgGCToServerSetServerConVarResponse> {
  constructor() {
    super("CMsgGCToServerSetServerConVarResponse", [
      {
        no: 1,
        name: "success",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToServerSetServerConVarResponse>,
  ): CMsgGCToServerSetServerConVarResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToServerSetServerConVarResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToServerSetServerConVarResponse,
  ): CMsgGCToServerSetServerConVarResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool success */ 1:
          message.success = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToServerSetServerConVarResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool success = 1; */
    if (message.success !== undefined)
      writer.tag(1, WireType.Varint).bool(message.success);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToServerSetServerConVarResponse
 */
export const CMsgGCToServerSetServerConVarResponse =
  new CMsgGCToServerSetServerConVarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToServerAddSpectator$Type extends MessageType<CMsgGCToServerAddSpectator> {
  constructor() {
    super("CMsgGCToServerAddSpectator", [
      {
        no: 1,
        name: "lobby_id",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "account_to_spectate",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToServerAddSpectator>,
  ): CMsgGCToServerAddSpectator {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToServerAddSpectator>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToServerAddSpectator,
  ): CMsgGCToServerAddSpectator {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 lobby_id */ 1:
          message.lobbyId = reader.uint64().toBigInt();
          break;
        case /* optional uint32 account_id */ 2:
          message.accountId = reader.uint32();
          break;
        case /* optional uint32 account_to_spectate */ 3:
          message.accountToSpectate = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToServerAddSpectator,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 lobby_id = 1; */
    if (message.lobbyId !== undefined)
      writer.tag(1, WireType.Varint).uint64(message.lobbyId);
    /* optional uint32 account_id = 2; */
    if (message.accountId !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.accountId);
    /* optional uint32 account_to_spectate = 3; */
    if (message.accountToSpectate !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.accountToSpectate);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToServerAddSpectator
 */
export const CMsgGCToServerAddSpectator = new CMsgGCToServerAddSpectator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToServerAddSpectatorResponse$Type extends MessageType<CMsgGCToServerAddSpectatorResponse> {
  constructor() {
    super("CMsgGCToServerAddSpectatorResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgGCToServerAddSpectatorResponse.EResponse",
          CMsgGCToServerAddSpectatorResponse_EResponse,
        ],
      },
      {
        no: 2,
        name: "requesting_account_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToServerAddSpectatorResponse>,
  ): CMsgGCToServerAddSpectatorResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToServerAddSpectatorResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToServerAddSpectatorResponse,
  ): CMsgGCToServerAddSpectatorResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgGCToServerAddSpectatorResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        case /* optional uint32 requesting_account_id */ 2:
          message.requestingAccountId = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToServerAddSpectatorResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgGCToServerAddSpectatorResponse.EResponse result = 1; */
    if (message.result !== undefined)
      writer.tag(1, WireType.Varint).int32(message.result);
    /* optional uint32 requesting_account_id = 2; */
    if (message.requestingAccountId !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.requestingAccountId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToServerAddSpectatorResponse
 */
export const CMsgGCToServerAddSpectatorResponse =
  new CMsgGCToServerAddSpectatorResponse$Type();
