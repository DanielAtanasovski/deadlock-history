// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "steammessages_player.steamworkssdk.proto" (syntax proto2)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CPlayer_GetMutualFriendsForIncomingInvites_Request
 */
export interface CPlayer_GetMutualFriendsForIncomingInvites_Request {
}
/**
 * @generated from protobuf message CPlayer_IncomingInviteMutualFriendList
 */
export interface CPlayer_IncomingInviteMutualFriendList {
    /**
     * @generated from protobuf field: optional fixed64 steamid = 1;
     */
    steamid?: bigint;
    /**
     * @generated from protobuf field: repeated uint32 mutual_friend_account_ids = 2;
     */
    mutualFriendAccountIds: number[];
}
/**
 * @generated from protobuf message CPlayer_GetMutualFriendsForIncomingInvites_Response
 */
export interface CPlayer_GetMutualFriendsForIncomingInvites_Response {
    /**
     * @generated from protobuf field: repeated CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
     */
    incomingInviteMutualFriendsLists: CPlayer_IncomingInviteMutualFriendList[];
}
/**
 * @generated from protobuf message CPlayer_GetFriendsGameplayInfo_Request
 */
export interface CPlayer_GetFriendsGameplayInfo_Request {
    /**
     * @generated from protobuf field: optional uint32 appid = 1;
     */
    appid?: number;
}
/**
 * @generated from protobuf message CPlayer_GetFriendsGameplayInfo_Response
 */
export interface CPlayer_GetFriendsGameplayInfo_Response {
    /**
     * @generated from protobuf field: optional CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
     */
    yourInfo?: CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo;
    /**
     * @generated from protobuf field: repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
     */
    inGame: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
    /**
     * @generated from protobuf field: repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
     */
    playedRecently: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
    /**
     * @generated from protobuf field: repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
     */
    playedEver: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
    /**
     * @generated from protobuf field: repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
     */
    owns: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
    /**
     * @generated from protobuf field: repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
     */
    inWishlist: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
}
/**
 * @generated from protobuf message CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
 */
export interface CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
    /**
     * @generated from protobuf field: optional fixed64 steamid = 1;
     */
    steamid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 minutes_played = 2;
     */
    minutesPlayed?: number;
    /**
     * @generated from protobuf field: optional uint32 minutes_played_forever = 3;
     */
    minutesPlayedForever?: number;
}
/**
 * @generated from protobuf message CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
 */
export interface CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
    /**
     * @generated from protobuf field: optional fixed64 steamid = 1;
     */
    steamid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 minutes_played = 2;
     */
    minutesPlayed?: number;
    /**
     * @generated from protobuf field: optional uint32 minutes_played_forever = 3;
     */
    minutesPlayedForever?: number;
    /**
     * @generated from protobuf field: optional bool in_wishlist = 4;
     */
    inWishlist?: boolean;
    /**
     * @generated from protobuf field: optional bool owned = 5;
     */
    owned?: boolean;
}
/**
 * @generated from protobuf message CPlayer_GetGameBadgeLevels_Request
 */
export interface CPlayer_GetGameBadgeLevels_Request {
    /**
     * @generated from protobuf field: optional uint32 appid = 1;
     */
    appid?: number;
}
/**
 * @generated from protobuf message CPlayer_GetGameBadgeLevels_Response
 */
export interface CPlayer_GetGameBadgeLevels_Response {
    /**
     * @generated from protobuf field: optional uint32 player_level = 1;
     */
    playerLevel?: number;
    /**
     * @generated from protobuf field: repeated CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
     */
    badges: CPlayer_GetGameBadgeLevels_Response_Badge[];
}
/**
 * @generated from protobuf message CPlayer_GetGameBadgeLevels_Response.Badge
 */
export interface CPlayer_GetGameBadgeLevels_Response_Badge {
    /**
     * @generated from protobuf field: optional int32 level = 1;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional int32 series = 2;
     */
    series?: number;
    /**
     * @generated from protobuf field: optional uint32 border_color = 3;
     */
    borderColor?: number;
}
/**
 * @generated from protobuf message CPlayer_GetLastPlayedTimes_Request
 */
export interface CPlayer_GetLastPlayedTimes_Request {
    /**
     * @generated from protobuf field: optional uint32 min_last_played = 1;
     */
    minLastPlayed?: number;
}
/**
 * @generated from protobuf message CPlayer_GetLastPlayedTimes_Response
 */
export interface CPlayer_GetLastPlayedTimes_Response {
    /**
     * @generated from protobuf field: repeated CPlayer_GetLastPlayedTimes_Response.Game games = 1;
     */
    games: CPlayer_GetLastPlayedTimes_Response_Game[];
}
/**
 * @generated from protobuf message CPlayer_GetLastPlayedTimes_Response.Game
 */
export interface CPlayer_GetLastPlayedTimes_Response_Game {
    /**
     * @generated from protobuf field: optional int32 appid = 1;
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional uint32 last_playtime = 2;
     */
    lastPlaytime?: number;
    /**
     * @generated from protobuf field: optional int32 playtime_2weeks = 3 [json_name = "playtime2weeks"];
     */
    playtime2Weeks?: number;
    /**
     * @generated from protobuf field: optional int32 playtime_forever = 4;
     */
    playtimeForever?: number;
    /**
     * @generated from protobuf field: optional uint32 first_playtime = 5;
     */
    firstPlaytime?: number;
}
/**
 * @generated from protobuf message CPlayer_AcceptSSA_Request
 */
export interface CPlayer_AcceptSSA_Request {
}
/**
 * @generated from protobuf message CPlayer_AcceptSSA_Response
 */
export interface CPlayer_AcceptSSA_Response {
}
/**
 * @generated from protobuf message CPlayer_GetNicknameList_Request
 */
export interface CPlayer_GetNicknameList_Request {
}
/**
 * @generated from protobuf message CPlayer_GetNicknameList_Response
 */
export interface CPlayer_GetNicknameList_Response {
    /**
     * @generated from protobuf field: repeated CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
     */
    nicknames: CPlayer_GetNicknameList_Response_PlayerNickname[];
}
/**
 * @generated from protobuf message CPlayer_GetNicknameList_Response.PlayerNickname
 */
export interface CPlayer_GetNicknameList_Response_PlayerNickname {
    /**
     * @generated from protobuf field: optional fixed32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional string nickname = 2;
     */
    nickname?: string;
}
/**
 * @generated from protobuf message CPlayer_GetPerFriendPreferences_Request
 */
export interface CPlayer_GetPerFriendPreferences_Request {
}
/**
 * @generated from protobuf message PerFriendPreferences
 */
export interface PerFriendPreferences {
    /**
     * @generated from protobuf field: optional fixed32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional string nickname = 2;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional ENotificationSetting notifications_showingame = 3;
     */
    notificationsShowingame?: ENotificationSetting;
    /**
     * @generated from protobuf field: optional ENotificationSetting notifications_showonline = 4;
     */
    notificationsShowonline?: ENotificationSetting;
    /**
     * @generated from protobuf field: optional ENotificationSetting notifications_showmessages = 5;
     */
    notificationsShowmessages?: ENotificationSetting;
    /**
     * @generated from protobuf field: optional ENotificationSetting sounds_showingame = 6;
     */
    soundsShowingame?: ENotificationSetting;
    /**
     * @generated from protobuf field: optional ENotificationSetting sounds_showonline = 7;
     */
    soundsShowonline?: ENotificationSetting;
    /**
     * @generated from protobuf field: optional ENotificationSetting sounds_showmessages = 8;
     */
    soundsShowmessages?: ENotificationSetting;
    /**
     * @generated from protobuf field: optional ENotificationSetting notifications_sendmobile = 9;
     */
    notificationsSendmobile?: ENotificationSetting;
}
/**
 * @generated from protobuf message CPlayer_GetPerFriendPreferences_Response
 */
export interface CPlayer_GetPerFriendPreferences_Response {
    /**
     * @generated from protobuf field: repeated PerFriendPreferences preferences = 1;
     */
    preferences: PerFriendPreferences[];
}
/**
 * @generated from protobuf message CPlayer_SetPerFriendPreferences_Request
 */
export interface CPlayer_SetPerFriendPreferences_Request {
    /**
     * @generated from protobuf field: optional PerFriendPreferences preferences = 1;
     */
    preferences?: PerFriendPreferences;
}
/**
 * @generated from protobuf message CPlayer_SetPerFriendPreferences_Response
 */
export interface CPlayer_SetPerFriendPreferences_Response {
}
/**
 * @generated from protobuf message CPlayer_AddFriend_Request
 */
export interface CPlayer_AddFriend_Request {
    /**
     * @generated from protobuf field: optional fixed64 steamid = 1;
     */
    steamid?: bigint;
}
/**
 * @generated from protobuf message CPlayer_AddFriend_Response
 */
export interface CPlayer_AddFriend_Response {
    /**
     * @generated from protobuf field: optional bool invite_sent = 1;
     */
    inviteSent?: boolean;
    /**
     * @generated from protobuf field: optional uint32 friend_relationship = 2;
     */
    friendRelationship?: number;
}
/**
 * @generated from protobuf message CPlayer_RemoveFriend_Request
 */
export interface CPlayer_RemoveFriend_Request {
    /**
     * @generated from protobuf field: optional fixed64 steamid = 1;
     */
    steamid?: bigint;
}
/**
 * @generated from protobuf message CPlayer_RemoveFriend_Response
 */
export interface CPlayer_RemoveFriend_Response {
    /**
     * @generated from protobuf field: optional uint32 friend_relationship = 1;
     */
    friendRelationship?: number;
}
/**
 * @generated from protobuf message CPlayer_IgnoreFriend_Request
 */
export interface CPlayer_IgnoreFriend_Request {
    /**
     * @generated from protobuf field: optional fixed64 steamid = 1;
     */
    steamid?: bigint;
    /**
     * @generated from protobuf field: optional bool unignore = 2;
     */
    unignore?: boolean;
}
/**
 * @generated from protobuf message CPlayer_IgnoreFriend_Response
 */
export interface CPlayer_IgnoreFriend_Response {
    /**
     * @generated from protobuf field: optional uint32 friend_relationship = 1;
     */
    friendRelationship?: number;
}
/**
 * @generated from protobuf message CPlayer_GetCommunityPreferences_Request
 */
export interface CPlayer_GetCommunityPreferences_Request {
}
/**
 * @generated from protobuf message CPlayer_CommunityPreferences
 */
export interface CPlayer_CommunityPreferences {
    /**
     * @generated from protobuf field: optional bool hide_adult_content_violence = 1;
     */
    hideAdultContentViolence?: boolean;
    /**
     * @generated from protobuf field: optional bool hide_adult_content_sex = 2;
     */
    hideAdultContentSex?: boolean;
    /**
     * @generated from protobuf field: optional bool parenthesize_nicknames = 4;
     */
    parenthesizeNicknames?: boolean;
    /**
     * @generated from protobuf field: optional uint32 timestamp_updated = 3;
     */
    timestampUpdated?: number;
}
/**
 * @generated from protobuf message CPlayer_GetCommunityPreferences_Response
 */
export interface CPlayer_GetCommunityPreferences_Response {
    /**
     * @generated from protobuf field: optional CPlayer_CommunityPreferences preferences = 1;
     */
    preferences?: CPlayer_CommunityPreferences;
}
/**
 * @generated from protobuf message CPlayer_SetCommunityPreferences_Request
 */
export interface CPlayer_SetCommunityPreferences_Request {
    /**
     * @generated from protobuf field: optional CPlayer_CommunityPreferences preferences = 1;
     */
    preferences?: CPlayer_CommunityPreferences;
}
/**
 * @generated from protobuf message CPlayer_SetCommunityPreferences_Response
 */
export interface CPlayer_SetCommunityPreferences_Response {
}
/**
 * @generated from protobuf message CPlayer_GetNewSteamAnnouncementState_Request
 */
export interface CPlayer_GetNewSteamAnnouncementState_Request {
    /**
     * @generated from protobuf field: optional int32 language = 1;
     */
    language?: number;
}
/**
 * @generated from protobuf message CPlayer_GetNewSteamAnnouncementState_Response
 */
export interface CPlayer_GetNewSteamAnnouncementState_Response {
    /**
     * @generated from protobuf field: optional int32 state = 1;
     */
    state?: number;
    /**
     * @generated from protobuf field: optional string announcement_headline = 2;
     */
    announcementHeadline?: string;
    /**
     * @generated from protobuf field: optional string announcement_url = 3;
     */
    announcementUrl?: string;
    /**
     * @generated from protobuf field: optional uint32 time_posted = 4;
     */
    timePosted?: number;
    /**
     * @generated from protobuf field: optional uint64 announcement_gid = 5;
     */
    announcementGid?: bigint;
}
/**
 * @generated from protobuf message CPlayer_UpdateSteamAnnouncementLastRead_Request
 */
export interface CPlayer_UpdateSteamAnnouncementLastRead_Request {
    /**
     * @generated from protobuf field: optional uint64 announcement_gid = 1;
     */
    announcementGid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 time_posted = 2;
     */
    timePosted?: number;
}
/**
 * @generated from protobuf message CPlayer_UpdateSteamAnnouncementLastRead_Response
 */
export interface CPlayer_UpdateSteamAnnouncementLastRead_Response {
}
/**
 * @generated from protobuf enum ENotificationSetting
 */
export enum ENotificationSetting {
    /**
     * @generated from protobuf enum value: k_ENotificationSettingNotifyUseDefault = 0;
     */
    k_ENotificationSettingNotifyUseDefault = 0,
    /**
     * @generated from protobuf enum value: k_ENotificationSettingAlways = 1;
     */
    k_ENotificationSettingAlways = 1,
    /**
     * @generated from protobuf enum value: k_ENotificationSettingNever = 2;
     */
    k_ENotificationSettingNever = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetMutualFriendsForIncomingInvites_Request$Type extends MessageType<CPlayer_GetMutualFriendsForIncomingInvites_Request> {
    constructor() {
        super("CPlayer_GetMutualFriendsForIncomingInvites_Request", []);
    }
    create(value?: PartialMessage<CPlayer_GetMutualFriendsForIncomingInvites_Request>): CPlayer_GetMutualFriendsForIncomingInvites_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetMutualFriendsForIncomingInvites_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetMutualFriendsForIncomingInvites_Request): CPlayer_GetMutualFriendsForIncomingInvites_Request {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_GetMutualFriendsForIncomingInvites_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetMutualFriendsForIncomingInvites_Request
 */
export const CPlayer_GetMutualFriendsForIncomingInvites_Request = new CPlayer_GetMutualFriendsForIncomingInvites_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_IncomingInviteMutualFriendList$Type extends MessageType<CPlayer_IncomingInviteMutualFriendList> {
    constructor() {
        super("CPlayer_IncomingInviteMutualFriendList", [
            { no: 1, name: "steamid", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "mutual_friend_account_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_IncomingInviteMutualFriendList>): CPlayer_IncomingInviteMutualFriendList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mutualFriendAccountIds = [];
        if (value !== undefined)
            reflectionMergePartial<CPlayer_IncomingInviteMutualFriendList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_IncomingInviteMutualFriendList): CPlayer_IncomingInviteMutualFriendList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 steamid */ 1:
                    message.steamid = reader.fixed64().toBigInt();
                    break;
                case /* repeated uint32 mutual_friend_account_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.mutualFriendAccountIds.push(reader.uint32());
                    else
                        message.mutualFriendAccountIds.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_IncomingInviteMutualFriendList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 steamid = 1; */
        if (message.steamid !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.steamid);
        /* repeated uint32 mutual_friend_account_ids = 2; */
        for (let i = 0; i < message.mutualFriendAccountIds.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.mutualFriendAccountIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_IncomingInviteMutualFriendList
 */
export const CPlayer_IncomingInviteMutualFriendList = new CPlayer_IncomingInviteMutualFriendList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetMutualFriendsForIncomingInvites_Response$Type extends MessageType<CPlayer_GetMutualFriendsForIncomingInvites_Response> {
    constructor() {
        super("CPlayer_GetMutualFriendsForIncomingInvites_Response", [
            { no: 1, name: "incoming_invite_mutual_friends_lists", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_IncomingInviteMutualFriendList }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetMutualFriendsForIncomingInvites_Response>): CPlayer_GetMutualFriendsForIncomingInvites_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.incomingInviteMutualFriendsLists = [];
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetMutualFriendsForIncomingInvites_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetMutualFriendsForIncomingInvites_Response): CPlayer_GetMutualFriendsForIncomingInvites_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists */ 1:
                    message.incomingInviteMutualFriendsLists.push(CPlayer_IncomingInviteMutualFriendList.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetMutualFriendsForIncomingInvites_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1; */
        for (let i = 0; i < message.incomingInviteMutualFriendsLists.length; i++)
            CPlayer_IncomingInviteMutualFriendList.internalBinaryWrite(message.incomingInviteMutualFriendsLists[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetMutualFriendsForIncomingInvites_Response
 */
export const CPlayer_GetMutualFriendsForIncomingInvites_Response = new CPlayer_GetMutualFriendsForIncomingInvites_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetFriendsGameplayInfo_Request$Type extends MessageType<CPlayer_GetFriendsGameplayInfo_Request> {
    constructor() {
        super("CPlayer_GetFriendsGameplayInfo_Request", [
            { no: 1, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetFriendsGameplayInfo_Request>): CPlayer_GetFriendsGameplayInfo_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetFriendsGameplayInfo_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetFriendsGameplayInfo_Request): CPlayer_GetFriendsGameplayInfo_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 appid */ 1:
                    message.appid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetFriendsGameplayInfo_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 appid = 1; */
        if (message.appid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.appid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetFriendsGameplayInfo_Request
 */
export const CPlayer_GetFriendsGameplayInfo_Request = new CPlayer_GetFriendsGameplayInfo_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetFriendsGameplayInfo_Response$Type extends MessageType<CPlayer_GetFriendsGameplayInfo_Response> {
    constructor() {
        super("CPlayer_GetFriendsGameplayInfo_Response", [
            { no: 1, name: "your_info", kind: "message", T: () => CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo },
            { no: 2, name: "in_game", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo },
            { no: 3, name: "played_recently", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo },
            { no: 4, name: "played_ever", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo },
            { no: 5, name: "owns", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo },
            { no: 6, name: "in_wishlist", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetFriendsGameplayInfo_Response>): CPlayer_GetFriendsGameplayInfo_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inGame = [];
        message.playedRecently = [];
        message.playedEver = [];
        message.owns = [];
        message.inWishlist = [];
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetFriendsGameplayInfo_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetFriendsGameplayInfo_Response): CPlayer_GetFriendsGameplayInfo_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info */ 1:
                    message.yourInfo = CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo.internalBinaryRead(reader, reader.uint32(), options, message.yourInfo);
                    break;
                case /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game */ 2:
                    message.inGame.push(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently */ 3:
                    message.playedRecently.push(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever */ 4:
                    message.playedEver.push(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns */ 5:
                    message.owns.push(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist */ 6:
                    message.inWishlist.push(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetFriendsGameplayInfo_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1; */
        if (message.yourInfo)
            CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo.internalBinaryWrite(message.yourInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2; */
        for (let i = 0; i < message.inGame.length; i++)
            CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryWrite(message.inGame[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3; */
        for (let i = 0; i < message.playedRecently.length; i++)
            CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryWrite(message.playedRecently[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4; */
        for (let i = 0; i < message.playedEver.length; i++)
            CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryWrite(message.playedEver[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5; */
        for (let i = 0; i < message.owns.length; i++)
            CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryWrite(message.owns[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6; */
        for (let i = 0; i < message.inWishlist.length; i++)
            CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.internalBinaryWrite(message.inWishlist[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetFriendsGameplayInfo_Response
 */
export const CPlayer_GetFriendsGameplayInfo_Response = new CPlayer_GetFriendsGameplayInfo_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo$Type extends MessageType<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo> {
    constructor() {
        super("CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo", [
            { no: 1, name: "steamid", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "minutes_played", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "minutes_played_forever", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo>): CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo): CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 steamid */ 1:
                    message.steamid = reader.fixed64().toBigInt();
                    break;
                case /* optional uint32 minutes_played */ 2:
                    message.minutesPlayed = reader.uint32();
                    break;
                case /* optional uint32 minutes_played_forever */ 3:
                    message.minutesPlayedForever = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 steamid = 1; */
        if (message.steamid !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.steamid);
        /* optional uint32 minutes_played = 2; */
        if (message.minutesPlayed !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.minutesPlayed);
        /* optional uint32 minutes_played_forever = 3; */
        if (message.minutesPlayedForever !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.minutesPlayedForever);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
 */
export const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo = new CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo$Type extends MessageType<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo> {
    constructor() {
        super("CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo", [
            { no: 1, name: "steamid", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "minutes_played", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "minutes_played_forever", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "in_wishlist", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "owned", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>): CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo): CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 steamid */ 1:
                    message.steamid = reader.fixed64().toBigInt();
                    break;
                case /* optional uint32 minutes_played */ 2:
                    message.minutesPlayed = reader.uint32();
                    break;
                case /* optional uint32 minutes_played_forever */ 3:
                    message.minutesPlayedForever = reader.uint32();
                    break;
                case /* optional bool in_wishlist */ 4:
                    message.inWishlist = reader.bool();
                    break;
                case /* optional bool owned */ 5:
                    message.owned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 steamid = 1; */
        if (message.steamid !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.steamid);
        /* optional uint32 minutes_played = 2; */
        if (message.minutesPlayed !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.minutesPlayed);
        /* optional uint32 minutes_played_forever = 3; */
        if (message.minutesPlayedForever !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.minutesPlayedForever);
        /* optional bool in_wishlist = 4; */
        if (message.inWishlist !== undefined)
            writer.tag(4, WireType.Varint).bool(message.inWishlist);
        /* optional bool owned = 5; */
        if (message.owned !== undefined)
            writer.tag(5, WireType.Varint).bool(message.owned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
 */
export const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo = new CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetGameBadgeLevels_Request$Type extends MessageType<CPlayer_GetGameBadgeLevels_Request> {
    constructor() {
        super("CPlayer_GetGameBadgeLevels_Request", [
            { no: 1, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetGameBadgeLevels_Request>): CPlayer_GetGameBadgeLevels_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetGameBadgeLevels_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetGameBadgeLevels_Request): CPlayer_GetGameBadgeLevels_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 appid */ 1:
                    message.appid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetGameBadgeLevels_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 appid = 1; */
        if (message.appid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.appid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetGameBadgeLevels_Request
 */
export const CPlayer_GetGameBadgeLevels_Request = new CPlayer_GetGameBadgeLevels_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetGameBadgeLevels_Response$Type extends MessageType<CPlayer_GetGameBadgeLevels_Response> {
    constructor() {
        super("CPlayer_GetGameBadgeLevels_Response", [
            { no: 1, name: "player_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "badges", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_GetGameBadgeLevels_Response_Badge }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetGameBadgeLevels_Response>): CPlayer_GetGameBadgeLevels_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.badges = [];
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetGameBadgeLevels_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetGameBadgeLevels_Response): CPlayer_GetGameBadgeLevels_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 player_level */ 1:
                    message.playerLevel = reader.uint32();
                    break;
                case /* repeated CPlayer_GetGameBadgeLevels_Response.Badge badges */ 2:
                    message.badges.push(CPlayer_GetGameBadgeLevels_Response_Badge.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetGameBadgeLevels_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 player_level = 1; */
        if (message.playerLevel !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.playerLevel);
        /* repeated CPlayer_GetGameBadgeLevels_Response.Badge badges = 2; */
        for (let i = 0; i < message.badges.length; i++)
            CPlayer_GetGameBadgeLevels_Response_Badge.internalBinaryWrite(message.badges[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetGameBadgeLevels_Response
 */
export const CPlayer_GetGameBadgeLevels_Response = new CPlayer_GetGameBadgeLevels_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetGameBadgeLevels_Response_Badge$Type extends MessageType<CPlayer_GetGameBadgeLevels_Response_Badge> {
    constructor() {
        super("CPlayer_GetGameBadgeLevels_Response.Badge", [
            { no: 1, name: "level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "series", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "border_color", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetGameBadgeLevels_Response_Badge>): CPlayer_GetGameBadgeLevels_Response_Badge {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetGameBadgeLevels_Response_Badge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetGameBadgeLevels_Response_Badge): CPlayer_GetGameBadgeLevels_Response_Badge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 level */ 1:
                    message.level = reader.int32();
                    break;
                case /* optional int32 series */ 2:
                    message.series = reader.int32();
                    break;
                case /* optional uint32 border_color */ 3:
                    message.borderColor = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetGameBadgeLevels_Response_Badge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 level = 1; */
        if (message.level !== undefined)
            writer.tag(1, WireType.Varint).int32(message.level);
        /* optional int32 series = 2; */
        if (message.series !== undefined)
            writer.tag(2, WireType.Varint).int32(message.series);
        /* optional uint32 border_color = 3; */
        if (message.borderColor !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.borderColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetGameBadgeLevels_Response.Badge
 */
export const CPlayer_GetGameBadgeLevels_Response_Badge = new CPlayer_GetGameBadgeLevels_Response_Badge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetLastPlayedTimes_Request$Type extends MessageType<CPlayer_GetLastPlayedTimes_Request> {
    constructor() {
        super("CPlayer_GetLastPlayedTimes_Request", [
            { no: 1, name: "min_last_played", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/, options: { description: "The most recent last-played time the client already knows about" } }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetLastPlayedTimes_Request>): CPlayer_GetLastPlayedTimes_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetLastPlayedTimes_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetLastPlayedTimes_Request): CPlayer_GetLastPlayedTimes_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 min_last_played */ 1:
                    message.minLastPlayed = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetLastPlayedTimes_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 min_last_played = 1; */
        if (message.minLastPlayed !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.minLastPlayed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetLastPlayedTimes_Request
 */
export const CPlayer_GetLastPlayedTimes_Request = new CPlayer_GetLastPlayedTimes_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetLastPlayedTimes_Response$Type extends MessageType<CPlayer_GetLastPlayedTimes_Response> {
    constructor() {
        super("CPlayer_GetLastPlayedTimes_Response", [
            { no: 1, name: "games", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_GetLastPlayedTimes_Response_Game }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetLastPlayedTimes_Response>): CPlayer_GetLastPlayedTimes_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.games = [];
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetLastPlayedTimes_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetLastPlayedTimes_Response): CPlayer_GetLastPlayedTimes_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CPlayer_GetLastPlayedTimes_Response.Game games */ 1:
                    message.games.push(CPlayer_GetLastPlayedTimes_Response_Game.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetLastPlayedTimes_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CPlayer_GetLastPlayedTimes_Response.Game games = 1; */
        for (let i = 0; i < message.games.length; i++)
            CPlayer_GetLastPlayedTimes_Response_Game.internalBinaryWrite(message.games[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetLastPlayedTimes_Response
 */
export const CPlayer_GetLastPlayedTimes_Response = new CPlayer_GetLastPlayedTimes_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetLastPlayedTimes_Response_Game$Type extends MessageType<CPlayer_GetLastPlayedTimes_Response_Game> {
    constructor() {
        super("CPlayer_GetLastPlayedTimes_Response.Game", [
            { no: 1, name: "appid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "last_playtime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "playtime_2weeks", kind: "scalar", jsonName: "playtime2weeks", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "playtime_forever", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "first_playtime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetLastPlayedTimes_Response_Game>): CPlayer_GetLastPlayedTimes_Response_Game {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetLastPlayedTimes_Response_Game>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetLastPlayedTimes_Response_Game): CPlayer_GetLastPlayedTimes_Response_Game {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 appid */ 1:
                    message.appid = reader.int32();
                    break;
                case /* optional uint32 last_playtime */ 2:
                    message.lastPlaytime = reader.uint32();
                    break;
                case /* optional int32 playtime_2weeks = 3 [json_name = "playtime2weeks"];*/ 3:
                    message.playtime2Weeks = reader.int32();
                    break;
                case /* optional int32 playtime_forever */ 4:
                    message.playtimeForever = reader.int32();
                    break;
                case /* optional uint32 first_playtime */ 5:
                    message.firstPlaytime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetLastPlayedTimes_Response_Game, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 appid = 1; */
        if (message.appid !== undefined)
            writer.tag(1, WireType.Varint).int32(message.appid);
        /* optional uint32 last_playtime = 2; */
        if (message.lastPlaytime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.lastPlaytime);
        /* optional int32 playtime_2weeks = 3 [json_name = "playtime2weeks"]; */
        if (message.playtime2Weeks !== undefined)
            writer.tag(3, WireType.Varint).int32(message.playtime2Weeks);
        /* optional int32 playtime_forever = 4; */
        if (message.playtimeForever !== undefined)
            writer.tag(4, WireType.Varint).int32(message.playtimeForever);
        /* optional uint32 first_playtime = 5; */
        if (message.firstPlaytime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.firstPlaytime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetLastPlayedTimes_Response.Game
 */
export const CPlayer_GetLastPlayedTimes_Response_Game = new CPlayer_GetLastPlayedTimes_Response_Game$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_AcceptSSA_Request$Type extends MessageType<CPlayer_AcceptSSA_Request> {
    constructor() {
        super("CPlayer_AcceptSSA_Request", []);
    }
    create(value?: PartialMessage<CPlayer_AcceptSSA_Request>): CPlayer_AcceptSSA_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_AcceptSSA_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_AcceptSSA_Request): CPlayer_AcceptSSA_Request {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_AcceptSSA_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_AcceptSSA_Request
 */
export const CPlayer_AcceptSSA_Request = new CPlayer_AcceptSSA_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_AcceptSSA_Response$Type extends MessageType<CPlayer_AcceptSSA_Response> {
    constructor() {
        super("CPlayer_AcceptSSA_Response", []);
    }
    create(value?: PartialMessage<CPlayer_AcceptSSA_Response>): CPlayer_AcceptSSA_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_AcceptSSA_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_AcceptSSA_Response): CPlayer_AcceptSSA_Response {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_AcceptSSA_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_AcceptSSA_Response
 */
export const CPlayer_AcceptSSA_Response = new CPlayer_AcceptSSA_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetNicknameList_Request$Type extends MessageType<CPlayer_GetNicknameList_Request> {
    constructor() {
        super("CPlayer_GetNicknameList_Request", []);
    }
    create(value?: PartialMessage<CPlayer_GetNicknameList_Request>): CPlayer_GetNicknameList_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetNicknameList_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetNicknameList_Request): CPlayer_GetNicknameList_Request {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_GetNicknameList_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetNicknameList_Request
 */
export const CPlayer_GetNicknameList_Request = new CPlayer_GetNicknameList_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetNicknameList_Response$Type extends MessageType<CPlayer_GetNicknameList_Response> {
    constructor() {
        super("CPlayer_GetNicknameList_Response", [
            { no: 1, name: "nicknames", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPlayer_GetNicknameList_Response_PlayerNickname }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetNicknameList_Response>): CPlayer_GetNicknameList_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nicknames = [];
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetNicknameList_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetNicknameList_Response): CPlayer_GetNicknameList_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CPlayer_GetNicknameList_Response.PlayerNickname nicknames */ 1:
                    message.nicknames.push(CPlayer_GetNicknameList_Response_PlayerNickname.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetNicknameList_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1; */
        for (let i = 0; i < message.nicknames.length; i++)
            CPlayer_GetNicknameList_Response_PlayerNickname.internalBinaryWrite(message.nicknames[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetNicknameList_Response
 */
export const CPlayer_GetNicknameList_Response = new CPlayer_GetNicknameList_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetNicknameList_Response_PlayerNickname$Type extends MessageType<CPlayer_GetNicknameList_Response_PlayerNickname> {
    constructor() {
        super("CPlayer_GetNicknameList_Response.PlayerNickname", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 2, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetNicknameList_Response_PlayerNickname>): CPlayer_GetNicknameList_Response_PlayerNickname {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetNicknameList_Response_PlayerNickname>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetNicknameList_Response_PlayerNickname): CPlayer_GetNicknameList_Response_PlayerNickname {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed32 accountid */ 1:
                    message.accountid = reader.fixed32();
                    break;
                case /* optional string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetNicknameList_Response_PlayerNickname, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Bit32).fixed32(message.accountid);
        /* optional string nickname = 2; */
        if (message.nickname !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetNicknameList_Response.PlayerNickname
 */
export const CPlayer_GetNicknameList_Response_PlayerNickname = new CPlayer_GetNicknameList_Response_PlayerNickname$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetPerFriendPreferences_Request$Type extends MessageType<CPlayer_GetPerFriendPreferences_Request> {
    constructor() {
        super("CPlayer_GetPerFriendPreferences_Request", []);
    }
    create(value?: PartialMessage<CPlayer_GetPerFriendPreferences_Request>): CPlayer_GetPerFriendPreferences_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetPerFriendPreferences_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetPerFriendPreferences_Request): CPlayer_GetPerFriendPreferences_Request {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_GetPerFriendPreferences_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetPerFriendPreferences_Request
 */
export const CPlayer_GetPerFriendPreferences_Request = new CPlayer_GetPerFriendPreferences_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PerFriendPreferences$Type extends MessageType<PerFriendPreferences> {
    constructor() {
        super("PerFriendPreferences", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 2, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "notifications_showingame", kind: "enum", opt: true, T: () => ["ENotificationSetting", ENotificationSetting] },
            { no: 4, name: "notifications_showonline", kind: "enum", opt: true, T: () => ["ENotificationSetting", ENotificationSetting] },
            { no: 5, name: "notifications_showmessages", kind: "enum", opt: true, T: () => ["ENotificationSetting", ENotificationSetting] },
            { no: 6, name: "sounds_showingame", kind: "enum", opt: true, T: () => ["ENotificationSetting", ENotificationSetting] },
            { no: 7, name: "sounds_showonline", kind: "enum", opt: true, T: () => ["ENotificationSetting", ENotificationSetting] },
            { no: 8, name: "sounds_showmessages", kind: "enum", opt: true, T: () => ["ENotificationSetting", ENotificationSetting] },
            { no: 9, name: "notifications_sendmobile", kind: "enum", opt: true, T: () => ["ENotificationSetting", ENotificationSetting] }
        ]);
    }
    create(value?: PartialMessage<PerFriendPreferences>): PerFriendPreferences {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PerFriendPreferences>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PerFriendPreferences): PerFriendPreferences {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed32 accountid */ 1:
                    message.accountid = reader.fixed32();
                    break;
                case /* optional string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* optional ENotificationSetting notifications_showingame */ 3:
                    message.notificationsShowingame = reader.int32();
                    break;
                case /* optional ENotificationSetting notifications_showonline */ 4:
                    message.notificationsShowonline = reader.int32();
                    break;
                case /* optional ENotificationSetting notifications_showmessages */ 5:
                    message.notificationsShowmessages = reader.int32();
                    break;
                case /* optional ENotificationSetting sounds_showingame */ 6:
                    message.soundsShowingame = reader.int32();
                    break;
                case /* optional ENotificationSetting sounds_showonline */ 7:
                    message.soundsShowonline = reader.int32();
                    break;
                case /* optional ENotificationSetting sounds_showmessages */ 8:
                    message.soundsShowmessages = reader.int32();
                    break;
                case /* optional ENotificationSetting notifications_sendmobile */ 9:
                    message.notificationsSendmobile = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PerFriendPreferences, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Bit32).fixed32(message.accountid);
        /* optional string nickname = 2; */
        if (message.nickname !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* optional ENotificationSetting notifications_showingame = 3; */
        if (message.notificationsShowingame !== undefined)
            writer.tag(3, WireType.Varint).int32(message.notificationsShowingame);
        /* optional ENotificationSetting notifications_showonline = 4; */
        if (message.notificationsShowonline !== undefined)
            writer.tag(4, WireType.Varint).int32(message.notificationsShowonline);
        /* optional ENotificationSetting notifications_showmessages = 5; */
        if (message.notificationsShowmessages !== undefined)
            writer.tag(5, WireType.Varint).int32(message.notificationsShowmessages);
        /* optional ENotificationSetting sounds_showingame = 6; */
        if (message.soundsShowingame !== undefined)
            writer.tag(6, WireType.Varint).int32(message.soundsShowingame);
        /* optional ENotificationSetting sounds_showonline = 7; */
        if (message.soundsShowonline !== undefined)
            writer.tag(7, WireType.Varint).int32(message.soundsShowonline);
        /* optional ENotificationSetting sounds_showmessages = 8; */
        if (message.soundsShowmessages !== undefined)
            writer.tag(8, WireType.Varint).int32(message.soundsShowmessages);
        /* optional ENotificationSetting notifications_sendmobile = 9; */
        if (message.notificationsSendmobile !== undefined)
            writer.tag(9, WireType.Varint).int32(message.notificationsSendmobile);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PerFriendPreferences
 */
export const PerFriendPreferences = new PerFriendPreferences$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetPerFriendPreferences_Response$Type extends MessageType<CPlayer_GetPerFriendPreferences_Response> {
    constructor() {
        super("CPlayer_GetPerFriendPreferences_Response", [
            { no: 1, name: "preferences", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PerFriendPreferences }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetPerFriendPreferences_Response>): CPlayer_GetPerFriendPreferences_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.preferences = [];
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetPerFriendPreferences_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetPerFriendPreferences_Response): CPlayer_GetPerFriendPreferences_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PerFriendPreferences preferences */ 1:
                    message.preferences.push(PerFriendPreferences.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetPerFriendPreferences_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PerFriendPreferences preferences = 1; */
        for (let i = 0; i < message.preferences.length; i++)
            PerFriendPreferences.internalBinaryWrite(message.preferences[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetPerFriendPreferences_Response
 */
export const CPlayer_GetPerFriendPreferences_Response = new CPlayer_GetPerFriendPreferences_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_SetPerFriendPreferences_Request$Type extends MessageType<CPlayer_SetPerFriendPreferences_Request> {
    constructor() {
        super("CPlayer_SetPerFriendPreferences_Request", [
            { no: 1, name: "preferences", kind: "message", T: () => PerFriendPreferences }
        ]);
    }
    create(value?: PartialMessage<CPlayer_SetPerFriendPreferences_Request>): CPlayer_SetPerFriendPreferences_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_SetPerFriendPreferences_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_SetPerFriendPreferences_Request): CPlayer_SetPerFriendPreferences_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PerFriendPreferences preferences */ 1:
                    message.preferences = PerFriendPreferences.internalBinaryRead(reader, reader.uint32(), options, message.preferences);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_SetPerFriendPreferences_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PerFriendPreferences preferences = 1; */
        if (message.preferences)
            PerFriendPreferences.internalBinaryWrite(message.preferences, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_SetPerFriendPreferences_Request
 */
export const CPlayer_SetPerFriendPreferences_Request = new CPlayer_SetPerFriendPreferences_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_SetPerFriendPreferences_Response$Type extends MessageType<CPlayer_SetPerFriendPreferences_Response> {
    constructor() {
        super("CPlayer_SetPerFriendPreferences_Response", []);
    }
    create(value?: PartialMessage<CPlayer_SetPerFriendPreferences_Response>): CPlayer_SetPerFriendPreferences_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_SetPerFriendPreferences_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_SetPerFriendPreferences_Response): CPlayer_SetPerFriendPreferences_Response {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_SetPerFriendPreferences_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_SetPerFriendPreferences_Response
 */
export const CPlayer_SetPerFriendPreferences_Response = new CPlayer_SetPerFriendPreferences_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_AddFriend_Request$Type extends MessageType<CPlayer_AddFriend_Request> {
    constructor() {
        super("CPlayer_AddFriend_Request", [
            { no: 1, name: "steamid", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/, options: { description: "Steam ID of user to whom to send a friend invite." } }
        ]);
    }
    create(value?: PartialMessage<CPlayer_AddFriend_Request>): CPlayer_AddFriend_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_AddFriend_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_AddFriend_Request): CPlayer_AddFriend_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 steamid */ 1:
                    message.steamid = reader.fixed64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_AddFriend_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 steamid = 1; */
        if (message.steamid !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.steamid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_AddFriend_Request
 */
export const CPlayer_AddFriend_Request = new CPlayer_AddFriend_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_AddFriend_Response$Type extends MessageType<CPlayer_AddFriend_Response> {
    constructor() {
        super("CPlayer_AddFriend_Response", [
            { no: 1, name: "invite_sent", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/, options: { description: "True if the operation was successful, false otherwise." } },
            { no: 2, name: "friend_relationship", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/, options: { description: "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent" } }
        ]);
    }
    create(value?: PartialMessage<CPlayer_AddFriend_Response>): CPlayer_AddFriend_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_AddFriend_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_AddFriend_Response): CPlayer_AddFriend_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool invite_sent */ 1:
                    message.inviteSent = reader.bool();
                    break;
                case /* optional uint32 friend_relationship */ 2:
                    message.friendRelationship = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_AddFriend_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool invite_sent = 1; */
        if (message.inviteSent !== undefined)
            writer.tag(1, WireType.Varint).bool(message.inviteSent);
        /* optional uint32 friend_relationship = 2; */
        if (message.friendRelationship !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.friendRelationship);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_AddFriend_Response
 */
export const CPlayer_AddFriend_Response = new CPlayer_AddFriend_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_RemoveFriend_Request$Type extends MessageType<CPlayer_RemoveFriend_Request> {
    constructor() {
        super("CPlayer_RemoveFriend_Request", [
            { no: 1, name: "steamid", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/, options: { description: "Steam ID of friend to remove." } }
        ]);
    }
    create(value?: PartialMessage<CPlayer_RemoveFriend_Request>): CPlayer_RemoveFriend_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_RemoveFriend_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_RemoveFriend_Request): CPlayer_RemoveFriend_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 steamid */ 1:
                    message.steamid = reader.fixed64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_RemoveFriend_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 steamid = 1; */
        if (message.steamid !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.steamid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_RemoveFriend_Request
 */
export const CPlayer_RemoveFriend_Request = new CPlayer_RemoveFriend_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_RemoveFriend_Response$Type extends MessageType<CPlayer_RemoveFriend_Response> {
    constructor() {
        super("CPlayer_RemoveFriend_Response", [
            { no: 1, name: "friend_relationship", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/, options: { description: "the resulting relationship" } }
        ]);
    }
    create(value?: PartialMessage<CPlayer_RemoveFriend_Response>): CPlayer_RemoveFriend_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_RemoveFriend_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_RemoveFriend_Response): CPlayer_RemoveFriend_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 friend_relationship */ 1:
                    message.friendRelationship = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_RemoveFriend_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 friend_relationship = 1; */
        if (message.friendRelationship !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.friendRelationship);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_RemoveFriend_Response
 */
export const CPlayer_RemoveFriend_Response = new CPlayer_RemoveFriend_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_IgnoreFriend_Request$Type extends MessageType<CPlayer_IgnoreFriend_Request> {
    constructor() {
        super("CPlayer_IgnoreFriend_Request", [
            { no: 1, name: "steamid", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "unignore", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/, options: { description: "If set, remove from ignore/block list instead of adding " } }
        ]);
    }
    create(value?: PartialMessage<CPlayer_IgnoreFriend_Request>): CPlayer_IgnoreFriend_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_IgnoreFriend_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_IgnoreFriend_Request): CPlayer_IgnoreFriend_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 steamid */ 1:
                    message.steamid = reader.fixed64().toBigInt();
                    break;
                case /* optional bool unignore */ 2:
                    message.unignore = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_IgnoreFriend_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 steamid = 1; */
        if (message.steamid !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.steamid);
        /* optional bool unignore = 2; */
        if (message.unignore !== undefined)
            writer.tag(2, WireType.Varint).bool(message.unignore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_IgnoreFriend_Request
 */
export const CPlayer_IgnoreFriend_Request = new CPlayer_IgnoreFriend_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_IgnoreFriend_Response$Type extends MessageType<CPlayer_IgnoreFriend_Response> {
    constructor() {
        super("CPlayer_IgnoreFriend_Response", [
            { no: 1, name: "friend_relationship", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/, options: { description: "the resulting relationship" } }
        ]);
    }
    create(value?: PartialMessage<CPlayer_IgnoreFriend_Response>): CPlayer_IgnoreFriend_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_IgnoreFriend_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_IgnoreFriend_Response): CPlayer_IgnoreFriend_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 friend_relationship */ 1:
                    message.friendRelationship = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_IgnoreFriend_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 friend_relationship = 1; */
        if (message.friendRelationship !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.friendRelationship);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_IgnoreFriend_Response
 */
export const CPlayer_IgnoreFriend_Response = new CPlayer_IgnoreFriend_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetCommunityPreferences_Request$Type extends MessageType<CPlayer_GetCommunityPreferences_Request> {
    constructor() {
        super("CPlayer_GetCommunityPreferences_Request", []);
    }
    create(value?: PartialMessage<CPlayer_GetCommunityPreferences_Request>): CPlayer_GetCommunityPreferences_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetCommunityPreferences_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetCommunityPreferences_Request): CPlayer_GetCommunityPreferences_Request {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_GetCommunityPreferences_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetCommunityPreferences_Request
 */
export const CPlayer_GetCommunityPreferences_Request = new CPlayer_GetCommunityPreferences_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_CommunityPreferences$Type extends MessageType<CPlayer_CommunityPreferences> {
    constructor() {
        super("CPlayer_CommunityPreferences", [
            { no: 1, name: "hide_adult_content_violence", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "hide_adult_content_sex", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "parenthesize_nicknames", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "timestamp_updated", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_CommunityPreferences>): CPlayer_CommunityPreferences {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_CommunityPreferences>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_CommunityPreferences): CPlayer_CommunityPreferences {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool hide_adult_content_violence */ 1:
                    message.hideAdultContentViolence = reader.bool();
                    break;
                case /* optional bool hide_adult_content_sex */ 2:
                    message.hideAdultContentSex = reader.bool();
                    break;
                case /* optional bool parenthesize_nicknames */ 4:
                    message.parenthesizeNicknames = reader.bool();
                    break;
                case /* optional uint32 timestamp_updated */ 3:
                    message.timestampUpdated = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_CommunityPreferences, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool hide_adult_content_violence = 1; */
        if (message.hideAdultContentViolence !== undefined)
            writer.tag(1, WireType.Varint).bool(message.hideAdultContentViolence);
        /* optional bool hide_adult_content_sex = 2; */
        if (message.hideAdultContentSex !== undefined)
            writer.tag(2, WireType.Varint).bool(message.hideAdultContentSex);
        /* optional bool parenthesize_nicknames = 4; */
        if (message.parenthesizeNicknames !== undefined)
            writer.tag(4, WireType.Varint).bool(message.parenthesizeNicknames);
        /* optional uint32 timestamp_updated = 3; */
        if (message.timestampUpdated !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.timestampUpdated);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_CommunityPreferences
 */
export const CPlayer_CommunityPreferences = new CPlayer_CommunityPreferences$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetCommunityPreferences_Response$Type extends MessageType<CPlayer_GetCommunityPreferences_Response> {
    constructor() {
        super("CPlayer_GetCommunityPreferences_Response", [
            { no: 1, name: "preferences", kind: "message", T: () => CPlayer_CommunityPreferences }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetCommunityPreferences_Response>): CPlayer_GetCommunityPreferences_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetCommunityPreferences_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetCommunityPreferences_Response): CPlayer_GetCommunityPreferences_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CPlayer_CommunityPreferences preferences */ 1:
                    message.preferences = CPlayer_CommunityPreferences.internalBinaryRead(reader, reader.uint32(), options, message.preferences);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetCommunityPreferences_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CPlayer_CommunityPreferences preferences = 1; */
        if (message.preferences)
            CPlayer_CommunityPreferences.internalBinaryWrite(message.preferences, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetCommunityPreferences_Response
 */
export const CPlayer_GetCommunityPreferences_Response = new CPlayer_GetCommunityPreferences_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_SetCommunityPreferences_Request$Type extends MessageType<CPlayer_SetCommunityPreferences_Request> {
    constructor() {
        super("CPlayer_SetCommunityPreferences_Request", [
            { no: 1, name: "preferences", kind: "message", T: () => CPlayer_CommunityPreferences }
        ]);
    }
    create(value?: PartialMessage<CPlayer_SetCommunityPreferences_Request>): CPlayer_SetCommunityPreferences_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_SetCommunityPreferences_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_SetCommunityPreferences_Request): CPlayer_SetCommunityPreferences_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CPlayer_CommunityPreferences preferences */ 1:
                    message.preferences = CPlayer_CommunityPreferences.internalBinaryRead(reader, reader.uint32(), options, message.preferences);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_SetCommunityPreferences_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CPlayer_CommunityPreferences preferences = 1; */
        if (message.preferences)
            CPlayer_CommunityPreferences.internalBinaryWrite(message.preferences, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_SetCommunityPreferences_Request
 */
export const CPlayer_SetCommunityPreferences_Request = new CPlayer_SetCommunityPreferences_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_SetCommunityPreferences_Response$Type extends MessageType<CPlayer_SetCommunityPreferences_Response> {
    constructor() {
        super("CPlayer_SetCommunityPreferences_Response", []);
    }
    create(value?: PartialMessage<CPlayer_SetCommunityPreferences_Response>): CPlayer_SetCommunityPreferences_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_SetCommunityPreferences_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_SetCommunityPreferences_Response): CPlayer_SetCommunityPreferences_Response {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_SetCommunityPreferences_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_SetCommunityPreferences_Response
 */
export const CPlayer_SetCommunityPreferences_Response = new CPlayer_SetCommunityPreferences_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetNewSteamAnnouncementState_Request$Type extends MessageType<CPlayer_GetNewSteamAnnouncementState_Request> {
    constructor() {
        super("CPlayer_GetNewSteamAnnouncementState_Request", [
            { no: 1, name: "language", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetNewSteamAnnouncementState_Request>): CPlayer_GetNewSteamAnnouncementState_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetNewSteamAnnouncementState_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetNewSteamAnnouncementState_Request): CPlayer_GetNewSteamAnnouncementState_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 language */ 1:
                    message.language = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetNewSteamAnnouncementState_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 language = 1; */
        if (message.language !== undefined)
            writer.tag(1, WireType.Varint).int32(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetNewSteamAnnouncementState_Request
 */
export const CPlayer_GetNewSteamAnnouncementState_Request = new CPlayer_GetNewSteamAnnouncementState_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_GetNewSteamAnnouncementState_Response$Type extends MessageType<CPlayer_GetNewSteamAnnouncementState_Response> {
    constructor() {
        super("CPlayer_GetNewSteamAnnouncementState_Response", [
            { no: 1, name: "state", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "announcement_headline", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "announcement_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "time_posted", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "announcement_gid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_GetNewSteamAnnouncementState_Response>): CPlayer_GetNewSteamAnnouncementState_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_GetNewSteamAnnouncementState_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_GetNewSteamAnnouncementState_Response): CPlayer_GetNewSteamAnnouncementState_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 state */ 1:
                    message.state = reader.int32();
                    break;
                case /* optional string announcement_headline */ 2:
                    message.announcementHeadline = reader.string();
                    break;
                case /* optional string announcement_url */ 3:
                    message.announcementUrl = reader.string();
                    break;
                case /* optional uint32 time_posted */ 4:
                    message.timePosted = reader.uint32();
                    break;
                case /* optional uint64 announcement_gid */ 5:
                    message.announcementGid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_GetNewSteamAnnouncementState_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 state = 1; */
        if (message.state !== undefined)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* optional string announcement_headline = 2; */
        if (message.announcementHeadline !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.announcementHeadline);
        /* optional string announcement_url = 3; */
        if (message.announcementUrl !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.announcementUrl);
        /* optional uint32 time_posted = 4; */
        if (message.timePosted !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.timePosted);
        /* optional uint64 announcement_gid = 5; */
        if (message.announcementGid !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.announcementGid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_GetNewSteamAnnouncementState_Response
 */
export const CPlayer_GetNewSteamAnnouncementState_Response = new CPlayer_GetNewSteamAnnouncementState_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_UpdateSteamAnnouncementLastRead_Request$Type extends MessageType<CPlayer_UpdateSteamAnnouncementLastRead_Request> {
    constructor() {
        super("CPlayer_UpdateSteamAnnouncementLastRead_Request", [
            { no: 1, name: "announcement_gid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "time_posted", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPlayer_UpdateSteamAnnouncementLastRead_Request>): CPlayer_UpdateSteamAnnouncementLastRead_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_UpdateSteamAnnouncementLastRead_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_UpdateSteamAnnouncementLastRead_Request): CPlayer_UpdateSteamAnnouncementLastRead_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 announcement_gid */ 1:
                    message.announcementGid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 time_posted */ 2:
                    message.timePosted = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPlayer_UpdateSteamAnnouncementLastRead_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 announcement_gid = 1; */
        if (message.announcementGid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.announcementGid);
        /* optional uint32 time_posted = 2; */
        if (message.timePosted !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.timePosted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_UpdateSteamAnnouncementLastRead_Request
 */
export const CPlayer_UpdateSteamAnnouncementLastRead_Request = new CPlayer_UpdateSteamAnnouncementLastRead_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPlayer_UpdateSteamAnnouncementLastRead_Response$Type extends MessageType<CPlayer_UpdateSteamAnnouncementLastRead_Response> {
    constructor() {
        super("CPlayer_UpdateSteamAnnouncementLastRead_Response", []);
    }
    create(value?: PartialMessage<CPlayer_UpdateSteamAnnouncementLastRead_Response>): CPlayer_UpdateSteamAnnouncementLastRead_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CPlayer_UpdateSteamAnnouncementLastRead_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPlayer_UpdateSteamAnnouncementLastRead_Response): CPlayer_UpdateSteamAnnouncementLastRead_Response {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CPlayer_UpdateSteamAnnouncementLastRead_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPlayer_UpdateSteamAnnouncementLastRead_Response
 */
export const CPlayer_UpdateSteamAnnouncementLastRead_Response = new CPlayer_UpdateSteamAnnouncementLastRead_Response$Type();
/**
 * @generated ServiceType for protobuf service Player
 */
export const Player = new ServiceType("Player", [
    { name: "GetMutualFriendsForIncomingInvites", options: { method_description: "Get me the mutual friends for each of my pending incoming invites (individuals and clans)." }, I: CPlayer_GetMutualFriendsForIncomingInvites_Request, O: CPlayer_GetMutualFriendsForIncomingInvites_Response },
    { name: "GetFriendsGameplayInfo", options: { method_description: "Get a list of friends who are playing, have played, own, or want a game" }, I: CPlayer_GetFriendsGameplayInfo_Request, O: CPlayer_GetFriendsGameplayInfo_Response },
    { name: "GetGameBadgeLevels", options: { method_description: "Returns the Steam Level of a user, the Badge level for the game, and if it's foil" }, I: CPlayer_GetGameBadgeLevels_Request, O: CPlayer_GetGameBadgeLevels_Response },
    { name: "ClientGetLastPlayedTimes", options: { method_description: "Gets the last-played times for the account" }, I: CPlayer_GetLastPlayedTimes_Request, O: CPlayer_GetLastPlayedTimes_Response },
    { name: "AcceptSSA", options: { method_description: "User is accepting the SSA" }, I: CPlayer_AcceptSSA_Request, O: CPlayer_AcceptSSA_Response },
    { name: "GetNicknameList", options: { method_description: "Gets the list of nicknames this user has for other users" }, I: CPlayer_GetNicknameList_Request, O: CPlayer_GetNicknameList_Response },
    { name: "GetPerFriendPreferences", options: { method_description: "Gets the list of per-friend preferences this user has set for other users" }, I: CPlayer_GetPerFriendPreferences_Request, O: CPlayer_GetPerFriendPreferences_Response },
    { name: "SetPerFriendPreferences", options: { method_description: "Sets the logged in user's per-friend preferences for the given user" }, I: CPlayer_SetPerFriendPreferences_Request, O: CPlayer_SetPerFriendPreferences_Response },
    { name: "AddFriend", options: { method_description: "Invites another Steam user to be a friend" }, I: CPlayer_AddFriend_Request, O: CPlayer_AddFriend_Response },
    { name: "RemoveFriend", options: { method_description: "Removes a friend or ignores a friend suggestion" }, I: CPlayer_RemoveFriend_Request, O: CPlayer_RemoveFriend_Response },
    { name: "IgnoreFriend", options: { method_description: "Blocks or unblocks communication with the user.  Despite name, can be a non-friend." }, I: CPlayer_IgnoreFriend_Request, O: CPlayer_IgnoreFriend_Response },
    { name: "GetCommunityPreferences", options: { method_description: "Returns the player's community preferences" }, I: CPlayer_GetCommunityPreferences_Request, O: CPlayer_GetCommunityPreferences_Response },
    { name: "SetCommunityPreferences", options: { method_description: "Sets the player's community preferences" }, I: CPlayer_SetCommunityPreferences_Request, O: CPlayer_SetCommunityPreferences_Response },
    { name: "GetNewSteamAnnouncementState", options: { method_description: "Calculates and returns what to display for UI that renders new steam announcement available" }, I: CPlayer_GetNewSteamAnnouncementState_Request, O: CPlayer_GetNewSteamAnnouncementState_Response },
    { name: "UpdateSteamAnnouncementLastRead", options: { method_description: "Marks latest announcement timestamp read by user" }, I: CPlayer_UpdateSteamAnnouncementLastRead_Request, O: CPlayer_UpdateSteamAnnouncementLastRead_Response }
], { service_description: "A service for accessing Steam player data" });
