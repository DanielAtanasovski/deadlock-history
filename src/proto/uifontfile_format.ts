// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "uifontfile_format.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CUIFontFilePB
 */
export interface CUIFontFilePB {
    /**
     * @generated from protobuf field: optional string font_file_name = 1;
     */
    fontFileName?: string;
    /**
     * @generated from protobuf field: optional bytes opentype_font_data = 2;
     */
    opentypeFontData?: Uint8Array;
}
/**
 * @generated from protobuf message CUIFontFilePackagePB
 */
export interface CUIFontFilePackagePB {
    /**
     * @generated from protobuf field: uint32 package_version = 1;
     */
    packageVersion: number;
    /**
     * @generated from protobuf field: repeated CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2;
     */
    encryptedFontFiles: CUIFontFilePackagePB_CUIEncryptedFontFilePB[];
}
/**
 * @generated from protobuf message CUIFontFilePackagePB.CUIEncryptedFontFilePB
 */
export interface CUIFontFilePackagePB_CUIEncryptedFontFilePB {
    /**
     * @generated from protobuf field: optional bytes encrypted_contents = 1;
     */
    encryptedContents?: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class CUIFontFilePB$Type extends MessageType<CUIFontFilePB> {
    constructor() {
        super("CUIFontFilePB", [
            { no: 1, name: "font_file_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "opentype_font_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CUIFontFilePB>): CUIFontFilePB {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CUIFontFilePB>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CUIFontFilePB): CUIFontFilePB {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string font_file_name */ 1:
                    message.fontFileName = reader.string();
                    break;
                case /* optional bytes opentype_font_data */ 2:
                    message.opentypeFontData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CUIFontFilePB, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string font_file_name = 1; */
        if (message.fontFileName !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.fontFileName);
        /* optional bytes opentype_font_data = 2; */
        if (message.opentypeFontData !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.opentypeFontData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CUIFontFilePB
 */
export const CUIFontFilePB = new CUIFontFilePB$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CUIFontFilePackagePB$Type extends MessageType<CUIFontFilePackagePB> {
    constructor() {
        super("CUIFontFilePackagePB", [
            { no: 1, name: "package_version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "encrypted_font_files", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CUIFontFilePackagePB_CUIEncryptedFontFilePB }
        ]);
    }
    create(value?: PartialMessage<CUIFontFilePackagePB>): CUIFontFilePackagePB {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packageVersion = 0;
        message.encryptedFontFiles = [];
        if (value !== undefined)
            reflectionMergePartial<CUIFontFilePackagePB>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CUIFontFilePackagePB): CUIFontFilePackagePB {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 package_version */ 1:
                    message.packageVersion = reader.uint32();
                    break;
                case /* repeated CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files */ 2:
                    message.encryptedFontFiles.push(CUIFontFilePackagePB_CUIEncryptedFontFilePB.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CUIFontFilePackagePB, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 package_version = 1; */
        if (message.packageVersion !== 0)
            writer.tag(1, WireType.Varint).uint32(message.packageVersion);
        /* repeated CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2; */
        for (let i = 0; i < message.encryptedFontFiles.length; i++)
            CUIFontFilePackagePB_CUIEncryptedFontFilePB.internalBinaryWrite(message.encryptedFontFiles[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CUIFontFilePackagePB
 */
export const CUIFontFilePackagePB = new CUIFontFilePackagePB$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CUIFontFilePackagePB_CUIEncryptedFontFilePB$Type extends MessageType<CUIFontFilePackagePB_CUIEncryptedFontFilePB> {
    constructor() {
        super("CUIFontFilePackagePB.CUIEncryptedFontFilePB", [
            { no: 1, name: "encrypted_contents", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CUIFontFilePackagePB_CUIEncryptedFontFilePB>): CUIFontFilePackagePB_CUIEncryptedFontFilePB {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CUIFontFilePackagePB_CUIEncryptedFontFilePB>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CUIFontFilePackagePB_CUIEncryptedFontFilePB): CUIFontFilePackagePB_CUIEncryptedFontFilePB {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes encrypted_contents */ 1:
                    message.encryptedContents = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CUIFontFilePackagePB_CUIEncryptedFontFilePB, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes encrypted_contents = 1; */
        if (message.encryptedContents !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.encryptedContents);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CUIFontFilePackagePB.CUIEncryptedFontFilePB
 */
export const CUIFontFilePackagePB_CUIEncryptedFontFilePB = new CUIFontFilePackagePB_CUIEncryptedFontFilePB$Type();
