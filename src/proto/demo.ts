// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "demo.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CDemoFileHeader
 */
export interface CDemoFileHeader {
    /**
     * @generated from protobuf field: string demo_file_stamp = 1;
     */
    demoFileStamp: string;
    /**
     * @generated from protobuf field: optional int32 network_protocol = 2;
     */
    networkProtocol?: number;
    /**
     * @generated from protobuf field: optional string server_name = 3;
     */
    serverName?: string;
    /**
     * @generated from protobuf field: optional string client_name = 4;
     */
    clientName?: string;
    /**
     * @generated from protobuf field: optional string map_name = 5;
     */
    mapName?: string;
    /**
     * @generated from protobuf field: optional string game_directory = 6;
     */
    gameDirectory?: string;
    /**
     * @generated from protobuf field: optional int32 fullpackets_version = 7;
     */
    fullpacketsVersion?: number;
    /**
     * @generated from protobuf field: optional bool allow_clientside_entities = 8;
     */
    allowClientsideEntities?: boolean;
    /**
     * @generated from protobuf field: optional bool allow_clientside_particles = 9;
     */
    allowClientsideParticles?: boolean;
    /**
     * @generated from protobuf field: optional string addons = 10;
     */
    addons?: string;
    /**
     * @generated from protobuf field: optional string demo_version_name = 11;
     */
    demoVersionName?: string;
    /**
     * @generated from protobuf field: optional string demo_version_guid = 12;
     */
    demoVersionGuid?: string;
    /**
     * @generated from protobuf field: optional int32 build_num = 13;
     */
    buildNum?: number;
    /**
     * @generated from protobuf field: optional string game = 14;
     */
    game?: string;
    /**
     * @generated from protobuf field: optional int32 server_start_tick = 15;
     */
    serverStartTick?: number;
}
/**
 * @generated from protobuf message CGameInfo
 */
export interface CGameInfo {
    /**
     * @generated from protobuf field: optional CGameInfo.CDotaGameInfo dota = 4;
     */
    dota?: CGameInfo_CDotaGameInfo;
    /**
     * @generated from protobuf field: optional CGameInfo.CCSGameInfo cs = 5;
     */
    cs?: CGameInfo_CCSGameInfo;
}
/**
 * @generated from protobuf message CGameInfo.CDotaGameInfo
 */
export interface CGameInfo_CDotaGameInfo {
    /**
     * @generated from protobuf field: optional uint64 match_id = 1;
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: optional int32 game_mode = 2;
     */
    gameMode?: number;
    /**
     * @generated from protobuf field: optional int32 game_winner = 3;
     */
    gameWinner?: number;
    /**
     * @generated from protobuf field: repeated CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
     */
    playerInfo: CGameInfo_CDotaGameInfo_CPlayerInfo[];
    /**
     * @generated from protobuf field: optional uint32 leagueid = 5;
     */
    leagueid?: number;
    /**
     * @generated from protobuf field: repeated CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
     */
    picksBans: CGameInfo_CDotaGameInfo_CHeroSelectEvent[];
    /**
     * @generated from protobuf field: optional uint32 radiant_team_id = 7;
     */
    radiantTeamId?: number;
    /**
     * @generated from protobuf field: optional uint32 dire_team_id = 8;
     */
    direTeamId?: number;
    /**
     * @generated from protobuf field: optional string radiant_team_tag = 9;
     */
    radiantTeamTag?: string;
    /**
     * @generated from protobuf field: optional string dire_team_tag = 10;
     */
    direTeamTag?: string;
    /**
     * @generated from protobuf field: optional uint32 end_time = 11;
     */
    endTime?: number;
}
/**
 * @generated from protobuf message CGameInfo.CDotaGameInfo.CPlayerInfo
 */
export interface CGameInfo_CDotaGameInfo_CPlayerInfo {
    /**
     * @generated from protobuf field: optional string hero_name = 1;
     */
    heroName?: string;
    /**
     * @generated from protobuf field: optional string player_name = 2;
     */
    playerName?: string;
    /**
     * @generated from protobuf field: optional bool is_fake_client = 3;
     */
    isFakeClient?: boolean;
    /**
     * @generated from protobuf field: optional uint64 steamid = 4;
     */
    steamid?: bigint;
    /**
     * @generated from protobuf field: optional int32 game_team = 5;
     */
    gameTeam?: number;
}
/**
 * @generated from protobuf message CGameInfo.CDotaGameInfo.CHeroSelectEvent
 */
export interface CGameInfo_CDotaGameInfo_CHeroSelectEvent {
    /**
     * @generated from protobuf field: optional bool is_pick = 1;
     */
    isPick?: boolean;
    /**
     * @generated from protobuf field: optional uint32 team = 2;
     */
    team?: number;
    /**
     * @generated from protobuf field: optional int32 hero_id = 3;
     */
    heroId?: number;
}
/**
 * @generated from protobuf message CGameInfo.CCSGameInfo
 */
export interface CGameInfo_CCSGameInfo {
    /**
     * @generated from protobuf field: repeated int32 round_start_ticks = 1;
     */
    roundStartTicks: number[];
}
/**
 * @generated from protobuf message CDemoFileInfo
 */
export interface CDemoFileInfo {
    /**
     * @generated from protobuf field: optional float playback_time = 1;
     */
    playbackTime?: number;
    /**
     * @generated from protobuf field: optional int32 playback_ticks = 2;
     */
    playbackTicks?: number;
    /**
     * @generated from protobuf field: optional int32 playback_frames = 3;
     */
    playbackFrames?: number;
    /**
     * @generated from protobuf field: optional CGameInfo game_info = 4;
     */
    gameInfo?: CGameInfo;
}
/**
 * @generated from protobuf message CDemoPacket
 */
export interface CDemoPacket {
    /**
     * @generated from protobuf field: optional bytes data = 3;
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoFullPacket
 */
export interface CDemoFullPacket {
    /**
     * @generated from protobuf field: optional CDemoStringTables string_table = 1;
     */
    stringTable?: CDemoStringTables;
    /**
     * @generated from protobuf field: optional CDemoPacket packet = 2;
     */
    packet?: CDemoPacket;
}
/**
 * @generated from protobuf message CDemoSaveGame
 */
export interface CDemoSaveGame {
    /**
     * @generated from protobuf field: optional bytes data = 1;
     */
    data?: Uint8Array;
    /**
     * @generated from protobuf field: optional fixed64 steam_id = 2;
     */
    steamId?: bigint;
    /**
     * @generated from protobuf field: optional fixed64 signature = 3;
     */
    signature?: bigint;
    /**
     * @generated from protobuf field: optional int32 version = 4;
     */
    version?: number;
}
/**
 * @generated from protobuf message CDemoSyncTick
 */
export interface CDemoSyncTick {
}
/**
 * @generated from protobuf message CDemoConsoleCmd
 */
export interface CDemoConsoleCmd {
    /**
     * @generated from protobuf field: optional string cmdstring = 1;
     */
    cmdstring?: string;
}
/**
 * @generated from protobuf message CDemoSendTables
 */
export interface CDemoSendTables {
    /**
     * @generated from protobuf field: optional bytes data = 1;
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoClassInfo
 */
export interface CDemoClassInfo {
    /**
     * @generated from protobuf field: repeated CDemoClassInfo.class_t classes = 1;
     */
    classes: CDemoClassInfo_class_t[];
}
/**
 * @generated from protobuf message CDemoClassInfo.class_t
 */
export interface CDemoClassInfo_class_t {
    /**
     * @generated from protobuf field: optional int32 class_id = 1;
     */
    classId?: number;
    /**
     * @generated from protobuf field: optional string network_name = 2;
     */
    networkName?: string;
    /**
     * @generated from protobuf field: optional string table_name = 3;
     */
    tableName?: string;
}
/**
 * @generated from protobuf message CDemoCustomData
 */
export interface CDemoCustomData {
    /**
     * @generated from protobuf field: optional int32 callback_index = 1;
     */
    callbackIndex?: number;
    /**
     * @generated from protobuf field: optional bytes data = 2;
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoCustomDataCallbacks
 */
export interface CDemoCustomDataCallbacks {
    /**
     * @generated from protobuf field: repeated string save_id = 1;
     */
    saveId: string[];
}
/**
 * @generated from protobuf message CDemoAnimationHeader
 */
export interface CDemoAnimationHeader {
    /**
     * @generated from protobuf field: optional sint32 entity_id = 1;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional int32 tick = 2;
     */
    tick?: number;
    /**
     * @generated from protobuf field: optional bytes data = 3;
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoAnimationData
 */
export interface CDemoAnimationData {
    /**
     * @generated from protobuf field: optional sint32 entity_id = 1;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional int32 start_tick = 2;
     */
    startTick?: number;
    /**
     * @generated from protobuf field: optional int32 end_tick = 3;
     */
    endTick?: number;
    /**
     * @generated from protobuf field: optional bytes data = 4;
     */
    data?: Uint8Array;
    /**
     * @generated from protobuf field: optional int64 data_checksum = 5;
     */
    dataChecksum?: bigint;
}
/**
 * @generated from protobuf message CDemoStringTables
 */
export interface CDemoStringTables {
    /**
     * @generated from protobuf field: repeated CDemoStringTables.table_t tables = 1;
     */
    tables: CDemoStringTables_table_t[];
}
/**
 * @generated from protobuf message CDemoStringTables.items_t
 */
export interface CDemoStringTables_items_t {
    /**
     * @generated from protobuf field: optional string str = 1;
     */
    str?: string;
    /**
     * @generated from protobuf field: optional bytes data = 2;
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoStringTables.table_t
 */
export interface CDemoStringTables_table_t {
    /**
     * @generated from protobuf field: optional string table_name = 1;
     */
    tableName?: string;
    /**
     * @generated from protobuf field: repeated CDemoStringTables.items_t items = 2;
     */
    items: CDemoStringTables_items_t[];
    /**
     * @generated from protobuf field: repeated CDemoStringTables.items_t items_clientside = 3;
     */
    itemsClientside: CDemoStringTables_items_t[];
    /**
     * @generated from protobuf field: optional int32 table_flags = 4;
     */
    tableFlags?: number;
}
/**
 * @generated from protobuf message CDemoStop
 */
export interface CDemoStop {
}
/**
 * @generated from protobuf message CDemoUserCmd
 */
export interface CDemoUserCmd {
    /**
     * @generated from protobuf field: optional int32 cmd_number = 1;
     */
    cmdNumber?: number;
    /**
     * @generated from protobuf field: optional bytes data = 2;
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoSpawnGroups
 */
export interface CDemoSpawnGroups {
    /**
     * @generated from protobuf field: repeated bytes msgs = 3;
     */
    msgs: Uint8Array[];
}
/**
 * @generated from protobuf enum EDemoCommands
 */
export enum EDemoCommands {
    /**
     * @generated from protobuf enum value: DEM_Error = -1;
     */
    DEM_Error = -1,
    /**
     * @generated from protobuf enum value: DEM_Stop = 0;
     */
    DEM_Stop = 0,
    /**
     * @generated from protobuf enum value: DEM_FileHeader = 1;
     */
    DEM_FileHeader = 1,
    /**
     * @generated from protobuf enum value: DEM_FileInfo = 2;
     */
    DEM_FileInfo = 2,
    /**
     * @generated from protobuf enum value: DEM_SyncTick = 3;
     */
    DEM_SyncTick = 3,
    /**
     * @generated from protobuf enum value: DEM_SendTables = 4;
     */
    DEM_SendTables = 4,
    /**
     * @generated from protobuf enum value: DEM_ClassInfo = 5;
     */
    DEM_ClassInfo = 5,
    /**
     * @generated from protobuf enum value: DEM_StringTables = 6;
     */
    DEM_StringTables = 6,
    /**
     * @generated from protobuf enum value: DEM_Packet = 7;
     */
    DEM_Packet = 7,
    /**
     * @generated from protobuf enum value: DEM_SignonPacket = 8;
     */
    DEM_SignonPacket = 8,
    /**
     * @generated from protobuf enum value: DEM_ConsoleCmd = 9;
     */
    DEM_ConsoleCmd = 9,
    /**
     * @generated from protobuf enum value: DEM_CustomData = 10;
     */
    DEM_CustomData = 10,
    /**
     * @generated from protobuf enum value: DEM_CustomDataCallbacks = 11;
     */
    DEM_CustomDataCallbacks = 11,
    /**
     * @generated from protobuf enum value: DEM_UserCmd = 12;
     */
    DEM_UserCmd = 12,
    /**
     * @generated from protobuf enum value: DEM_FullPacket = 13;
     */
    DEM_FullPacket = 13,
    /**
     * @generated from protobuf enum value: DEM_SaveGame = 14;
     */
    DEM_SaveGame = 14,
    /**
     * @generated from protobuf enum value: DEM_SpawnGroups = 15;
     */
    DEM_SpawnGroups = 15,
    /**
     * @generated from protobuf enum value: DEM_AnimationData = 16;
     */
    DEM_AnimationData = 16,
    /**
     * @generated from protobuf enum value: DEM_AnimationHeader = 17;
     */
    DEM_AnimationHeader = 17,
    /**
     * @generated from protobuf enum value: DEM_Max = 18;
     */
    DEM_Max = 18,
    /**
     * @generated from protobuf enum value: DEM_IsCompressed = 64;
     */
    DEM_IsCompressed = 64
}
// @generated message type with reflection information, may provide speed optimized methods
class CDemoFileHeader$Type extends MessageType<CDemoFileHeader> {
    constructor() {
        super("CDemoFileHeader", [
            { no: 1, name: "demo_file_stamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "network_protocol", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "server_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "client_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "map_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "game_directory", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "fullpackets_version", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "allow_clientside_entities", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "allow_clientside_particles", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "addons", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "demo_version_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "demo_version_guid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "build_num", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "game", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "server_start_tick", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoFileHeader>): CDemoFileHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.demoFileStamp = "";
        if (value !== undefined)
            reflectionMergePartial<CDemoFileHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoFileHeader): CDemoFileHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string demo_file_stamp */ 1:
                    message.demoFileStamp = reader.string();
                    break;
                case /* optional int32 network_protocol */ 2:
                    message.networkProtocol = reader.int32();
                    break;
                case /* optional string server_name */ 3:
                    message.serverName = reader.string();
                    break;
                case /* optional string client_name */ 4:
                    message.clientName = reader.string();
                    break;
                case /* optional string map_name */ 5:
                    message.mapName = reader.string();
                    break;
                case /* optional string game_directory */ 6:
                    message.gameDirectory = reader.string();
                    break;
                case /* optional int32 fullpackets_version */ 7:
                    message.fullpacketsVersion = reader.int32();
                    break;
                case /* optional bool allow_clientside_entities */ 8:
                    message.allowClientsideEntities = reader.bool();
                    break;
                case /* optional bool allow_clientside_particles */ 9:
                    message.allowClientsideParticles = reader.bool();
                    break;
                case /* optional string addons */ 10:
                    message.addons = reader.string();
                    break;
                case /* optional string demo_version_name */ 11:
                    message.demoVersionName = reader.string();
                    break;
                case /* optional string demo_version_guid */ 12:
                    message.demoVersionGuid = reader.string();
                    break;
                case /* optional int32 build_num */ 13:
                    message.buildNum = reader.int32();
                    break;
                case /* optional string game */ 14:
                    message.game = reader.string();
                    break;
                case /* optional int32 server_start_tick */ 15:
                    message.serverStartTick = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoFileHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string demo_file_stamp = 1; */
        if (message.demoFileStamp !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.demoFileStamp);
        /* optional int32 network_protocol = 2; */
        if (message.networkProtocol !== undefined)
            writer.tag(2, WireType.Varint).int32(message.networkProtocol);
        /* optional string server_name = 3; */
        if (message.serverName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.serverName);
        /* optional string client_name = 4; */
        if (message.clientName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.clientName);
        /* optional string map_name = 5; */
        if (message.mapName !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.mapName);
        /* optional string game_directory = 6; */
        if (message.gameDirectory !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.gameDirectory);
        /* optional int32 fullpackets_version = 7; */
        if (message.fullpacketsVersion !== undefined)
            writer.tag(7, WireType.Varint).int32(message.fullpacketsVersion);
        /* optional bool allow_clientside_entities = 8; */
        if (message.allowClientsideEntities !== undefined)
            writer.tag(8, WireType.Varint).bool(message.allowClientsideEntities);
        /* optional bool allow_clientside_particles = 9; */
        if (message.allowClientsideParticles !== undefined)
            writer.tag(9, WireType.Varint).bool(message.allowClientsideParticles);
        /* optional string addons = 10; */
        if (message.addons !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.addons);
        /* optional string demo_version_name = 11; */
        if (message.demoVersionName !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.demoVersionName);
        /* optional string demo_version_guid = 12; */
        if (message.demoVersionGuid !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.demoVersionGuid);
        /* optional int32 build_num = 13; */
        if (message.buildNum !== undefined)
            writer.tag(13, WireType.Varint).int32(message.buildNum);
        /* optional string game = 14; */
        if (message.game !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.game);
        /* optional int32 server_start_tick = 15; */
        if (message.serverStartTick !== undefined)
            writer.tag(15, WireType.Varint).int32(message.serverStartTick);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoFileHeader
 */
export const CDemoFileHeader = new CDemoFileHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo$Type extends MessageType<CGameInfo> {
    constructor() {
        super("CGameInfo", [
            { no: 4, name: "dota", kind: "message", T: () => CGameInfo_CDotaGameInfo },
            { no: 5, name: "cs", kind: "message", T: () => CGameInfo_CCSGameInfo }
        ]);
    }
    create(value?: PartialMessage<CGameInfo>): CGameInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameInfo): CGameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CGameInfo.CDotaGameInfo dota */ 4:
                    message.dota = CGameInfo_CDotaGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.dota);
                    break;
                case /* optional CGameInfo.CCSGameInfo cs */ 5:
                    message.cs = CGameInfo_CCSGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.cs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CGameInfo.CDotaGameInfo dota = 4; */
        if (message.dota)
            CGameInfo_CDotaGameInfo.internalBinaryWrite(message.dota, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional CGameInfo.CCSGameInfo cs = 5; */
        if (message.cs)
            CGameInfo_CCSGameInfo.internalBinaryWrite(message.cs, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameInfo
 */
export const CGameInfo = new CGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo_CDotaGameInfo$Type extends MessageType<CGameInfo_CDotaGameInfo> {
    constructor() {
        super("CGameInfo.CDotaGameInfo", [
            { no: 1, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "game_mode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "game_winner", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "player_info", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CGameInfo_CDotaGameInfo_CPlayerInfo },
            { no: 5, name: "leagueid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "picks_bans", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CGameInfo_CDotaGameInfo_CHeroSelectEvent },
            { no: 7, name: "radiant_team_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "dire_team_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "radiant_team_tag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "dire_team_tag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CGameInfo_CDotaGameInfo>): CGameInfo_CDotaGameInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerInfo = [];
        message.picksBans = [];
        if (value !== undefined)
            reflectionMergePartial<CGameInfo_CDotaGameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameInfo_CDotaGameInfo): CGameInfo_CDotaGameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 match_id */ 1:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                case /* optional int32 game_mode */ 2:
                    message.gameMode = reader.int32();
                    break;
                case /* optional int32 game_winner */ 3:
                    message.gameWinner = reader.int32();
                    break;
                case /* repeated CGameInfo.CDotaGameInfo.CPlayerInfo player_info */ 4:
                    message.playerInfo.push(CGameInfo_CDotaGameInfo_CPlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 leagueid */ 5:
                    message.leagueid = reader.uint32();
                    break;
                case /* repeated CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans */ 6:
                    message.picksBans.push(CGameInfo_CDotaGameInfo_CHeroSelectEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 radiant_team_id */ 7:
                    message.radiantTeamId = reader.uint32();
                    break;
                case /* optional uint32 dire_team_id */ 8:
                    message.direTeamId = reader.uint32();
                    break;
                case /* optional string radiant_team_tag */ 9:
                    message.radiantTeamTag = reader.string();
                    break;
                case /* optional string dire_team_tag */ 10:
                    message.direTeamTag = reader.string();
                    break;
                case /* optional uint32 end_time */ 11:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameInfo_CDotaGameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 match_id = 1; */
        if (message.matchId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.matchId);
        /* optional int32 game_mode = 2; */
        if (message.gameMode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.gameMode);
        /* optional int32 game_winner = 3; */
        if (message.gameWinner !== undefined)
            writer.tag(3, WireType.Varint).int32(message.gameWinner);
        /* repeated CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4; */
        for (let i = 0; i < message.playerInfo.length; i++)
            CGameInfo_CDotaGameInfo_CPlayerInfo.internalBinaryWrite(message.playerInfo[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 leagueid = 5; */
        if (message.leagueid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.leagueid);
        /* repeated CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6; */
        for (let i = 0; i < message.picksBans.length; i++)
            CGameInfo_CDotaGameInfo_CHeroSelectEvent.internalBinaryWrite(message.picksBans[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 radiant_team_id = 7; */
        if (message.radiantTeamId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.radiantTeamId);
        /* optional uint32 dire_team_id = 8; */
        if (message.direTeamId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.direTeamId);
        /* optional string radiant_team_tag = 9; */
        if (message.radiantTeamTag !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.radiantTeamTag);
        /* optional string dire_team_tag = 10; */
        if (message.direTeamTag !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.direTeamTag);
        /* optional uint32 end_time = 11; */
        if (message.endTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameInfo.CDotaGameInfo
 */
export const CGameInfo_CDotaGameInfo = new CGameInfo_CDotaGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo_CDotaGameInfo_CPlayerInfo$Type extends MessageType<CGameInfo_CDotaGameInfo_CPlayerInfo> {
    constructor() {
        super("CGameInfo.CDotaGameInfo.CPlayerInfo", [
            { no: 1, name: "hero_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_fake_client", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "steamid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "game_team", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CGameInfo_CDotaGameInfo_CPlayerInfo>): CGameInfo_CDotaGameInfo_CPlayerInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGameInfo_CDotaGameInfo_CPlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameInfo_CDotaGameInfo_CPlayerInfo): CGameInfo_CDotaGameInfo_CPlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string hero_name */ 1:
                    message.heroName = reader.string();
                    break;
                case /* optional string player_name */ 2:
                    message.playerName = reader.string();
                    break;
                case /* optional bool is_fake_client */ 3:
                    message.isFakeClient = reader.bool();
                    break;
                case /* optional uint64 steamid */ 4:
                    message.steamid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 game_team */ 5:
                    message.gameTeam = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameInfo_CDotaGameInfo_CPlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string hero_name = 1; */
        if (message.heroName !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.heroName);
        /* optional string player_name = 2; */
        if (message.playerName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.playerName);
        /* optional bool is_fake_client = 3; */
        if (message.isFakeClient !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isFakeClient);
        /* optional uint64 steamid = 4; */
        if (message.steamid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.steamid);
        /* optional int32 game_team = 5; */
        if (message.gameTeam !== undefined)
            writer.tag(5, WireType.Varint).int32(message.gameTeam);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameInfo.CDotaGameInfo.CPlayerInfo
 */
export const CGameInfo_CDotaGameInfo_CPlayerInfo = new CGameInfo_CDotaGameInfo_CPlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo_CDotaGameInfo_CHeroSelectEvent$Type extends MessageType<CGameInfo_CDotaGameInfo_CHeroSelectEvent> {
    constructor() {
        super("CGameInfo.CDotaGameInfo.CHeroSelectEvent", [
            { no: 1, name: "is_pick", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "team", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "hero_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CGameInfo_CDotaGameInfo_CHeroSelectEvent>): CGameInfo_CDotaGameInfo_CHeroSelectEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGameInfo_CDotaGameInfo_CHeroSelectEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameInfo_CDotaGameInfo_CHeroSelectEvent): CGameInfo_CDotaGameInfo_CHeroSelectEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_pick */ 1:
                    message.isPick = reader.bool();
                    break;
                case /* optional uint32 team */ 2:
                    message.team = reader.uint32();
                    break;
                case /* optional int32 hero_id */ 3:
                    message.heroId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameInfo_CDotaGameInfo_CHeroSelectEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_pick = 1; */
        if (message.isPick !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isPick);
        /* optional uint32 team = 2; */
        if (message.team !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.team);
        /* optional int32 hero_id = 3; */
        if (message.heroId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.heroId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameInfo.CDotaGameInfo.CHeroSelectEvent
 */
export const CGameInfo_CDotaGameInfo_CHeroSelectEvent = new CGameInfo_CDotaGameInfo_CHeroSelectEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo_CCSGameInfo$Type extends MessageType<CGameInfo_CCSGameInfo> {
    constructor() {
        super("CGameInfo.CCSGameInfo", [
            { no: 1, name: "round_start_ticks", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CGameInfo_CCSGameInfo>): CGameInfo_CCSGameInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roundStartTicks = [];
        if (value !== undefined)
            reflectionMergePartial<CGameInfo_CCSGameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameInfo_CCSGameInfo): CGameInfo_CCSGameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 round_start_ticks */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roundStartTicks.push(reader.int32());
                    else
                        message.roundStartTicks.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameInfo_CCSGameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 round_start_ticks = 1; */
        for (let i = 0; i < message.roundStartTicks.length; i++)
            writer.tag(1, WireType.Varint).int32(message.roundStartTicks[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameInfo.CCSGameInfo
 */
export const CGameInfo_CCSGameInfo = new CGameInfo_CCSGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoFileInfo$Type extends MessageType<CDemoFileInfo> {
    constructor() {
        super("CDemoFileInfo", [
            { no: 1, name: "playback_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "playback_ticks", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "playback_frames", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "game_info", kind: "message", T: () => CGameInfo }
        ]);
    }
    create(value?: PartialMessage<CDemoFileInfo>): CDemoFileInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoFileInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoFileInfo): CDemoFileInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float playback_time */ 1:
                    message.playbackTime = reader.float();
                    break;
                case /* optional int32 playback_ticks */ 2:
                    message.playbackTicks = reader.int32();
                    break;
                case /* optional int32 playback_frames */ 3:
                    message.playbackFrames = reader.int32();
                    break;
                case /* optional CGameInfo game_info */ 4:
                    message.gameInfo = CGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.gameInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoFileInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float playback_time = 1; */
        if (message.playbackTime !== undefined)
            writer.tag(1, WireType.Bit32).float(message.playbackTime);
        /* optional int32 playback_ticks = 2; */
        if (message.playbackTicks !== undefined)
            writer.tag(2, WireType.Varint).int32(message.playbackTicks);
        /* optional int32 playback_frames = 3; */
        if (message.playbackFrames !== undefined)
            writer.tag(3, WireType.Varint).int32(message.playbackFrames);
        /* optional CGameInfo game_info = 4; */
        if (message.gameInfo)
            CGameInfo.internalBinaryWrite(message.gameInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoFileInfo
 */
export const CDemoFileInfo = new CDemoFileInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoPacket$Type extends MessageType<CDemoPacket> {
    constructor() {
        super("CDemoPacket", [
            { no: 3, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoPacket>): CDemoPacket {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoPacket): CDemoPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes data */ 3:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes data = 3; */
        if (message.data !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoPacket
 */
export const CDemoPacket = new CDemoPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoFullPacket$Type extends MessageType<CDemoFullPacket> {
    constructor() {
        super("CDemoFullPacket", [
            { no: 1, name: "string_table", kind: "message", T: () => CDemoStringTables },
            { no: 2, name: "packet", kind: "message", T: () => CDemoPacket }
        ]);
    }
    create(value?: PartialMessage<CDemoFullPacket>): CDemoFullPacket {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoFullPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoFullPacket): CDemoFullPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CDemoStringTables string_table */ 1:
                    message.stringTable = CDemoStringTables.internalBinaryRead(reader, reader.uint32(), options, message.stringTable);
                    break;
                case /* optional CDemoPacket packet */ 2:
                    message.packet = CDemoPacket.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoFullPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CDemoStringTables string_table = 1; */
        if (message.stringTable)
            CDemoStringTables.internalBinaryWrite(message.stringTable, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional CDemoPacket packet = 2; */
        if (message.packet)
            CDemoPacket.internalBinaryWrite(message.packet, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoFullPacket
 */
export const CDemoFullPacket = new CDemoFullPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoSaveGame$Type extends MessageType<CDemoSaveGame> {
    constructor() {
        super("CDemoSaveGame", [
            { no: 1, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "steam_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "signature", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "version", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoSaveGame>): CDemoSaveGame {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoSaveGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoSaveGame): CDemoSaveGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* optional fixed64 steam_id */ 2:
                    message.steamId = reader.fixed64().toBigInt();
                    break;
                case /* optional fixed64 signature */ 3:
                    message.signature = reader.fixed64().toBigInt();
                    break;
                case /* optional int32 version */ 4:
                    message.version = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoSaveGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes data = 1; */
        if (message.data !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* optional fixed64 steam_id = 2; */
        if (message.steamId !== undefined)
            writer.tag(2, WireType.Bit64).fixed64(message.steamId);
        /* optional fixed64 signature = 3; */
        if (message.signature !== undefined)
            writer.tag(3, WireType.Bit64).fixed64(message.signature);
        /* optional int32 version = 4; */
        if (message.version !== undefined)
            writer.tag(4, WireType.Varint).int32(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoSaveGame
 */
export const CDemoSaveGame = new CDemoSaveGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoSyncTick$Type extends MessageType<CDemoSyncTick> {
    constructor() {
        super("CDemoSyncTick", []);
    }
    create(value?: PartialMessage<CDemoSyncTick>): CDemoSyncTick {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoSyncTick>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoSyncTick): CDemoSyncTick {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CDemoSyncTick, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoSyncTick
 */
export const CDemoSyncTick = new CDemoSyncTick$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoConsoleCmd$Type extends MessageType<CDemoConsoleCmd> {
    constructor() {
        super("CDemoConsoleCmd", [
            { no: 1, name: "cmdstring", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoConsoleCmd>): CDemoConsoleCmd {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoConsoleCmd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoConsoleCmd): CDemoConsoleCmd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string cmdstring */ 1:
                    message.cmdstring = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoConsoleCmd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string cmdstring = 1; */
        if (message.cmdstring !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.cmdstring);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoConsoleCmd
 */
export const CDemoConsoleCmd = new CDemoConsoleCmd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoSendTables$Type extends MessageType<CDemoSendTables> {
    constructor() {
        super("CDemoSendTables", [
            { no: 1, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoSendTables>): CDemoSendTables {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoSendTables>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoSendTables): CDemoSendTables {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoSendTables, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes data = 1; */
        if (message.data !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoSendTables
 */
export const CDemoSendTables = new CDemoSendTables$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoClassInfo$Type extends MessageType<CDemoClassInfo> {
    constructor() {
        super("CDemoClassInfo", [
            { no: 1, name: "classes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDemoClassInfo_class_t }
        ]);
    }
    create(value?: PartialMessage<CDemoClassInfo>): CDemoClassInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.classes = [];
        if (value !== undefined)
            reflectionMergePartial<CDemoClassInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoClassInfo): CDemoClassInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CDemoClassInfo.class_t classes */ 1:
                    message.classes.push(CDemoClassInfo_class_t.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoClassInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CDemoClassInfo.class_t classes = 1; */
        for (let i = 0; i < message.classes.length; i++)
            CDemoClassInfo_class_t.internalBinaryWrite(message.classes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoClassInfo
 */
export const CDemoClassInfo = new CDemoClassInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoClassInfo_class_t$Type extends MessageType<CDemoClassInfo_class_t> {
    constructor() {
        super("CDemoClassInfo.class_t", [
            { no: 1, name: "class_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "network_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "table_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoClassInfo_class_t>): CDemoClassInfo_class_t {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoClassInfo_class_t>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoClassInfo_class_t): CDemoClassInfo_class_t {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 class_id */ 1:
                    message.classId = reader.int32();
                    break;
                case /* optional string network_name */ 2:
                    message.networkName = reader.string();
                    break;
                case /* optional string table_name */ 3:
                    message.tableName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoClassInfo_class_t, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 class_id = 1; */
        if (message.classId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.classId);
        /* optional string network_name = 2; */
        if (message.networkName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.networkName);
        /* optional string table_name = 3; */
        if (message.tableName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.tableName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoClassInfo.class_t
 */
export const CDemoClassInfo_class_t = new CDemoClassInfo_class_t$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoCustomData$Type extends MessageType<CDemoCustomData> {
    constructor() {
        super("CDemoCustomData", [
            { no: 1, name: "callback_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoCustomData>): CDemoCustomData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoCustomData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoCustomData): CDemoCustomData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 callback_index */ 1:
                    message.callbackIndex = reader.int32();
                    break;
                case /* optional bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoCustomData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 callback_index = 1; */
        if (message.callbackIndex !== undefined)
            writer.tag(1, WireType.Varint).int32(message.callbackIndex);
        /* optional bytes data = 2; */
        if (message.data !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoCustomData
 */
export const CDemoCustomData = new CDemoCustomData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoCustomDataCallbacks$Type extends MessageType<CDemoCustomDataCallbacks> {
    constructor() {
        super("CDemoCustomDataCallbacks", [
            { no: 1, name: "save_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoCustomDataCallbacks>): CDemoCustomDataCallbacks {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.saveId = [];
        if (value !== undefined)
            reflectionMergePartial<CDemoCustomDataCallbacks>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoCustomDataCallbacks): CDemoCustomDataCallbacks {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string save_id */ 1:
                    message.saveId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoCustomDataCallbacks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string save_id = 1; */
        for (let i = 0; i < message.saveId.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.saveId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoCustomDataCallbacks
 */
export const CDemoCustomDataCallbacks = new CDemoCustomDataCallbacks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoAnimationHeader$Type extends MessageType<CDemoAnimationHeader> {
    constructor() {
        super("CDemoAnimationHeader", [
            { no: 1, name: "entity_id", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 2, name: "tick", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoAnimationHeader>): CDemoAnimationHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoAnimationHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoAnimationHeader): CDemoAnimationHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional sint32 entity_id */ 1:
                    message.entityId = reader.sint32();
                    break;
                case /* optional int32 tick */ 2:
                    message.tick = reader.int32();
                    break;
                case /* optional bytes data */ 3:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoAnimationHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional sint32 entity_id = 1; */
        if (message.entityId !== undefined)
            writer.tag(1, WireType.Varint).sint32(message.entityId);
        /* optional int32 tick = 2; */
        if (message.tick !== undefined)
            writer.tag(2, WireType.Varint).int32(message.tick);
        /* optional bytes data = 3; */
        if (message.data !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoAnimationHeader
 */
export const CDemoAnimationHeader = new CDemoAnimationHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoAnimationData$Type extends MessageType<CDemoAnimationData> {
    constructor() {
        super("CDemoAnimationData", [
            { no: 1, name: "entity_id", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 2, name: "start_tick", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "end_tick", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "data_checksum", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoAnimationData>): CDemoAnimationData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoAnimationData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoAnimationData): CDemoAnimationData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional sint32 entity_id */ 1:
                    message.entityId = reader.sint32();
                    break;
                case /* optional int32 start_tick */ 2:
                    message.startTick = reader.int32();
                    break;
                case /* optional int32 end_tick */ 3:
                    message.endTick = reader.int32();
                    break;
                case /* optional bytes data */ 4:
                    message.data = reader.bytes();
                    break;
                case /* optional int64 data_checksum */ 5:
                    message.dataChecksum = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoAnimationData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional sint32 entity_id = 1; */
        if (message.entityId !== undefined)
            writer.tag(1, WireType.Varint).sint32(message.entityId);
        /* optional int32 start_tick = 2; */
        if (message.startTick !== undefined)
            writer.tag(2, WireType.Varint).int32(message.startTick);
        /* optional int32 end_tick = 3; */
        if (message.endTick !== undefined)
            writer.tag(3, WireType.Varint).int32(message.endTick);
        /* optional bytes data = 4; */
        if (message.data !== undefined)
            writer.tag(4, WireType.LengthDelimited).bytes(message.data);
        /* optional int64 data_checksum = 5; */
        if (message.dataChecksum !== undefined)
            writer.tag(5, WireType.Varint).int64(message.dataChecksum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoAnimationData
 */
export const CDemoAnimationData = new CDemoAnimationData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoStringTables$Type extends MessageType<CDemoStringTables> {
    constructor() {
        super("CDemoStringTables", [
            { no: 1, name: "tables", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDemoStringTables_table_t }
        ]);
    }
    create(value?: PartialMessage<CDemoStringTables>): CDemoStringTables {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tables = [];
        if (value !== undefined)
            reflectionMergePartial<CDemoStringTables>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoStringTables): CDemoStringTables {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CDemoStringTables.table_t tables */ 1:
                    message.tables.push(CDemoStringTables_table_t.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoStringTables, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CDemoStringTables.table_t tables = 1; */
        for (let i = 0; i < message.tables.length; i++)
            CDemoStringTables_table_t.internalBinaryWrite(message.tables[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoStringTables
 */
export const CDemoStringTables = new CDemoStringTables$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoStringTables_items_t$Type extends MessageType<CDemoStringTables_items_t> {
    constructor() {
        super("CDemoStringTables.items_t", [
            { no: 1, name: "str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoStringTables_items_t>): CDemoStringTables_items_t {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoStringTables_items_t>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoStringTables_items_t): CDemoStringTables_items_t {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string str */ 1:
                    message.str = reader.string();
                    break;
                case /* optional bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoStringTables_items_t, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string str = 1; */
        if (message.str !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.str);
        /* optional bytes data = 2; */
        if (message.data !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoStringTables.items_t
 */
export const CDemoStringTables_items_t = new CDemoStringTables_items_t$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoStringTables_table_t$Type extends MessageType<CDemoStringTables_table_t> {
    constructor() {
        super("CDemoStringTables.table_t", [
            { no: 1, name: "table_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDemoStringTables_items_t },
            { no: 3, name: "items_clientside", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDemoStringTables_items_t },
            { no: 4, name: "table_flags", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoStringTables_table_t>): CDemoStringTables_table_t {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        message.itemsClientside = [];
        if (value !== undefined)
            reflectionMergePartial<CDemoStringTables_table_t>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoStringTables_table_t): CDemoStringTables_table_t {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string table_name */ 1:
                    message.tableName = reader.string();
                    break;
                case /* repeated CDemoStringTables.items_t items */ 2:
                    message.items.push(CDemoStringTables_items_t.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CDemoStringTables.items_t items_clientside */ 3:
                    message.itemsClientside.push(CDemoStringTables_items_t.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 table_flags */ 4:
                    message.tableFlags = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoStringTables_table_t, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string table_name = 1; */
        if (message.tableName !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.tableName);
        /* repeated CDemoStringTables.items_t items = 2; */
        for (let i = 0; i < message.items.length; i++)
            CDemoStringTables_items_t.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated CDemoStringTables.items_t items_clientside = 3; */
        for (let i = 0; i < message.itemsClientside.length; i++)
            CDemoStringTables_items_t.internalBinaryWrite(message.itemsClientside[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 table_flags = 4; */
        if (message.tableFlags !== undefined)
            writer.tag(4, WireType.Varint).int32(message.tableFlags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoStringTables.table_t
 */
export const CDemoStringTables_table_t = new CDemoStringTables_table_t$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoStop$Type extends MessageType<CDemoStop> {
    constructor() {
        super("CDemoStop", []);
    }
    create(value?: PartialMessage<CDemoStop>): CDemoStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoStop): CDemoStop {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CDemoStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoStop
 */
export const CDemoStop = new CDemoStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoUserCmd$Type extends MessageType<CDemoUserCmd> {
    constructor() {
        super("CDemoUserCmd", [
            { no: 1, name: "cmd_number", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoUserCmd>): CDemoUserCmd {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CDemoUserCmd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoUserCmd): CDemoUserCmd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 cmd_number */ 1:
                    message.cmdNumber = reader.int32();
                    break;
                case /* optional bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoUserCmd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 cmd_number = 1; */
        if (message.cmdNumber !== undefined)
            writer.tag(1, WireType.Varint).int32(message.cmdNumber);
        /* optional bytes data = 2; */
        if (message.data !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoUserCmd
 */
export const CDemoUserCmd = new CDemoUserCmd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoSpawnGroups$Type extends MessageType<CDemoSpawnGroups> {
    constructor() {
        super("CDemoSpawnGroups", [
            { no: 3, name: "msgs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CDemoSpawnGroups>): CDemoSpawnGroups {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgs = [];
        if (value !== undefined)
            reflectionMergePartial<CDemoSpawnGroups>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoSpawnGroups): CDemoSpawnGroups {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes msgs */ 3:
                    message.msgs.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDemoSpawnGroups, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes msgs = 3; */
        for (let i = 0; i < message.msgs.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.msgs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDemoSpawnGroups
 */
export const CDemoSpawnGroups = new CDemoSpawnGroups$Type();
