// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "steammessages_gamenetworkingui.proto" (syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CMsgSteamDatagramConnectionQuality } from "./steamnetworkingsockets_messages";
import { CMsgSteamDatagramP2PRoutingSummary } from "./steamdatagram_messages_sdr";
/**
 * @generated from protobuf message CGameNetworkingUI_GlobalState
 */
export interface CGameNetworkingUI_GlobalState {
}
/**
 * @generated from protobuf message CGameNetworkingUI_ConnectionState
 */
export interface CGameNetworkingUI_ConnectionState {
    /**
     * @generated from protobuf field: optional string connection_key = 1;
     */
    connectionKey?: string;
    /**
     * @generated from protobuf field: optional uint32 appid = 2;
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional fixed32 connection_id_local = 3;
     */
    connectionIdLocal?: number;
    /**
     * @generated from protobuf field: optional string identity_local = 4;
     */
    identityLocal?: string;
    /**
     * @generated from protobuf field: optional string identity_remote = 5;
     */
    identityRemote?: string;
    /**
     * @generated from protobuf field: optional uint32 connection_state = 10;
     */
    connectionState?: number;
    /**
     * @generated from protobuf field: optional uint32 start_time = 12;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional uint32 close_time = 13;
     */
    closeTime?: number;
    /**
     * @generated from protobuf field: optional uint32 close_reason = 14;
     */
    closeReason?: number;
    /**
     * @generated from protobuf field: optional string close_message = 15;
     */
    closeMessage?: string;
    /**
     * @generated from protobuf field: optional string status_loc_token = 16;
     */
    statusLocToken?: string;
    /**
     * @generated from protobuf field: optional uint32 transport_kind = 20;
     */
    transportKind?: number;
    /**
     * @generated from protobuf field: optional string sdrpopid_local = 21;
     */
    sdrpopidLocal?: string;
    /**
     * @generated from protobuf field: optional string sdrpopid_remote = 22;
     */
    sdrpopidRemote?: string;
    /**
     * @generated from protobuf field: optional string address_remote = 23;
     */
    addressRemote?: string;
    /**
     * @generated from protobuf field: optional CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24 [json_name = "p2pRouting"];
     */
    p2PRouting?: CMsgSteamDatagramP2PRoutingSummary;
    /**
     * @generated from protobuf field: optional uint32 ping_interior = 25;
     */
    pingInterior?: number;
    /**
     * @generated from protobuf field: optional uint32 ping_remote_front = 26;
     */
    pingRemoteFront?: number;
    /**
     * @generated from protobuf field: optional uint32 ping_default_internet_route = 27;
     */
    pingDefaultInternetRoute?: number;
    /**
     * @generated from protobuf field: optional CMsgSteamDatagramConnectionQuality e2e_quality_local = 30 [json_name = "e2eQualityLocal"];
     */
    e2EQualityLocal?: CMsgSteamDatagramConnectionQuality;
    /**
     * @generated from protobuf field: optional CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31 [json_name = "e2eQualityRemote"];
     */
    e2EQualityRemote?: CMsgSteamDatagramConnectionQuality;
    /**
     * @generated from protobuf field: optional uint64 e2e_quality_remote_instantaneous_time = 32 [json_name = "e2eQualityRemoteInstantaneousTime"];
     */
    e2EQualityRemoteInstantaneousTime?: bigint;
    /**
     * @generated from protobuf field: optional uint64 e2e_quality_remote_lifetime_time = 33 [json_name = "e2eQualityRemoteLifetimeTime"];
     */
    e2EQualityRemoteLifetimeTime?: bigint;
    /**
     * @generated from protobuf field: optional CMsgSteamDatagramConnectionQuality front_quality_local = 40;
     */
    frontQualityLocal?: CMsgSteamDatagramConnectionQuality;
    /**
     * @generated from protobuf field: optional CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
     */
    frontQualityRemote?: CMsgSteamDatagramConnectionQuality;
    /**
     * @generated from protobuf field: optional uint64 front_quality_remote_instantaneous_time = 42;
     */
    frontQualityRemoteInstantaneousTime?: bigint;
    /**
     * @generated from protobuf field: optional uint64 front_quality_remote_lifetime_time = 43;
     */
    frontQualityRemoteLifetimeTime?: bigint;
}
/**
 * @generated from protobuf message CGameNetworkingUI_Message
 */
export interface CGameNetworkingUI_Message {
    /**
     * @generated from protobuf field: repeated CGameNetworkingUI_ConnectionState connection_state = 1;
     */
    connectionState: CGameNetworkingUI_ConnectionState[];
}
/**
 * @generated from protobuf message CGameNetworkingUI_ConnectionSummary
 */
export interface CGameNetworkingUI_ConnectionSummary {
    /**
     * @generated from protobuf field: optional uint32 transport_kind = 1;
     */
    transportKind?: number;
    /**
     * @generated from protobuf field: optional uint32 connection_state = 8;
     */
    connectionState?: number;
    /**
     * @generated from protobuf field: optional string sdrpop_local = 2;
     */
    sdrpopLocal?: string;
    /**
     * @generated from protobuf field: optional string sdrpop_remote = 3;
     */
    sdrpopRemote?: string;
    /**
     * @generated from protobuf field: optional uint32 ping_ms = 4;
     */
    pingMs?: number;
    /**
     * @generated from protobuf field: optional float packet_loss = 5;
     */
    packetLoss?: number;
    /**
     * @generated from protobuf field: optional uint32 ping_default_internet_route = 6;
     */
    pingDefaultInternetRoute?: number;
    /**
     * @generated from protobuf field: optional bool ip_was_shared = 7;
     */
    ipWasShared?: boolean;
}
/**
 * @generated from protobuf message CGameNetworkingUI_AppSummary
 */
export interface CGameNetworkingUI_AppSummary {
    /**
     * @generated from protobuf field: optional uint32 appid = 1;
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional bool ip_was_shared_with_friend = 10;
     */
    ipWasSharedWithFriend?: boolean;
    /**
     * @generated from protobuf field: optional bool ip_was_shared_with_nonfriend = 11;
     */
    ipWasSharedWithNonfriend?: boolean;
    /**
     * @generated from protobuf field: optional uint32 active_connections = 20;
     */
    activeConnections?: number;
    /**
     * @generated from protobuf field: optional CGameNetworkingUI_ConnectionSummary main_cxn = 30;
     */
    mainCxn?: CGameNetworkingUI_ConnectionSummary;
}
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_GlobalState$Type extends MessageType<CGameNetworkingUI_GlobalState> {
    constructor() {
        super("CGameNetworkingUI_GlobalState", []);
    }
    create(value?: PartialMessage<CGameNetworkingUI_GlobalState>): CGameNetworkingUI_GlobalState {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGameNetworkingUI_GlobalState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameNetworkingUI_GlobalState): CGameNetworkingUI_GlobalState {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CGameNetworkingUI_GlobalState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_GlobalState
 */
export const CGameNetworkingUI_GlobalState = new CGameNetworkingUI_GlobalState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_ConnectionState$Type extends MessageType<CGameNetworkingUI_ConnectionState> {
    constructor() {
        super("CGameNetworkingUI_ConnectionState", [
            { no: 1, name: "connection_key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "connection_id_local", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 4, name: "identity_local", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "identity_remote", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "connection_state", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "close_reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "close_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "status_loc_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "transport_kind", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 21, name: "sdrpopid_local", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "sdrpopid_remote", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "address_remote", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "p2p_routing", kind: "message", jsonName: "p2pRouting", T: () => CMsgSteamDatagramP2PRoutingSummary },
            { no: 25, name: "ping_interior", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 26, name: "ping_remote_front", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 27, name: "ping_default_internet_route", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 30, name: "e2e_quality_local", kind: "message", jsonName: "e2eQualityLocal", T: () => CMsgSteamDatagramConnectionQuality },
            { no: 31, name: "e2e_quality_remote", kind: "message", jsonName: "e2eQualityRemote", T: () => CMsgSteamDatagramConnectionQuality },
            { no: 32, name: "e2e_quality_remote_instantaneous_time", kind: "scalar", jsonName: "e2eQualityRemoteInstantaneousTime", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 33, name: "e2e_quality_remote_lifetime_time", kind: "scalar", jsonName: "e2eQualityRemoteLifetimeTime", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 40, name: "front_quality_local", kind: "message", T: () => CMsgSteamDatagramConnectionQuality },
            { no: 41, name: "front_quality_remote", kind: "message", T: () => CMsgSteamDatagramConnectionQuality },
            { no: 42, name: "front_quality_remote_instantaneous_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 43, name: "front_quality_remote_lifetime_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CGameNetworkingUI_ConnectionState>): CGameNetworkingUI_ConnectionState {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGameNetworkingUI_ConnectionState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameNetworkingUI_ConnectionState): CGameNetworkingUI_ConnectionState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string connection_key */ 1:
                    message.connectionKey = reader.string();
                    break;
                case /* optional uint32 appid */ 2:
                    message.appid = reader.uint32();
                    break;
                case /* optional fixed32 connection_id_local */ 3:
                    message.connectionIdLocal = reader.fixed32();
                    break;
                case /* optional string identity_local */ 4:
                    message.identityLocal = reader.string();
                    break;
                case /* optional string identity_remote */ 5:
                    message.identityRemote = reader.string();
                    break;
                case /* optional uint32 connection_state */ 10:
                    message.connectionState = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 12:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 close_time */ 13:
                    message.closeTime = reader.uint32();
                    break;
                case /* optional uint32 close_reason */ 14:
                    message.closeReason = reader.uint32();
                    break;
                case /* optional string close_message */ 15:
                    message.closeMessage = reader.string();
                    break;
                case /* optional string status_loc_token */ 16:
                    message.statusLocToken = reader.string();
                    break;
                case /* optional uint32 transport_kind */ 20:
                    message.transportKind = reader.uint32();
                    break;
                case /* optional string sdrpopid_local */ 21:
                    message.sdrpopidLocal = reader.string();
                    break;
                case /* optional string sdrpopid_remote */ 22:
                    message.sdrpopidRemote = reader.string();
                    break;
                case /* optional string address_remote */ 23:
                    message.addressRemote = reader.string();
                    break;
                case /* optional CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24 [json_name = "p2pRouting"];*/ 24:
                    message.p2PRouting = CMsgSteamDatagramP2PRoutingSummary.internalBinaryRead(reader, reader.uint32(), options, message.p2PRouting);
                    break;
                case /* optional uint32 ping_interior */ 25:
                    message.pingInterior = reader.uint32();
                    break;
                case /* optional uint32 ping_remote_front */ 26:
                    message.pingRemoteFront = reader.uint32();
                    break;
                case /* optional uint32 ping_default_internet_route */ 27:
                    message.pingDefaultInternetRoute = reader.uint32();
                    break;
                case /* optional CMsgSteamDatagramConnectionQuality e2e_quality_local = 30 [json_name = "e2eQualityLocal"];*/ 30:
                    message.e2EQualityLocal = CMsgSteamDatagramConnectionQuality.internalBinaryRead(reader, reader.uint32(), options, message.e2EQualityLocal);
                    break;
                case /* optional CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31 [json_name = "e2eQualityRemote"];*/ 31:
                    message.e2EQualityRemote = CMsgSteamDatagramConnectionQuality.internalBinaryRead(reader, reader.uint32(), options, message.e2EQualityRemote);
                    break;
                case /* optional uint64 e2e_quality_remote_instantaneous_time = 32 [json_name = "e2eQualityRemoteInstantaneousTime"];*/ 32:
                    message.e2EQualityRemoteInstantaneousTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 e2e_quality_remote_lifetime_time = 33 [json_name = "e2eQualityRemoteLifetimeTime"];*/ 33:
                    message.e2EQualityRemoteLifetimeTime = reader.uint64().toBigInt();
                    break;
                case /* optional CMsgSteamDatagramConnectionQuality front_quality_local */ 40:
                    message.frontQualityLocal = CMsgSteamDatagramConnectionQuality.internalBinaryRead(reader, reader.uint32(), options, message.frontQualityLocal);
                    break;
                case /* optional CMsgSteamDatagramConnectionQuality front_quality_remote */ 41:
                    message.frontQualityRemote = CMsgSteamDatagramConnectionQuality.internalBinaryRead(reader, reader.uint32(), options, message.frontQualityRemote);
                    break;
                case /* optional uint64 front_quality_remote_instantaneous_time */ 42:
                    message.frontQualityRemoteInstantaneousTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 front_quality_remote_lifetime_time */ 43:
                    message.frontQualityRemoteLifetimeTime = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameNetworkingUI_ConnectionState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string connection_key = 1; */
        if (message.connectionKey !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.connectionKey);
        /* optional uint32 appid = 2; */
        if (message.appid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.appid);
        /* optional fixed32 connection_id_local = 3; */
        if (message.connectionIdLocal !== undefined)
            writer.tag(3, WireType.Bit32).fixed32(message.connectionIdLocal);
        /* optional string identity_local = 4; */
        if (message.identityLocal !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.identityLocal);
        /* optional string identity_remote = 5; */
        if (message.identityRemote !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.identityRemote);
        /* optional uint32 connection_state = 10; */
        if (message.connectionState !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.connectionState);
        /* optional uint32 start_time = 12; */
        if (message.startTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.startTime);
        /* optional uint32 close_time = 13; */
        if (message.closeTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.closeTime);
        /* optional uint32 close_reason = 14; */
        if (message.closeReason !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.closeReason);
        /* optional string close_message = 15; */
        if (message.closeMessage !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.closeMessage);
        /* optional string status_loc_token = 16; */
        if (message.statusLocToken !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.statusLocToken);
        /* optional uint32 transport_kind = 20; */
        if (message.transportKind !== undefined)
            writer.tag(20, WireType.Varint).uint32(message.transportKind);
        /* optional string sdrpopid_local = 21; */
        if (message.sdrpopidLocal !== undefined)
            writer.tag(21, WireType.LengthDelimited).string(message.sdrpopidLocal);
        /* optional string sdrpopid_remote = 22; */
        if (message.sdrpopidRemote !== undefined)
            writer.tag(22, WireType.LengthDelimited).string(message.sdrpopidRemote);
        /* optional string address_remote = 23; */
        if (message.addressRemote !== undefined)
            writer.tag(23, WireType.LengthDelimited).string(message.addressRemote);
        /* optional CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24 [json_name = "p2pRouting"]; */
        if (message.p2PRouting)
            CMsgSteamDatagramP2PRoutingSummary.internalBinaryWrite(message.p2PRouting, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 ping_interior = 25; */
        if (message.pingInterior !== undefined)
            writer.tag(25, WireType.Varint).uint32(message.pingInterior);
        /* optional uint32 ping_remote_front = 26; */
        if (message.pingRemoteFront !== undefined)
            writer.tag(26, WireType.Varint).uint32(message.pingRemoteFront);
        /* optional uint32 ping_default_internet_route = 27; */
        if (message.pingDefaultInternetRoute !== undefined)
            writer.tag(27, WireType.Varint).uint32(message.pingDefaultInternetRoute);
        /* optional CMsgSteamDatagramConnectionQuality e2e_quality_local = 30 [json_name = "e2eQualityLocal"]; */
        if (message.e2EQualityLocal)
            CMsgSteamDatagramConnectionQuality.internalBinaryWrite(message.e2EQualityLocal, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* optional CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31 [json_name = "e2eQualityRemote"]; */
        if (message.e2EQualityRemote)
            CMsgSteamDatagramConnectionQuality.internalBinaryWrite(message.e2EQualityRemote, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 e2e_quality_remote_instantaneous_time = 32 [json_name = "e2eQualityRemoteInstantaneousTime"]; */
        if (message.e2EQualityRemoteInstantaneousTime !== undefined)
            writer.tag(32, WireType.Varint).uint64(message.e2EQualityRemoteInstantaneousTime);
        /* optional uint64 e2e_quality_remote_lifetime_time = 33 [json_name = "e2eQualityRemoteLifetimeTime"]; */
        if (message.e2EQualityRemoteLifetimeTime !== undefined)
            writer.tag(33, WireType.Varint).uint64(message.e2EQualityRemoteLifetimeTime);
        /* optional CMsgSteamDatagramConnectionQuality front_quality_local = 40; */
        if (message.frontQualityLocal)
            CMsgSteamDatagramConnectionQuality.internalBinaryWrite(message.frontQualityLocal, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* optional CMsgSteamDatagramConnectionQuality front_quality_remote = 41; */
        if (message.frontQualityRemote)
            CMsgSteamDatagramConnectionQuality.internalBinaryWrite(message.frontQualityRemote, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 front_quality_remote_instantaneous_time = 42; */
        if (message.frontQualityRemoteInstantaneousTime !== undefined)
            writer.tag(42, WireType.Varint).uint64(message.frontQualityRemoteInstantaneousTime);
        /* optional uint64 front_quality_remote_lifetime_time = 43; */
        if (message.frontQualityRemoteLifetimeTime !== undefined)
            writer.tag(43, WireType.Varint).uint64(message.frontQualityRemoteLifetimeTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_ConnectionState
 */
export const CGameNetworkingUI_ConnectionState = new CGameNetworkingUI_ConnectionState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_Message$Type extends MessageType<CGameNetworkingUI_Message> {
    constructor() {
        super("CGameNetworkingUI_Message", [
            { no: 1, name: "connection_state", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CGameNetworkingUI_ConnectionState }
        ]);
    }
    create(value?: PartialMessage<CGameNetworkingUI_Message>): CGameNetworkingUI_Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.connectionState = [];
        if (value !== undefined)
            reflectionMergePartial<CGameNetworkingUI_Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameNetworkingUI_Message): CGameNetworkingUI_Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CGameNetworkingUI_ConnectionState connection_state */ 1:
                    message.connectionState.push(CGameNetworkingUI_ConnectionState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameNetworkingUI_Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CGameNetworkingUI_ConnectionState connection_state = 1; */
        for (let i = 0; i < message.connectionState.length; i++)
            CGameNetworkingUI_ConnectionState.internalBinaryWrite(message.connectionState[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_Message
 */
export const CGameNetworkingUI_Message = new CGameNetworkingUI_Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_ConnectionSummary$Type extends MessageType<CGameNetworkingUI_ConnectionSummary> {
    constructor() {
        super("CGameNetworkingUI_ConnectionSummary", [
            { no: 1, name: "transport_kind", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "connection_state", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sdrpop_local", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sdrpop_remote", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ping_ms", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "packet_loss", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "ping_default_internet_route", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "ip_was_shared", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CGameNetworkingUI_ConnectionSummary>): CGameNetworkingUI_ConnectionSummary {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGameNetworkingUI_ConnectionSummary>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameNetworkingUI_ConnectionSummary): CGameNetworkingUI_ConnectionSummary {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 transport_kind */ 1:
                    message.transportKind = reader.uint32();
                    break;
                case /* optional uint32 connection_state */ 8:
                    message.connectionState = reader.uint32();
                    break;
                case /* optional string sdrpop_local */ 2:
                    message.sdrpopLocal = reader.string();
                    break;
                case /* optional string sdrpop_remote */ 3:
                    message.sdrpopRemote = reader.string();
                    break;
                case /* optional uint32 ping_ms */ 4:
                    message.pingMs = reader.uint32();
                    break;
                case /* optional float packet_loss */ 5:
                    message.packetLoss = reader.float();
                    break;
                case /* optional uint32 ping_default_internet_route */ 6:
                    message.pingDefaultInternetRoute = reader.uint32();
                    break;
                case /* optional bool ip_was_shared */ 7:
                    message.ipWasShared = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameNetworkingUI_ConnectionSummary, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 transport_kind = 1; */
        if (message.transportKind !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.transportKind);
        /* optional uint32 connection_state = 8; */
        if (message.connectionState !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.connectionState);
        /* optional string sdrpop_local = 2; */
        if (message.sdrpopLocal !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.sdrpopLocal);
        /* optional string sdrpop_remote = 3; */
        if (message.sdrpopRemote !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.sdrpopRemote);
        /* optional uint32 ping_ms = 4; */
        if (message.pingMs !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.pingMs);
        /* optional float packet_loss = 5; */
        if (message.packetLoss !== undefined)
            writer.tag(5, WireType.Bit32).float(message.packetLoss);
        /* optional uint32 ping_default_internet_route = 6; */
        if (message.pingDefaultInternetRoute !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.pingDefaultInternetRoute);
        /* optional bool ip_was_shared = 7; */
        if (message.ipWasShared !== undefined)
            writer.tag(7, WireType.Varint).bool(message.ipWasShared);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_ConnectionSummary
 */
export const CGameNetworkingUI_ConnectionSummary = new CGameNetworkingUI_ConnectionSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_AppSummary$Type extends MessageType<CGameNetworkingUI_AppSummary> {
    constructor() {
        super("CGameNetworkingUI_AppSummary", [
            { no: 1, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "ip_was_shared_with_friend", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "ip_was_shared_with_nonfriend", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "active_connections", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 30, name: "main_cxn", kind: "message", T: () => CGameNetworkingUI_ConnectionSummary }
        ]);
    }
    create(value?: PartialMessage<CGameNetworkingUI_AppSummary>): CGameNetworkingUI_AppSummary {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGameNetworkingUI_AppSummary>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameNetworkingUI_AppSummary): CGameNetworkingUI_AppSummary {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 appid */ 1:
                    message.appid = reader.uint32();
                    break;
                case /* optional bool ip_was_shared_with_friend */ 10:
                    message.ipWasSharedWithFriend = reader.bool();
                    break;
                case /* optional bool ip_was_shared_with_nonfriend */ 11:
                    message.ipWasSharedWithNonfriend = reader.bool();
                    break;
                case /* optional uint32 active_connections */ 20:
                    message.activeConnections = reader.uint32();
                    break;
                case /* optional CGameNetworkingUI_ConnectionSummary main_cxn */ 30:
                    message.mainCxn = CGameNetworkingUI_ConnectionSummary.internalBinaryRead(reader, reader.uint32(), options, message.mainCxn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGameNetworkingUI_AppSummary, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 appid = 1; */
        if (message.appid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.appid);
        /* optional bool ip_was_shared_with_friend = 10; */
        if (message.ipWasSharedWithFriend !== undefined)
            writer.tag(10, WireType.Varint).bool(message.ipWasSharedWithFriend);
        /* optional bool ip_was_shared_with_nonfriend = 11; */
        if (message.ipWasSharedWithNonfriend !== undefined)
            writer.tag(11, WireType.Varint).bool(message.ipWasSharedWithNonfriend);
        /* optional uint32 active_connections = 20; */
        if (message.activeConnections !== undefined)
            writer.tag(20, WireType.Varint).uint32(message.activeConnections);
        /* optional CGameNetworkingUI_ConnectionSummary main_cxn = 30; */
        if (message.mainCxn)
            CGameNetworkingUI_ConnectionSummary.internalBinaryWrite(message.mainCxn, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_AppSummary
 */
export const CGameNetworkingUI_AppSummary = new CGameNetworkingUI_AppSummary$Type();
