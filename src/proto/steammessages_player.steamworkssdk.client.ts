// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "steammessages_player.steamworkssdk.proto" (syntax proto2)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Player } from "./steammessages_player.steamworkssdk";
import type { CPlayer_UpdateSteamAnnouncementLastRead_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_UpdateSteamAnnouncementLastRead_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetNewSteamAnnouncementState_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetNewSteamAnnouncementState_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_SetCommunityPreferences_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_SetCommunityPreferences_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetCommunityPreferences_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetCommunityPreferences_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_IgnoreFriend_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_IgnoreFriend_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_RemoveFriend_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_RemoveFriend_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_AddFriend_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_AddFriend_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_SetPerFriendPreferences_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_SetPerFriendPreferences_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetPerFriendPreferences_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetPerFriendPreferences_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetNicknameList_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetNicknameList_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_AcceptSSA_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_AcceptSSA_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetLastPlayedTimes_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetLastPlayedTimes_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetGameBadgeLevels_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetGameBadgeLevels_Request } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetFriendsGameplayInfo_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetFriendsGameplayInfo_Request } from "./steammessages_player.steamworkssdk";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CPlayer_GetMutualFriendsForIncomingInvites_Response } from "./steammessages_player.steamworkssdk";
import type { CPlayer_GetMutualFriendsForIncomingInvites_Request } from "./steammessages_player.steamworkssdk";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Player
 */
export interface IPlayerClient {
    /**
     * @generated from protobuf rpc: GetMutualFriendsForIncomingInvites(CPlayer_GetMutualFriendsForIncomingInvites_Request) returns (CPlayer_GetMutualFriendsForIncomingInvites_Response);
     */
    getMutualFriendsForIncomingInvites(input: CPlayer_GetMutualFriendsForIncomingInvites_Request, options?: RpcOptions): UnaryCall<CPlayer_GetMutualFriendsForIncomingInvites_Request, CPlayer_GetMutualFriendsForIncomingInvites_Response>;
    /**
     * @generated from protobuf rpc: GetFriendsGameplayInfo(CPlayer_GetFriendsGameplayInfo_Request) returns (CPlayer_GetFriendsGameplayInfo_Response);
     */
    getFriendsGameplayInfo(input: CPlayer_GetFriendsGameplayInfo_Request, options?: RpcOptions): UnaryCall<CPlayer_GetFriendsGameplayInfo_Request, CPlayer_GetFriendsGameplayInfo_Response>;
    /**
     * @generated from protobuf rpc: GetGameBadgeLevels(CPlayer_GetGameBadgeLevels_Request) returns (CPlayer_GetGameBadgeLevels_Response);
     */
    getGameBadgeLevels(input: CPlayer_GetGameBadgeLevels_Request, options?: RpcOptions): UnaryCall<CPlayer_GetGameBadgeLevels_Request, CPlayer_GetGameBadgeLevels_Response>;
    /**
     * @generated from protobuf rpc: ClientGetLastPlayedTimes(CPlayer_GetLastPlayedTimes_Request) returns (CPlayer_GetLastPlayedTimes_Response);
     */
    clientGetLastPlayedTimes(input: CPlayer_GetLastPlayedTimes_Request, options?: RpcOptions): UnaryCall<CPlayer_GetLastPlayedTimes_Request, CPlayer_GetLastPlayedTimes_Response>;
    /**
     * @generated from protobuf rpc: AcceptSSA(CPlayer_AcceptSSA_Request) returns (CPlayer_AcceptSSA_Response);
     */
    acceptSSA(input: CPlayer_AcceptSSA_Request, options?: RpcOptions): UnaryCall<CPlayer_AcceptSSA_Request, CPlayer_AcceptSSA_Response>;
    /**
     * @generated from protobuf rpc: GetNicknameList(CPlayer_GetNicknameList_Request) returns (CPlayer_GetNicknameList_Response);
     */
    getNicknameList(input: CPlayer_GetNicknameList_Request, options?: RpcOptions): UnaryCall<CPlayer_GetNicknameList_Request, CPlayer_GetNicknameList_Response>;
    /**
     * @generated from protobuf rpc: GetPerFriendPreferences(CPlayer_GetPerFriendPreferences_Request) returns (CPlayer_GetPerFriendPreferences_Response);
     */
    getPerFriendPreferences(input: CPlayer_GetPerFriendPreferences_Request, options?: RpcOptions): UnaryCall<CPlayer_GetPerFriendPreferences_Request, CPlayer_GetPerFriendPreferences_Response>;
    /**
     * @generated from protobuf rpc: SetPerFriendPreferences(CPlayer_SetPerFriendPreferences_Request) returns (CPlayer_SetPerFriendPreferences_Response);
     */
    setPerFriendPreferences(input: CPlayer_SetPerFriendPreferences_Request, options?: RpcOptions): UnaryCall<CPlayer_SetPerFriendPreferences_Request, CPlayer_SetPerFriendPreferences_Response>;
    /**
     * @generated from protobuf rpc: AddFriend(CPlayer_AddFriend_Request) returns (CPlayer_AddFriend_Response);
     */
    addFriend(input: CPlayer_AddFriend_Request, options?: RpcOptions): UnaryCall<CPlayer_AddFriend_Request, CPlayer_AddFriend_Response>;
    /**
     * @generated from protobuf rpc: RemoveFriend(CPlayer_RemoveFriend_Request) returns (CPlayer_RemoveFriend_Response);
     */
    removeFriend(input: CPlayer_RemoveFriend_Request, options?: RpcOptions): UnaryCall<CPlayer_RemoveFriend_Request, CPlayer_RemoveFriend_Response>;
    /**
     * @generated from protobuf rpc: IgnoreFriend(CPlayer_IgnoreFriend_Request) returns (CPlayer_IgnoreFriend_Response);
     */
    ignoreFriend(input: CPlayer_IgnoreFriend_Request, options?: RpcOptions): UnaryCall<CPlayer_IgnoreFriend_Request, CPlayer_IgnoreFriend_Response>;
    /**
     * @generated from protobuf rpc: GetCommunityPreferences(CPlayer_GetCommunityPreferences_Request) returns (CPlayer_GetCommunityPreferences_Response);
     */
    getCommunityPreferences(input: CPlayer_GetCommunityPreferences_Request, options?: RpcOptions): UnaryCall<CPlayer_GetCommunityPreferences_Request, CPlayer_GetCommunityPreferences_Response>;
    /**
     * @generated from protobuf rpc: SetCommunityPreferences(CPlayer_SetCommunityPreferences_Request) returns (CPlayer_SetCommunityPreferences_Response);
     */
    setCommunityPreferences(input: CPlayer_SetCommunityPreferences_Request, options?: RpcOptions): UnaryCall<CPlayer_SetCommunityPreferences_Request, CPlayer_SetCommunityPreferences_Response>;
    /**
     * @generated from protobuf rpc: GetNewSteamAnnouncementState(CPlayer_GetNewSteamAnnouncementState_Request) returns (CPlayer_GetNewSteamAnnouncementState_Response);
     */
    getNewSteamAnnouncementState(input: CPlayer_GetNewSteamAnnouncementState_Request, options?: RpcOptions): UnaryCall<CPlayer_GetNewSteamAnnouncementState_Request, CPlayer_GetNewSteamAnnouncementState_Response>;
    /**
     * @generated from protobuf rpc: UpdateSteamAnnouncementLastRead(CPlayer_UpdateSteamAnnouncementLastRead_Request) returns (CPlayer_UpdateSteamAnnouncementLastRead_Response);
     */
    updateSteamAnnouncementLastRead(input: CPlayer_UpdateSteamAnnouncementLastRead_Request, options?: RpcOptions): UnaryCall<CPlayer_UpdateSteamAnnouncementLastRead_Request, CPlayer_UpdateSteamAnnouncementLastRead_Response>;
}
/**
 * @generated from protobuf service Player
 */
export class PlayerClient implements IPlayerClient, ServiceInfo {
    typeName = Player.typeName;
    methods = Player.methods;
    options = Player.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetMutualFriendsForIncomingInvites(CPlayer_GetMutualFriendsForIncomingInvites_Request) returns (CPlayer_GetMutualFriendsForIncomingInvites_Response);
     */
    getMutualFriendsForIncomingInvites(input: CPlayer_GetMutualFriendsForIncomingInvites_Request, options?: RpcOptions): UnaryCall<CPlayer_GetMutualFriendsForIncomingInvites_Request, CPlayer_GetMutualFriendsForIncomingInvites_Response> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_GetMutualFriendsForIncomingInvites_Request, CPlayer_GetMutualFriendsForIncomingInvites_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetFriendsGameplayInfo(CPlayer_GetFriendsGameplayInfo_Request) returns (CPlayer_GetFriendsGameplayInfo_Response);
     */
    getFriendsGameplayInfo(input: CPlayer_GetFriendsGameplayInfo_Request, options?: RpcOptions): UnaryCall<CPlayer_GetFriendsGameplayInfo_Request, CPlayer_GetFriendsGameplayInfo_Response> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_GetFriendsGameplayInfo_Request, CPlayer_GetFriendsGameplayInfo_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGameBadgeLevels(CPlayer_GetGameBadgeLevels_Request) returns (CPlayer_GetGameBadgeLevels_Response);
     */
    getGameBadgeLevels(input: CPlayer_GetGameBadgeLevels_Request, options?: RpcOptions): UnaryCall<CPlayer_GetGameBadgeLevels_Request, CPlayer_GetGameBadgeLevels_Response> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_GetGameBadgeLevels_Request, CPlayer_GetGameBadgeLevels_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ClientGetLastPlayedTimes(CPlayer_GetLastPlayedTimes_Request) returns (CPlayer_GetLastPlayedTimes_Response);
     */
    clientGetLastPlayedTimes(input: CPlayer_GetLastPlayedTimes_Request, options?: RpcOptions): UnaryCall<CPlayer_GetLastPlayedTimes_Request, CPlayer_GetLastPlayedTimes_Response> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_GetLastPlayedTimes_Request, CPlayer_GetLastPlayedTimes_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AcceptSSA(CPlayer_AcceptSSA_Request) returns (CPlayer_AcceptSSA_Response);
     */
    acceptSSA(input: CPlayer_AcceptSSA_Request, options?: RpcOptions): UnaryCall<CPlayer_AcceptSSA_Request, CPlayer_AcceptSSA_Response> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_AcceptSSA_Request, CPlayer_AcceptSSA_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetNicknameList(CPlayer_GetNicknameList_Request) returns (CPlayer_GetNicknameList_Response);
     */
    getNicknameList(input: CPlayer_GetNicknameList_Request, options?: RpcOptions): UnaryCall<CPlayer_GetNicknameList_Request, CPlayer_GetNicknameList_Response> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_GetNicknameList_Request, CPlayer_GetNicknameList_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPerFriendPreferences(CPlayer_GetPerFriendPreferences_Request) returns (CPlayer_GetPerFriendPreferences_Response);
     */
    getPerFriendPreferences(input: CPlayer_GetPerFriendPreferences_Request, options?: RpcOptions): UnaryCall<CPlayer_GetPerFriendPreferences_Request, CPlayer_GetPerFriendPreferences_Response> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_GetPerFriendPreferences_Request, CPlayer_GetPerFriendPreferences_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetPerFriendPreferences(CPlayer_SetPerFriendPreferences_Request) returns (CPlayer_SetPerFriendPreferences_Response);
     */
    setPerFriendPreferences(input: CPlayer_SetPerFriendPreferences_Request, options?: RpcOptions): UnaryCall<CPlayer_SetPerFriendPreferences_Request, CPlayer_SetPerFriendPreferences_Response> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_SetPerFriendPreferences_Request, CPlayer_SetPerFriendPreferences_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddFriend(CPlayer_AddFriend_Request) returns (CPlayer_AddFriend_Response);
     */
    addFriend(input: CPlayer_AddFriend_Request, options?: RpcOptions): UnaryCall<CPlayer_AddFriend_Request, CPlayer_AddFriend_Response> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_AddFriend_Request, CPlayer_AddFriend_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveFriend(CPlayer_RemoveFriend_Request) returns (CPlayer_RemoveFriend_Response);
     */
    removeFriend(input: CPlayer_RemoveFriend_Request, options?: RpcOptions): UnaryCall<CPlayer_RemoveFriend_Request, CPlayer_RemoveFriend_Response> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_RemoveFriend_Request, CPlayer_RemoveFriend_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IgnoreFriend(CPlayer_IgnoreFriend_Request) returns (CPlayer_IgnoreFriend_Response);
     */
    ignoreFriend(input: CPlayer_IgnoreFriend_Request, options?: RpcOptions): UnaryCall<CPlayer_IgnoreFriend_Request, CPlayer_IgnoreFriend_Response> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_IgnoreFriend_Request, CPlayer_IgnoreFriend_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCommunityPreferences(CPlayer_GetCommunityPreferences_Request) returns (CPlayer_GetCommunityPreferences_Response);
     */
    getCommunityPreferences(input: CPlayer_GetCommunityPreferences_Request, options?: RpcOptions): UnaryCall<CPlayer_GetCommunityPreferences_Request, CPlayer_GetCommunityPreferences_Response> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_GetCommunityPreferences_Request, CPlayer_GetCommunityPreferences_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetCommunityPreferences(CPlayer_SetCommunityPreferences_Request) returns (CPlayer_SetCommunityPreferences_Response);
     */
    setCommunityPreferences(input: CPlayer_SetCommunityPreferences_Request, options?: RpcOptions): UnaryCall<CPlayer_SetCommunityPreferences_Request, CPlayer_SetCommunityPreferences_Response> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_SetCommunityPreferences_Request, CPlayer_SetCommunityPreferences_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetNewSteamAnnouncementState(CPlayer_GetNewSteamAnnouncementState_Request) returns (CPlayer_GetNewSteamAnnouncementState_Response);
     */
    getNewSteamAnnouncementState(input: CPlayer_GetNewSteamAnnouncementState_Request, options?: RpcOptions): UnaryCall<CPlayer_GetNewSteamAnnouncementState_Request, CPlayer_GetNewSteamAnnouncementState_Response> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_GetNewSteamAnnouncementState_Request, CPlayer_GetNewSteamAnnouncementState_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateSteamAnnouncementLastRead(CPlayer_UpdateSteamAnnouncementLastRead_Request) returns (CPlayer_UpdateSteamAnnouncementLastRead_Response);
     */
    updateSteamAnnouncementLastRead(input: CPlayer_UpdateSteamAnnouncementLastRead_Request, options?: RpcOptions): UnaryCall<CPlayer_UpdateSteamAnnouncementLastRead_Request, CPlayer_UpdateSteamAnnouncementLastRead_Response> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<CPlayer_UpdateSteamAnnouncementLastRead_Request, CPlayer_UpdateSteamAnnouncementLastRead_Response>("unary", this._transport, method, opt, input);
    }
}
