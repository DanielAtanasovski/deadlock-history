// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "citadel_usercmd.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CMsgQAngle } from "./networkbasetypes";
import { CMsgVector } from "./networkbasetypes";
import { CBaseUserCmdPB } from "./usercmd";
/**
 * @generated from protobuf message CCitadelUserCmdPB
 */
export interface CCitadelUserCmdPB {
  /**
   * @generated from protobuf field: optional CBaseUserCmdPB base = 1;
   */
  base?: CBaseUserCmdPB;
  /**
   * @generated from protobuf field: optional CMsgVector vec_camera_position = 2;
   */
  vecCameraPosition?: CMsgVector;
  /**
   * @generated from protobuf field: optional CMsgQAngle ang_camera_angles = 3;
   */
  angCameraAngles?: CMsgQAngle;
  /**
   * @generated from protobuf field: optional int32 execute_ability_indices = 4;
   */
  executeAbilityIndices?: number;
  /**
   * @generated from protobuf field: optional bool in_shop = 5;
   */
  inShop?: boolean;
  /**
   * @generated from protobuf field: optional float camera_roaming_speed = 6;
   */
  cameraRoamingSpeed?: number;
  /**
   * @generated from protobuf field: optional bool using_free_cursor = 8;
   */
  usingFreeCursor?: boolean;
  /**
   * @generated from protobuf field: optional int32 enemy_hero_aimed_at = 10;
   */
  enemyHeroAimedAt?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelUserCmdPB$Type extends MessageType<CCitadelUserCmdPB> {
  constructor() {
    super("CCitadelUserCmdPB", [
      { no: 1, name: "base", kind: "message", T: () => CBaseUserCmdPB },
      {
        no: 2,
        name: "vec_camera_position",
        kind: "message",
        T: () => CMsgVector,
      },
      {
        no: 3,
        name: "ang_camera_angles",
        kind: "message",
        T: () => CMsgQAngle,
      },
      {
        no: 4,
        name: "execute_ability_indices",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 5,
        name: "in_shop",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 6,
        name: "camera_roaming_speed",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 8,
        name: "using_free_cursor",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 10,
        name: "enemy_hero_aimed_at",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CCitadelUserCmdPB>): CCitadelUserCmdPB {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelUserCmdPB>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelUserCmdPB,
  ): CCitadelUserCmdPB {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CBaseUserCmdPB base */ 1:
          message.base = CBaseUserCmdPB.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.base,
          );
          break;
        case /* optional CMsgVector vec_camera_position */ 2:
          message.vecCameraPosition = CMsgVector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.vecCameraPosition,
          );
          break;
        case /* optional CMsgQAngle ang_camera_angles */ 3:
          message.angCameraAngles = CMsgQAngle.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.angCameraAngles,
          );
          break;
        case /* optional int32 execute_ability_indices */ 4:
          message.executeAbilityIndices = reader.int32();
          break;
        case /* optional bool in_shop */ 5:
          message.inShop = reader.bool();
          break;
        case /* optional float camera_roaming_speed */ 6:
          message.cameraRoamingSpeed = reader.float();
          break;
        case /* optional bool using_free_cursor */ 8:
          message.usingFreeCursor = reader.bool();
          break;
        case /* optional int32 enemy_hero_aimed_at */ 10:
          message.enemyHeroAimedAt = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelUserCmdPB,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CBaseUserCmdPB base = 1; */
    if (message.base)
      CBaseUserCmdPB.internalBinaryWrite(
        message.base,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgVector vec_camera_position = 2; */
    if (message.vecCameraPosition)
      CMsgVector.internalBinaryWrite(
        message.vecCameraPosition,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgQAngle ang_camera_angles = 3; */
    if (message.angCameraAngles)
      CMsgQAngle.internalBinaryWrite(
        message.angCameraAngles,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional int32 execute_ability_indices = 4; */
    if (message.executeAbilityIndices !== undefined)
      writer.tag(4, WireType.Varint).int32(message.executeAbilityIndices);
    /* optional bool in_shop = 5; */
    if (message.inShop !== undefined)
      writer.tag(5, WireType.Varint).bool(message.inShop);
    /* optional float camera_roaming_speed = 6; */
    if (message.cameraRoamingSpeed !== undefined)
      writer.tag(6, WireType.Bit32).float(message.cameraRoamingSpeed);
    /* optional bool using_free_cursor = 8; */
    if (message.usingFreeCursor !== undefined)
      writer.tag(8, WireType.Varint).bool(message.usingFreeCursor);
    /* optional int32 enemy_hero_aimed_at = 10; */
    if (message.enemyHeroAimedAt !== undefined)
      writer.tag(10, WireType.Varint).int32(message.enemyHeroAimedAt);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelUserCmdPB
 */
export const CCitadelUserCmdPB = new CCitadelUserCmdPB$Type();
