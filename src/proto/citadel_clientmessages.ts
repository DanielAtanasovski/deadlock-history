// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "citadel_clientmessages.proto" (syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CMsgLaneColor } from "./citadel_gcmessages_common";
import { CMsgMapLine } from "./citadel_gcmessages_common";
import { CMsgVector } from "./networkbasetypes";
/**
 * @generated from protobuf message CCitadelClientMsg_Pause
 */
export interface CCitadelClientMsg_Pause {}
/**
 * @generated from protobuf message CCitadelClientMsg_MapPing
 */
export interface CCitadelClientMsg_MapPing {
  /**
   * @generated from protobuf field: optional CMsgVector ping_location = 1;
   */
  pingLocation?: CMsgVector;
  /**
   * @generated from protobuf field: optional int32 event_type = 2;
   */
  eventType?: number;
  /**
   * @generated from protobuf field: optional int32 entity_index = 3;
   */
  entityIndex?: number;
  /**
   * @generated from protobuf field: optional bool is_aggressive_ping = 4;
   */
  isAggressivePing?: boolean;
  /**
   * @generated from protobuf field: optional bool is_minimap_ping = 5;
   */
  isMinimapPing?: boolean;
  /**
   * @generated from protobuf field: optional bool is_blind_ping = 6;
   */
  isBlindPing?: boolean;
}
/**
 * @generated from protobuf message CCitadelClientMsg_PingWheel
 */
export interface CCitadelClientMsg_PingWheel {
  /**
   * @generated from protobuf field: optional uint32 ping_wheel_option_id = 1;
   */
  pingWheelOptionId?: number;
  /**
   * @generated from protobuf field: optional uint32 subnav_message_id = 2;
   */
  subnavMessageId?: number;
  /**
   * @generated from protobuf field: optional CMsgVector ping_location = 3;
   */
  pingLocation?: CMsgVector;
  /**
   * @generated from protobuf field: optional int32 entity_index = 4;
   */
  entityIndex?: number;
}
/**
 * @generated from protobuf message CCitadelClientMsg_AbilityPing
 */
export interface CCitadelClientMsg_AbilityPing {
  /**
   * @generated from protobuf field: optional int32 entity_index = 1;
   */
  entityIndex?: number;
  /**
   * @generated from protobuf field: optional uint32 pinged_ability_id = 2;
   */
  pingedAbilityId?: number;
  /**
   * @generated from protobuf field: optional int32 pinged_player_slot = 3;
   */
  pingedPlayerSlot?: number;
}
/**
 * @generated from protobuf message CCitadelClientMsg_MapLine
 */
export interface CCitadelClientMsg_MapLine {
  /**
   * @generated from protobuf field: optional CMsgMapLine mapline = 1;
   */
  mapline?: CMsgMapLine;
}
/**
 * @generated from protobuf message CCitadelClientMsg_QuickResponse
 */
export interface CCitadelClientMsg_QuickResponse {
  /**
   * @generated from protobuf field: optional uint32 ping_wheel_message_id = 1;
   */
  pingWheelMessageId?: number;
  /**
   * @generated from protobuf field: optional uint32 responding_to_ping_message_id = 2;
   */
  respondingToPingMessageId?: number;
  /**
   * @generated from protobuf field: optional int32 responding_to_player_slot = 3;
   */
  respondingToPlayerSlot?: number;
}
/**
 * @generated from protobuf message CCitadelClientMsg_PerformanceStats
 */
export interface CCitadelClientMsg_PerformanceStats {
  /**
   * @generated from protobuf field: optional float current_game_time = 1;
   */
  currentGameTime?: number;
  /**
   * @generated from protobuf field: optional float average_fps = 2;
   */
  averageFps?: number;
  /**
   * @generated from protobuf field: optional float min_fps = 3;
   */
  minFps?: number;
  /**
   * @generated from protobuf field: optional float max_fps = 4;
   */
  maxFps?: number;
}
/**
 * @generated from protobuf message CCitadelClientMsg_ChatMsg
 */
export interface CCitadelClientMsg_ChatMsg {
  /**
   * @generated from protobuf field: optional string chat_text = 1;
   */
  chatText?: string;
  /**
   * @generated from protobuf field: optional bool all_chat = 2;
   */
  allChat?: boolean;
  /**
   * @generated from protobuf field: optional CMsgLaneColor lane_color = 3;
   */
  laneColor?: CMsgLaneColor;
}
/**
 * @generated from protobuf message CCitadelClientMsg_PerfReport
 */
export interface CCitadelClientMsg_PerfReport {
  /**
   * @generated from protobuf field: optional float average_frame_time = 1;
   */
  averageFrameTime?: number;
  /**
   * @generated from protobuf field: optional float max_frame_time = 2;
   */
  maxFrameTime?: number;
  /**
   * @generated from protobuf field: optional float average_compute_time = 3;
   */
  averageComputeTime?: number;
  /**
   * @generated from protobuf field: optional float max_compute_time = 4;
   */
  maxComputeTime?: number;
  /**
   * @generated from protobuf field: optional float average_client_tick_time = 5;
   */
  averageClientTickTime?: number;
  /**
   * @generated from protobuf field: optional float max_client_tick_time = 6;
   */
  maxClientTickTime?: number;
  /**
   * @generated from protobuf field: optional float average_client_simulate_time = 7;
   */
  averageClientSimulateTime?: number;
  /**
   * @generated from protobuf field: optional float max_client_simulate_time = 8;
   */
  maxClientSimulateTime?: number;
  /**
   * @generated from protobuf field: optional float average_output_time = 9;
   */
  averageOutputTime?: number;
  /**
   * @generated from protobuf field: optional float max_output_time = 10;
   */
  maxOutputTime?: number;
  /**
   * @generated from protobuf field: optional float average_wait_for_rendering_to_complete_time = 11;
   */
  averageWaitForRenderingToCompleteTime?: number;
  /**
   * @generated from protobuf field: optional float max_wait_for_rendering_to_complete_time = 12;
   */
  maxWaitForRenderingToCompleteTime?: number;
  /**
   * @generated from protobuf field: optional float average_swap_time = 13;
   */
  averageSwapTime?: number;
  /**
   * @generated from protobuf field: optional float max_swap_time = 14;
   */
  maxSwapTime?: number;
  /**
   * @generated from protobuf field: optional float average_frame_update_time = 15;
   */
  averageFrameUpdateTime?: number;
  /**
   * @generated from protobuf field: optional float max_frame_update_time = 16;
   */
  maxFrameUpdateTime?: number;
  /**
   * @generated from protobuf field: optional float average_idle_time = 17;
   */
  averageIdleTime?: number;
  /**
   * @generated from protobuf field: optional float max_idle_time = 18;
   */
  maxIdleTime?: number;
  /**
   * @generated from protobuf field: optional float average_input_processing_time = 19;
   */
  averageInputProcessingTime?: number;
  /**
   * @generated from protobuf field: optional float max_input_processing_time = 20;
   */
  maxInputProcessingTime?: number;
}
/**
 * @generated from protobuf message CCitadelClientMsg_GetDamageStats
 */
export interface CCitadelClientMsg_GetDamageStats {
  /**
   * @generated from protobuf field: optional uint32 lobby_player_slot = 1;
   */
  lobbyPlayerSlot?: number;
  /**
   * @generated from protobuf field: optional string ability_name = 2;
   */
  abilityName?: string;
}
/**
 * @generated from protobuf message CCitadelClientCachedPlayerStats
 */
export interface CCitadelClientCachedPlayerStats {
  /**
   * @generated from protobuf field: optional uint32 version = 1;
   */
  version?: number;
  /**
   * @generated from protobuf field: repeated CCitadelClientCachedPlayerStats.Stat stats = 2;
   */
  stats: CCitadelClientCachedPlayerStats_Stat[];
}
/**
 * @generated from protobuf message CCitadelClientCachedPlayerStats.Stat
 */
export interface CCitadelClientCachedPlayerStats_Stat {
  /**
   * @generated from protobuf field: optional string stat_name = 1;
   */
  statName?: string;
  /**
   * @generated from protobuf field: optional uint64 all_time_total = 2;
   */
  allTimeTotal?: bigint;
  /**
   * @generated from protobuf field: optional uint32 all_time_match_max = 3;
   */
  allTimeMatchMax?: number;
  /**
   * @generated from protobuf field: optional uint32 all_time_life_max = 4;
   */
  allTimeLifeMax?: number;
}
/**
 * @generated from protobuf message CCitadelClientMsg_ExecuteMapUnitAbility
 */
export interface CCitadelClientMsg_ExecuteMapUnitAbility {
  /**
   * @generated from protobuf field: optional int32 ability_entity_index = 1;
   */
  abilityEntityIndex?: number;
  /**
   * @generated from protobuf field: optional int32 target_entity_index = 2;
   */
  targetEntityIndex?: number;
}
/**
 * @generated from protobuf enum ECitadelClientMessages
 */
export enum ECitadelClientMessages {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: CITADEL_CM_MapPing = 1002;
   */
  CITADEL_CM_MapPing = 1002,
  /**
   * @generated from protobuf enum value: CITADEL_CM_PerformanceStats = 1003;
   */
  CITADEL_CM_PerformanceStats = 1003,
  /**
   * @generated from protobuf enum value: CITADEL_CM_PingWheel = 1004;
   */
  CITADEL_CM_PingWheel = 1004,
  /**
   * @generated from protobuf enum value: CITADEL_CM_ChatMsg = 1005;
   */
  CITADEL_CM_ChatMsg = 1005,
  /**
   * @generated from protobuf enum value: CITADEL_CM_PerfReport = 1006;
   */
  CITADEL_CM_PerfReport = 1006,
  /**
   * @generated from protobuf enum value: CITADEL_CM_QuickResponse = 1007;
   */
  CITADEL_CM_QuickResponse = 1007,
  /**
   * @generated from protobuf enum value: CITADEL_CM_Pause = 1008;
   */
  CITADEL_CM_Pause = 1008,
  /**
   * @generated from protobuf enum value: CITADEL_CM_MapLine = 1009;
   */
  CITADEL_CM_MapLine = 1009,
  /**
   * @generated from protobuf enum value: CITADEL_CM_AbilityPing = 1010;
   */
  CITADEL_CM_AbilityPing = 1010,
  /**
   * @generated from protobuf enum value: CITADEL_CM_ExecuteMapUnitAbility = 1011;
   */
  CITADEL_CM_ExecuteMapUnitAbility = 1011,
  /**
   * @generated from protobuf enum value: CITADEL_CM_GetDamageStats = 1012;
   */
  CITADEL_CM_GetDamageStats = 1012,
}
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_Pause$Type extends MessageType<CCitadelClientMsg_Pause> {
  constructor() {
    super("CCitadelClientMsg_Pause", []);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_Pause>,
  ): CCitadelClientMsg_Pause {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_Pause>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_Pause,
  ): CCitadelClientMsg_Pause {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_Pause,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_Pause
 */
export const CCitadelClientMsg_Pause = new CCitadelClientMsg_Pause$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_MapPing$Type extends MessageType<CCitadelClientMsg_MapPing> {
  constructor() {
    super("CCitadelClientMsg_MapPing", [
      { no: 1, name: "ping_location", kind: "message", T: () => CMsgVector },
      {
        no: 2,
        name: "event_type",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 3,
        name: "entity_index",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: "is_aggressive_ping",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 5,
        name: "is_minimap_ping",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 6,
        name: "is_blind_ping",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_MapPing>,
  ): CCitadelClientMsg_MapPing {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_MapPing>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_MapPing,
  ): CCitadelClientMsg_MapPing {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgVector ping_location */ 1:
          message.pingLocation = CMsgVector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.pingLocation,
          );
          break;
        case /* optional int32 event_type */ 2:
          message.eventType = reader.int32();
          break;
        case /* optional int32 entity_index */ 3:
          message.entityIndex = reader.int32();
          break;
        case /* optional bool is_aggressive_ping */ 4:
          message.isAggressivePing = reader.bool();
          break;
        case /* optional bool is_minimap_ping */ 5:
          message.isMinimapPing = reader.bool();
          break;
        case /* optional bool is_blind_ping */ 6:
          message.isBlindPing = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_MapPing,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgVector ping_location = 1; */
    if (message.pingLocation)
      CMsgVector.internalBinaryWrite(
        message.pingLocation,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional int32 event_type = 2; */
    if (message.eventType !== undefined)
      writer.tag(2, WireType.Varint).int32(message.eventType);
    /* optional int32 entity_index = 3; */
    if (message.entityIndex !== undefined)
      writer.tag(3, WireType.Varint).int32(message.entityIndex);
    /* optional bool is_aggressive_ping = 4; */
    if (message.isAggressivePing !== undefined)
      writer.tag(4, WireType.Varint).bool(message.isAggressivePing);
    /* optional bool is_minimap_ping = 5; */
    if (message.isMinimapPing !== undefined)
      writer.tag(5, WireType.Varint).bool(message.isMinimapPing);
    /* optional bool is_blind_ping = 6; */
    if (message.isBlindPing !== undefined)
      writer.tag(6, WireType.Varint).bool(message.isBlindPing);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_MapPing
 */
export const CCitadelClientMsg_MapPing = new CCitadelClientMsg_MapPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_PingWheel$Type extends MessageType<CCitadelClientMsg_PingWheel> {
  constructor() {
    super("CCitadelClientMsg_PingWheel", [
      {
        no: 1,
        name: "ping_wheel_option_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "subnav_message_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      { no: 3, name: "ping_location", kind: "message", T: () => CMsgVector },
      {
        no: 4,
        name: "entity_index",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_PingWheel>,
  ): CCitadelClientMsg_PingWheel {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_PingWheel>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_PingWheel,
  ): CCitadelClientMsg_PingWheel {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 ping_wheel_option_id */ 1:
          message.pingWheelOptionId = reader.uint32();
          break;
        case /* optional uint32 subnav_message_id */ 2:
          message.subnavMessageId = reader.uint32();
          break;
        case /* optional CMsgVector ping_location */ 3:
          message.pingLocation = CMsgVector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.pingLocation,
          );
          break;
        case /* optional int32 entity_index */ 4:
          message.entityIndex = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_PingWheel,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 ping_wheel_option_id = 1; */
    if (message.pingWheelOptionId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.pingWheelOptionId);
    /* optional uint32 subnav_message_id = 2; */
    if (message.subnavMessageId !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.subnavMessageId);
    /* optional CMsgVector ping_location = 3; */
    if (message.pingLocation)
      CMsgVector.internalBinaryWrite(
        message.pingLocation,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional int32 entity_index = 4; */
    if (message.entityIndex !== undefined)
      writer.tag(4, WireType.Varint).int32(message.entityIndex);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_PingWheel
 */
export const CCitadelClientMsg_PingWheel =
  new CCitadelClientMsg_PingWheel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_AbilityPing$Type extends MessageType<CCitadelClientMsg_AbilityPing> {
  constructor() {
    super("CCitadelClientMsg_AbilityPing", [
      {
        no: 1,
        name: "entity_index",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 2,
        name: "pinged_ability_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "pinged_player_slot",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_AbilityPing>,
  ): CCitadelClientMsg_AbilityPing {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_AbilityPing>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_AbilityPing,
  ): CCitadelClientMsg_AbilityPing {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional int32 entity_index */ 1:
          message.entityIndex = reader.int32();
          break;
        case /* optional uint32 pinged_ability_id */ 2:
          message.pingedAbilityId = reader.uint32();
          break;
        case /* optional int32 pinged_player_slot */ 3:
          message.pingedPlayerSlot = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_AbilityPing,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional int32 entity_index = 1; */
    if (message.entityIndex !== undefined)
      writer.tag(1, WireType.Varint).int32(message.entityIndex);
    /* optional uint32 pinged_ability_id = 2; */
    if (message.pingedAbilityId !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.pingedAbilityId);
    /* optional int32 pinged_player_slot = 3; */
    if (message.pingedPlayerSlot !== undefined)
      writer.tag(3, WireType.Varint).int32(message.pingedPlayerSlot);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_AbilityPing
 */
export const CCitadelClientMsg_AbilityPing =
  new CCitadelClientMsg_AbilityPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_MapLine$Type extends MessageType<CCitadelClientMsg_MapLine> {
  constructor() {
    super("CCitadelClientMsg_MapLine", [
      { no: 1, name: "mapline", kind: "message", T: () => CMsgMapLine },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_MapLine>,
  ): CCitadelClientMsg_MapLine {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_MapLine>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_MapLine,
  ): CCitadelClientMsg_MapLine {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgMapLine mapline */ 1:
          message.mapline = CMsgMapLine.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.mapline,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_MapLine,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgMapLine mapline = 1; */
    if (message.mapline)
      CMsgMapLine.internalBinaryWrite(
        message.mapline,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_MapLine
 */
export const CCitadelClientMsg_MapLine = new CCitadelClientMsg_MapLine$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_QuickResponse$Type extends MessageType<CCitadelClientMsg_QuickResponse> {
  constructor() {
    super("CCitadelClientMsg_QuickResponse", [
      {
        no: 1,
        name: "ping_wheel_message_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "responding_to_ping_message_id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "responding_to_player_slot",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_QuickResponse>,
  ): CCitadelClientMsg_QuickResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_QuickResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_QuickResponse,
  ): CCitadelClientMsg_QuickResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 ping_wheel_message_id */ 1:
          message.pingWheelMessageId = reader.uint32();
          break;
        case /* optional uint32 responding_to_ping_message_id */ 2:
          message.respondingToPingMessageId = reader.uint32();
          break;
        case /* optional int32 responding_to_player_slot */ 3:
          message.respondingToPlayerSlot = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_QuickResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 ping_wheel_message_id = 1; */
    if (message.pingWheelMessageId !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.pingWheelMessageId);
    /* optional uint32 responding_to_ping_message_id = 2; */
    if (message.respondingToPingMessageId !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.respondingToPingMessageId);
    /* optional int32 responding_to_player_slot = 3; */
    if (message.respondingToPlayerSlot !== undefined)
      writer.tag(3, WireType.Varint).int32(message.respondingToPlayerSlot);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_QuickResponse
 */
export const CCitadelClientMsg_QuickResponse =
  new CCitadelClientMsg_QuickResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_PerformanceStats$Type extends MessageType<CCitadelClientMsg_PerformanceStats> {
  constructor() {
    super("CCitadelClientMsg_PerformanceStats", [
      {
        no: 1,
        name: "current_game_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: "average_fps",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "min_fps",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 4,
        name: "max_fps",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_PerformanceStats>,
  ): CCitadelClientMsg_PerformanceStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_PerformanceStats>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_PerformanceStats,
  ): CCitadelClientMsg_PerformanceStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional float current_game_time */ 1:
          message.currentGameTime = reader.float();
          break;
        case /* optional float average_fps */ 2:
          message.averageFps = reader.float();
          break;
        case /* optional float min_fps */ 3:
          message.minFps = reader.float();
          break;
        case /* optional float max_fps */ 4:
          message.maxFps = reader.float();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_PerformanceStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional float current_game_time = 1; */
    if (message.currentGameTime !== undefined)
      writer.tag(1, WireType.Bit32).float(message.currentGameTime);
    /* optional float average_fps = 2; */
    if (message.averageFps !== undefined)
      writer.tag(2, WireType.Bit32).float(message.averageFps);
    /* optional float min_fps = 3; */
    if (message.minFps !== undefined)
      writer.tag(3, WireType.Bit32).float(message.minFps);
    /* optional float max_fps = 4; */
    if (message.maxFps !== undefined)
      writer.tag(4, WireType.Bit32).float(message.maxFps);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_PerformanceStats
 */
export const CCitadelClientMsg_PerformanceStats =
  new CCitadelClientMsg_PerformanceStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_ChatMsg$Type extends MessageType<CCitadelClientMsg_ChatMsg> {
  constructor() {
    super("CCitadelClientMsg_ChatMsg", [
      {
        no: 1,
        name: "chat_text",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "all_chat",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 3,
        name: "lane_color",
        kind: "enum",
        opt: true,
        T: () => ["CMsgLaneColor", CMsgLaneColor],
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_ChatMsg>,
  ): CCitadelClientMsg_ChatMsg {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_ChatMsg>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_ChatMsg,
  ): CCitadelClientMsg_ChatMsg {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string chat_text */ 1:
          message.chatText = reader.string();
          break;
        case /* optional bool all_chat */ 2:
          message.allChat = reader.bool();
          break;
        case /* optional CMsgLaneColor lane_color */ 3:
          message.laneColor = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_ChatMsg,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string chat_text = 1; */
    if (message.chatText !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.chatText);
    /* optional bool all_chat = 2; */
    if (message.allChat !== undefined)
      writer.tag(2, WireType.Varint).bool(message.allChat);
    /* optional CMsgLaneColor lane_color = 3; */
    if (message.laneColor !== undefined)
      writer.tag(3, WireType.Varint).int32(message.laneColor);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_ChatMsg
 */
export const CCitadelClientMsg_ChatMsg = new CCitadelClientMsg_ChatMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_PerfReport$Type extends MessageType<CCitadelClientMsg_PerfReport> {
  constructor() {
    super("CCitadelClientMsg_PerfReport", [
      {
        no: 1,
        name: "average_frame_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: "max_frame_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "average_compute_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 4,
        name: "max_compute_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 5,
        name: "average_client_tick_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 6,
        name: "max_client_tick_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 7,
        name: "average_client_simulate_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 8,
        name: "max_client_simulate_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 9,
        name: "average_output_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 10,
        name: "max_output_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 11,
        name: "average_wait_for_rendering_to_complete_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 12,
        name: "max_wait_for_rendering_to_complete_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 13,
        name: "average_swap_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 14,
        name: "max_swap_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 15,
        name: "average_frame_update_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 16,
        name: "max_frame_update_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 17,
        name: "average_idle_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 18,
        name: "max_idle_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 19,
        name: "average_input_processing_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 20,
        name: "max_input_processing_time",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_PerfReport>,
  ): CCitadelClientMsg_PerfReport {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_PerfReport>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_PerfReport,
  ): CCitadelClientMsg_PerfReport {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional float average_frame_time */ 1:
          message.averageFrameTime = reader.float();
          break;
        case /* optional float max_frame_time */ 2:
          message.maxFrameTime = reader.float();
          break;
        case /* optional float average_compute_time */ 3:
          message.averageComputeTime = reader.float();
          break;
        case /* optional float max_compute_time */ 4:
          message.maxComputeTime = reader.float();
          break;
        case /* optional float average_client_tick_time */ 5:
          message.averageClientTickTime = reader.float();
          break;
        case /* optional float max_client_tick_time */ 6:
          message.maxClientTickTime = reader.float();
          break;
        case /* optional float average_client_simulate_time */ 7:
          message.averageClientSimulateTime = reader.float();
          break;
        case /* optional float max_client_simulate_time */ 8:
          message.maxClientSimulateTime = reader.float();
          break;
        case /* optional float average_output_time */ 9:
          message.averageOutputTime = reader.float();
          break;
        case /* optional float max_output_time */ 10:
          message.maxOutputTime = reader.float();
          break;
        case /* optional float average_wait_for_rendering_to_complete_time */ 11:
          message.averageWaitForRenderingToCompleteTime = reader.float();
          break;
        case /* optional float max_wait_for_rendering_to_complete_time */ 12:
          message.maxWaitForRenderingToCompleteTime = reader.float();
          break;
        case /* optional float average_swap_time */ 13:
          message.averageSwapTime = reader.float();
          break;
        case /* optional float max_swap_time */ 14:
          message.maxSwapTime = reader.float();
          break;
        case /* optional float average_frame_update_time */ 15:
          message.averageFrameUpdateTime = reader.float();
          break;
        case /* optional float max_frame_update_time */ 16:
          message.maxFrameUpdateTime = reader.float();
          break;
        case /* optional float average_idle_time */ 17:
          message.averageIdleTime = reader.float();
          break;
        case /* optional float max_idle_time */ 18:
          message.maxIdleTime = reader.float();
          break;
        case /* optional float average_input_processing_time */ 19:
          message.averageInputProcessingTime = reader.float();
          break;
        case /* optional float max_input_processing_time */ 20:
          message.maxInputProcessingTime = reader.float();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_PerfReport,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional float average_frame_time = 1; */
    if (message.averageFrameTime !== undefined)
      writer.tag(1, WireType.Bit32).float(message.averageFrameTime);
    /* optional float max_frame_time = 2; */
    if (message.maxFrameTime !== undefined)
      writer.tag(2, WireType.Bit32).float(message.maxFrameTime);
    /* optional float average_compute_time = 3; */
    if (message.averageComputeTime !== undefined)
      writer.tag(3, WireType.Bit32).float(message.averageComputeTime);
    /* optional float max_compute_time = 4; */
    if (message.maxComputeTime !== undefined)
      writer.tag(4, WireType.Bit32).float(message.maxComputeTime);
    /* optional float average_client_tick_time = 5; */
    if (message.averageClientTickTime !== undefined)
      writer.tag(5, WireType.Bit32).float(message.averageClientTickTime);
    /* optional float max_client_tick_time = 6; */
    if (message.maxClientTickTime !== undefined)
      writer.tag(6, WireType.Bit32).float(message.maxClientTickTime);
    /* optional float average_client_simulate_time = 7; */
    if (message.averageClientSimulateTime !== undefined)
      writer.tag(7, WireType.Bit32).float(message.averageClientSimulateTime);
    /* optional float max_client_simulate_time = 8; */
    if (message.maxClientSimulateTime !== undefined)
      writer.tag(8, WireType.Bit32).float(message.maxClientSimulateTime);
    /* optional float average_output_time = 9; */
    if (message.averageOutputTime !== undefined)
      writer.tag(9, WireType.Bit32).float(message.averageOutputTime);
    /* optional float max_output_time = 10; */
    if (message.maxOutputTime !== undefined)
      writer.tag(10, WireType.Bit32).float(message.maxOutputTime);
    /* optional float average_wait_for_rendering_to_complete_time = 11; */
    if (message.averageWaitForRenderingToCompleteTime !== undefined)
      writer
        .tag(11, WireType.Bit32)
        .float(message.averageWaitForRenderingToCompleteTime);
    /* optional float max_wait_for_rendering_to_complete_time = 12; */
    if (message.maxWaitForRenderingToCompleteTime !== undefined)
      writer
        .tag(12, WireType.Bit32)
        .float(message.maxWaitForRenderingToCompleteTime);
    /* optional float average_swap_time = 13; */
    if (message.averageSwapTime !== undefined)
      writer.tag(13, WireType.Bit32).float(message.averageSwapTime);
    /* optional float max_swap_time = 14; */
    if (message.maxSwapTime !== undefined)
      writer.tag(14, WireType.Bit32).float(message.maxSwapTime);
    /* optional float average_frame_update_time = 15; */
    if (message.averageFrameUpdateTime !== undefined)
      writer.tag(15, WireType.Bit32).float(message.averageFrameUpdateTime);
    /* optional float max_frame_update_time = 16; */
    if (message.maxFrameUpdateTime !== undefined)
      writer.tag(16, WireType.Bit32).float(message.maxFrameUpdateTime);
    /* optional float average_idle_time = 17; */
    if (message.averageIdleTime !== undefined)
      writer.tag(17, WireType.Bit32).float(message.averageIdleTime);
    /* optional float max_idle_time = 18; */
    if (message.maxIdleTime !== undefined)
      writer.tag(18, WireType.Bit32).float(message.maxIdleTime);
    /* optional float average_input_processing_time = 19; */
    if (message.averageInputProcessingTime !== undefined)
      writer.tag(19, WireType.Bit32).float(message.averageInputProcessingTime);
    /* optional float max_input_processing_time = 20; */
    if (message.maxInputProcessingTime !== undefined)
      writer.tag(20, WireType.Bit32).float(message.maxInputProcessingTime);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_PerfReport
 */
export const CCitadelClientMsg_PerfReport =
  new CCitadelClientMsg_PerfReport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_GetDamageStats$Type extends MessageType<CCitadelClientMsg_GetDamageStats> {
  constructor() {
    super("CCitadelClientMsg_GetDamageStats", [
      {
        no: 1,
        name: "lobby_player_slot",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "ability_name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_GetDamageStats>,
  ): CCitadelClientMsg_GetDamageStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_GetDamageStats>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_GetDamageStats,
  ): CCitadelClientMsg_GetDamageStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 lobby_player_slot */ 1:
          message.lobbyPlayerSlot = reader.uint32();
          break;
        case /* optional string ability_name */ 2:
          message.abilityName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_GetDamageStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 lobby_player_slot = 1; */
    if (message.lobbyPlayerSlot !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.lobbyPlayerSlot);
    /* optional string ability_name = 2; */
    if (message.abilityName !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.abilityName);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_GetDamageStats
 */
export const CCitadelClientMsg_GetDamageStats =
  new CCitadelClientMsg_GetDamageStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientCachedPlayerStats$Type extends MessageType<CCitadelClientCachedPlayerStats> {
  constructor() {
    super("CCitadelClientCachedPlayerStats", [
      {
        no: 1,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "stats",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CCitadelClientCachedPlayerStats_Stat,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientCachedPlayerStats>,
  ): CCitadelClientCachedPlayerStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.stats = [];
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientCachedPlayerStats>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientCachedPlayerStats,
  ): CCitadelClientCachedPlayerStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 version */ 1:
          message.version = reader.uint32();
          break;
        case /* repeated CCitadelClientCachedPlayerStats.Stat stats */ 2:
          message.stats.push(
            CCitadelClientCachedPlayerStats_Stat.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientCachedPlayerStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 version = 1; */
    if (message.version !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.version);
    /* repeated CCitadelClientCachedPlayerStats.Stat stats = 2; */
    for (let i = 0; i < message.stats.length; i++)
      CCitadelClientCachedPlayerStats_Stat.internalBinaryWrite(
        message.stats[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientCachedPlayerStats
 */
export const CCitadelClientCachedPlayerStats =
  new CCitadelClientCachedPlayerStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientCachedPlayerStats_Stat$Type extends MessageType<CCitadelClientCachedPlayerStats_Stat> {
  constructor() {
    super("CCitadelClientCachedPlayerStats.Stat", [
      {
        no: 1,
        name: "stat_name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "all_time_total",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "all_time_match_max",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "all_time_life_max",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientCachedPlayerStats_Stat>,
  ): CCitadelClientCachedPlayerStats_Stat {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientCachedPlayerStats_Stat>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientCachedPlayerStats_Stat,
  ): CCitadelClientCachedPlayerStats_Stat {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string stat_name */ 1:
          message.statName = reader.string();
          break;
        case /* optional uint64 all_time_total */ 2:
          message.allTimeTotal = reader.uint64().toBigInt();
          break;
        case /* optional uint32 all_time_match_max */ 3:
          message.allTimeMatchMax = reader.uint32();
          break;
        case /* optional uint32 all_time_life_max */ 4:
          message.allTimeLifeMax = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientCachedPlayerStats_Stat,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string stat_name = 1; */
    if (message.statName !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.statName);
    /* optional uint64 all_time_total = 2; */
    if (message.allTimeTotal !== undefined)
      writer.tag(2, WireType.Varint).uint64(message.allTimeTotal);
    /* optional uint32 all_time_match_max = 3; */
    if (message.allTimeMatchMax !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.allTimeMatchMax);
    /* optional uint32 all_time_life_max = 4; */
    if (message.allTimeLifeMax !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.allTimeLifeMax);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientCachedPlayerStats.Stat
 */
export const CCitadelClientCachedPlayerStats_Stat =
  new CCitadelClientCachedPlayerStats_Stat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCitadelClientMsg_ExecuteMapUnitAbility$Type extends MessageType<CCitadelClientMsg_ExecuteMapUnitAbility> {
  constructor() {
    super("CCitadelClientMsg_ExecuteMapUnitAbility", [
      {
        no: 1,
        name: "ability_entity_index",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 2,
        name: "target_entity_index",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CCitadelClientMsg_ExecuteMapUnitAbility>,
  ): CCitadelClientMsg_ExecuteMapUnitAbility {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CCitadelClientMsg_ExecuteMapUnitAbility>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CCitadelClientMsg_ExecuteMapUnitAbility,
  ): CCitadelClientMsg_ExecuteMapUnitAbility {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional int32 ability_entity_index */ 1:
          message.abilityEntityIndex = reader.int32();
          break;
        case /* optional int32 target_entity_index */ 2:
          message.targetEntityIndex = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CCitadelClientMsg_ExecuteMapUnitAbility,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional int32 ability_entity_index = 1; */
    if (message.abilityEntityIndex !== undefined)
      writer.tag(1, WireType.Varint).int32(message.abilityEntityIndex);
    /* optional int32 target_entity_index = 2; */
    if (message.targetEntityIndex !== undefined)
      writer.tag(2, WireType.Varint).int32(message.targetEntityIndex);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CCitadelClientMsg_ExecuteMapUnitAbility
 */
export const CCitadelClientMsg_ExecuteMapUnitAbility =
  new CCitadelClientMsg_ExecuteMapUnitAbility$Type();
