// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "steammessages.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CMsgProtoBufHeader
 */
export interface CMsgProtoBufHeader {
    /**
     * @generated from protobuf field: optional fixed64 client_steam_id = 1;
     */
    clientSteamId?: bigint;
    /**
     * @generated from protobuf field: optional int32 client_session_id = 2;
     */
    clientSessionId?: number;
    /**
     * @generated from protobuf field: optional uint32 source_app_id = 3;
     */
    sourceAppId?: number;
    /**
     * @generated from protobuf field: optional fixed64 job_id_source = 10;
     */
    jobIdSource?: bigint;
    /**
     * @generated from protobuf field: optional fixed64 job_id_target = 11;
     */
    jobIdTarget?: bigint;
    /**
     * @generated from protobuf field: optional string target_job_name = 12;
     */
    targetJobName?: string;
    /**
     * @generated from protobuf field: optional int32 eresult = 13;
     */
    eresult?: number;
    /**
     * @generated from protobuf field: optional string error_message = 14;
     */
    errorMessage?: string;
    /**
     * @generated from protobuf field: optional GCProtoBufMsgSrc gc_msg_src = 200;
     */
    gcMsgSrc?: GCProtoBufMsgSrc;
    /**
     * @generated from protobuf field: optional int32 gc_dir_index_source = 201;
     */
    gcDirIndexSource?: number;
}
/**
 * @generated from protobuf message CGCSystemMsg_GetAccountDetails
 */
export interface CGCSystemMsg_GetAccountDetails {
    /**
     * @generated from protobuf field: optional fixed64 steamid = 1;
     */
    steamid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 appid = 2;
     */
    appid?: number;
}
/**
 * @generated from protobuf message CGCSystemMsg_GetAccountDetails_Response
 */
export interface CGCSystemMsg_GetAccountDetails_Response {
    /**
     * @generated from protobuf field: optional uint32 eresult_deprecated = 1;
     */
    eresultDeprecated?: number;
    /**
     * @generated from protobuf field: optional string account_name = 2;
     */
    accountName?: string;
    /**
     * @generated from protobuf field: optional string persona_name = 3;
     */
    personaName?: string;
    /**
     * @generated from protobuf field: optional bool is_profile_created = 26;
     */
    isProfileCreated?: boolean;
    /**
     * @generated from protobuf field: optional bool is_profile_public = 4;
     */
    isProfilePublic?: boolean;
    /**
     * @generated from protobuf field: optional bool is_inventory_public = 5;
     */
    isInventoryPublic?: boolean;
    /**
     * @generated from protobuf field: optional bool is_vac_banned = 7;
     */
    isVacBanned?: boolean;
    /**
     * @generated from protobuf field: optional bool is_cyber_cafe = 8;
     */
    isCyberCafe?: boolean;
    /**
     * @generated from protobuf field: optional bool is_school_account = 9;
     */
    isSchoolAccount?: boolean;
    /**
     * @generated from protobuf field: optional bool is_limited = 10;
     */
    isLimited?: boolean;
    /**
     * @generated from protobuf field: optional bool is_subscribed = 11;
     */
    isSubscribed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 package = 12;
     */
    package?: number;
    /**
     * @generated from protobuf field: optional bool is_free_trial_account = 13;
     */
    isFreeTrialAccount?: boolean;
    /**
     * @generated from protobuf field: optional uint32 free_trial_expiration = 14;
     */
    freeTrialExpiration?: number;
    /**
     * @generated from protobuf field: optional bool is_low_violence = 15;
     */
    isLowViolence?: boolean;
    /**
     * @generated from protobuf field: optional bool is_account_locked_down = 16;
     */
    isAccountLockedDown?: boolean;
    /**
     * @generated from protobuf field: optional bool is_community_banned = 17;
     */
    isCommunityBanned?: boolean;
    /**
     * @generated from protobuf field: optional bool is_trade_banned = 18;
     */
    isTradeBanned?: boolean;
    /**
     * @generated from protobuf field: optional uint32 trade_ban_expiration = 19;
     */
    tradeBanExpiration?: number;
    /**
     * @generated from protobuf field: optional uint32 accountid = 20;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint32 suspension_end_time = 21;
     */
    suspensionEndTime?: number;
    /**
     * @generated from protobuf field: optional string currency = 22;
     */
    currency?: string;
    /**
     * @generated from protobuf field: optional uint32 steam_level = 23;
     */
    steamLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 friend_count = 24;
     */
    friendCount?: number;
    /**
     * @generated from protobuf field: optional uint32 account_creation_time = 25;
     */
    accountCreationTime?: number;
    /**
     * @generated from protobuf field: optional bool is_steamguard_enabled = 27;
     */
    isSteamguardEnabled?: boolean;
    /**
     * @generated from protobuf field: optional bool is_phone_verified = 28;
     */
    isPhoneVerified?: boolean;
    /**
     * @generated from protobuf field: optional bool is_two_factor_auth_enabled = 29;
     */
    isTwoFactorAuthEnabled?: boolean;
    /**
     * @generated from protobuf field: optional uint32 two_factor_enabled_time = 30;
     */
    twoFactorEnabledTime?: number;
    /**
     * @generated from protobuf field: optional uint32 phone_verification_time = 31;
     */
    phoneVerificationTime?: number;
    /**
     * @generated from protobuf field: optional uint64 phone_id = 33;
     */
    phoneId?: bigint;
    /**
     * @generated from protobuf field: optional bool is_phone_identifying = 34;
     */
    isPhoneIdentifying?: boolean;
    /**
     * @generated from protobuf field: optional uint32 rt_identity_linked = 35;
     */
    rtIdentityLinked?: number;
    /**
     * @generated from protobuf field: optional uint32 rt_birth_date = 36;
     */
    rtBirthDate?: number;
    /**
     * @generated from protobuf field: optional string txn_country_code = 37;
     */
    txnCountryCode?: string;
    /**
     * @generated from protobuf field: optional bool has_accepted_china_ssa = 38;
     */
    hasAcceptedChinaSsa?: boolean;
    /**
     * @generated from protobuf field: optional bool is_banned_steam_china = 39;
     */
    isBannedSteamChina?: boolean;
}
/**
 * @generated from protobuf message CIPLocationInfo
 */
export interface CIPLocationInfo {
    /**
     * @generated from protobuf field: optional uint32 ip = 1;
     */
    ip?: number;
    /**
     * @generated from protobuf field: optional float latitude = 2;
     */
    latitude?: number;
    /**
     * @generated from protobuf field: optional float longitude = 3;
     */
    longitude?: number;
    /**
     * @generated from protobuf field: optional string country = 4;
     */
    country?: string;
    /**
     * @generated from protobuf field: optional string state = 5;
     */
    state?: string;
    /**
     * @generated from protobuf field: optional string city = 6;
     */
    city?: string;
}
/**
 * @generated from protobuf message CGCMsgGetIPLocationResponse
 */
export interface CGCMsgGetIPLocationResponse {
    /**
     * @generated from protobuf field: repeated CIPLocationInfo infos = 1;
     */
    infos: CIPLocationInfo[];
}
/**
 * @generated from protobuf enum EGCPlatform
 */
export enum EGCPlatform {
    /**
     * @generated from protobuf enum value: k_eGCPlatform_None = 0;
     */
    k_eGCPlatform_None = 0,
    /**
     * @generated from protobuf enum value: k_eGCPlatform_PC = 1;
     */
    k_eGCPlatform_PC = 1,
    /**
     * @generated from protobuf enum value: k_eGCPlatform_Mac = 2;
     */
    k_eGCPlatform_Mac = 2,
    /**
     * @generated from protobuf enum value: k_eGCPlatform_Linux = 3;
     */
    k_eGCPlatform_Linux = 3,
    /**
     * @generated from protobuf enum value: k_eGCPlatform_Android = 4;
     */
    k_eGCPlatform_Android = 4,
    /**
     * @generated from protobuf enum value: k_eGCPlatform_iOS = 5;
     */
    k_eGCPlatform_iOS = 5
}
/**
 * @generated from protobuf enum GCProtoBufMsgSrc
 */
export enum GCProtoBufMsgSrc {
    /**
     * @generated from protobuf enum value: GCProtoBufMsgSrc_Unspecified = 0;
     */
    GCProtoBufMsgSrc_Unspecified = 0,
    /**
     * @generated from protobuf enum value: GCProtoBufMsgSrc_FromSystem = 1;
     */
    GCProtoBufMsgSrc_FromSystem = 1,
    /**
     * @generated from protobuf enum value: GCProtoBufMsgSrc_FromSteamID = 2;
     */
    GCProtoBufMsgSrc_FromSteamID = 2,
    /**
     * @generated from protobuf enum value: GCProtoBufMsgSrc_FromGC = 3;
     */
    GCProtoBufMsgSrc_FromGC = 3,
    /**
     * @generated from protobuf enum value: GCProtoBufMsgSrc_ReplySystem = 4;
     */
    GCProtoBufMsgSrc_ReplySystem = 4,
    /**
     * @generated from protobuf enum value: GCProtoBufMsgSrc_SpoofedSteamID = 5;
     */
    GCProtoBufMsgSrc_SpoofedSteamID = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class CMsgProtoBufHeader$Type extends MessageType<CMsgProtoBufHeader> {
    constructor() {
        super("CMsgProtoBufHeader", [
            { no: 1, name: "client_steam_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "client_session_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "source_app_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "job_id_source", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "job_id_target", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "target_job_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "eresult", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "error_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 200, name: "gc_msg_src", kind: "enum", opt: true, T: () => ["GCProtoBufMsgSrc", GCProtoBufMsgSrc] },
            { no: 201, name: "gc_dir_index_source", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ], { msgpool_soft_limit: 256, msgpool_hard_limit: 1024 });
    }
    create(value?: PartialMessage<CMsgProtoBufHeader>): CMsgProtoBufHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CMsgProtoBufHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgProtoBufHeader): CMsgProtoBufHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 client_steam_id */ 1:
                    message.clientSteamId = reader.fixed64().toBigInt();
                    break;
                case /* optional int32 client_session_id */ 2:
                    message.clientSessionId = reader.int32();
                    break;
                case /* optional uint32 source_app_id */ 3:
                    message.sourceAppId = reader.uint32();
                    break;
                case /* optional fixed64 job_id_source */ 10:
                    message.jobIdSource = reader.fixed64().toBigInt();
                    break;
                case /* optional fixed64 job_id_target */ 11:
                    message.jobIdTarget = reader.fixed64().toBigInt();
                    break;
                case /* optional string target_job_name */ 12:
                    message.targetJobName = reader.string();
                    break;
                case /* optional int32 eresult */ 13:
                    message.eresult = reader.int32();
                    break;
                case /* optional string error_message */ 14:
                    message.errorMessage = reader.string();
                    break;
                case /* optional GCProtoBufMsgSrc gc_msg_src */ 200:
                    message.gcMsgSrc = reader.int32();
                    break;
                case /* optional int32 gc_dir_index_source */ 201:
                    message.gcDirIndexSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgProtoBufHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 client_steam_id = 1; */
        if (message.clientSteamId !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.clientSteamId);
        /* optional int32 client_session_id = 2; */
        if (message.clientSessionId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.clientSessionId);
        /* optional uint32 source_app_id = 3; */
        if (message.sourceAppId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.sourceAppId);
        /* optional fixed64 job_id_source = 10; */
        if (message.jobIdSource !== undefined)
            writer.tag(10, WireType.Bit64).fixed64(message.jobIdSource);
        /* optional fixed64 job_id_target = 11; */
        if (message.jobIdTarget !== undefined)
            writer.tag(11, WireType.Bit64).fixed64(message.jobIdTarget);
        /* optional string target_job_name = 12; */
        if (message.targetJobName !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.targetJobName);
        /* optional int32 eresult = 13; */
        if (message.eresult !== undefined)
            writer.tag(13, WireType.Varint).int32(message.eresult);
        /* optional string error_message = 14; */
        if (message.errorMessage !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.errorMessage);
        /* optional GCProtoBufMsgSrc gc_msg_src = 200; */
        if (message.gcMsgSrc !== undefined)
            writer.tag(200, WireType.Varint).int32(message.gcMsgSrc);
        /* optional int32 gc_dir_index_source = 201; */
        if (message.gcDirIndexSource !== undefined)
            writer.tag(201, WireType.Varint).int32(message.gcDirIndexSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgProtoBufHeader
 */
export const CMsgProtoBufHeader = new CMsgProtoBufHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGCSystemMsg_GetAccountDetails$Type extends MessageType<CGCSystemMsg_GetAccountDetails> {
    constructor() {
        super("CGCSystemMsg_GetAccountDetails", [
            { no: 1, name: "steamid", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ], { msgpool_soft_limit: 128, msgpool_hard_limit: 512 });
    }
    create(value?: PartialMessage<CGCSystemMsg_GetAccountDetails>): CGCSystemMsg_GetAccountDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGCSystemMsg_GetAccountDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGCSystemMsg_GetAccountDetails): CGCSystemMsg_GetAccountDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 steamid */ 1:
                    message.steamid = reader.fixed64().toBigInt();
                    break;
                case /* optional uint32 appid */ 2:
                    message.appid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGCSystemMsg_GetAccountDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 steamid = 1; */
        if (message.steamid !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.steamid);
        /* optional uint32 appid = 2; */
        if (message.appid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.appid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGCSystemMsg_GetAccountDetails
 */
export const CGCSystemMsg_GetAccountDetails = new CGCSystemMsg_GetAccountDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGCSystemMsg_GetAccountDetails_Response$Type extends MessageType<CGCSystemMsg_GetAccountDetails_Response> {
    constructor() {
        super("CGCSystemMsg_GetAccountDetails_Response", [
            { no: 1, name: "eresult_deprecated", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "persona_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "is_profile_created", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "is_profile_public", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_inventory_public", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "is_vac_banned", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "is_cyber_cafe", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "is_school_account", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "is_limited", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "is_subscribed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "package", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_free_trial_account", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "free_trial_expiration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_low_violence", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "is_account_locked_down", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "is_community_banned", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "is_trade_banned", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "trade_ban_expiration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 20, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 21, name: "suspension_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 22, name: "currency", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "steam_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 24, name: "friend_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 25, name: "account_creation_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 27, name: "is_steamguard_enabled", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "is_phone_verified", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 29, name: "is_two_factor_auth_enabled", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 30, name: "two_factor_enabled_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 31, name: "phone_verification_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 33, name: "phone_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 34, name: "is_phone_identifying", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 35, name: "rt_identity_linked", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 36, name: "rt_birth_date", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 37, name: "txn_country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 38, name: "has_accepted_china_ssa", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 39, name: "is_banned_steam_china", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ], { msgpool_soft_limit: 128, msgpool_hard_limit: 512 });
    }
    create(value?: PartialMessage<CGCSystemMsg_GetAccountDetails_Response>): CGCSystemMsg_GetAccountDetails_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CGCSystemMsg_GetAccountDetails_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGCSystemMsg_GetAccountDetails_Response): CGCSystemMsg_GetAccountDetails_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 eresult_deprecated */ 1:
                    message.eresultDeprecated = reader.uint32();
                    break;
                case /* optional string account_name */ 2:
                    message.accountName = reader.string();
                    break;
                case /* optional string persona_name */ 3:
                    message.personaName = reader.string();
                    break;
                case /* optional bool is_profile_created */ 26:
                    message.isProfileCreated = reader.bool();
                    break;
                case /* optional bool is_profile_public */ 4:
                    message.isProfilePublic = reader.bool();
                    break;
                case /* optional bool is_inventory_public */ 5:
                    message.isInventoryPublic = reader.bool();
                    break;
                case /* optional bool is_vac_banned */ 7:
                    message.isVacBanned = reader.bool();
                    break;
                case /* optional bool is_cyber_cafe */ 8:
                    message.isCyberCafe = reader.bool();
                    break;
                case /* optional bool is_school_account */ 9:
                    message.isSchoolAccount = reader.bool();
                    break;
                case /* optional bool is_limited */ 10:
                    message.isLimited = reader.bool();
                    break;
                case /* optional bool is_subscribed */ 11:
                    message.isSubscribed = reader.bool();
                    break;
                case /* optional uint32 package */ 12:
                    message.package = reader.uint32();
                    break;
                case /* optional bool is_free_trial_account */ 13:
                    message.isFreeTrialAccount = reader.bool();
                    break;
                case /* optional uint32 free_trial_expiration */ 14:
                    message.freeTrialExpiration = reader.uint32();
                    break;
                case /* optional bool is_low_violence */ 15:
                    message.isLowViolence = reader.bool();
                    break;
                case /* optional bool is_account_locked_down */ 16:
                    message.isAccountLockedDown = reader.bool();
                    break;
                case /* optional bool is_community_banned */ 17:
                    message.isCommunityBanned = reader.bool();
                    break;
                case /* optional bool is_trade_banned */ 18:
                    message.isTradeBanned = reader.bool();
                    break;
                case /* optional uint32 trade_ban_expiration */ 19:
                    message.tradeBanExpiration = reader.uint32();
                    break;
                case /* optional uint32 accountid */ 20:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint32 suspension_end_time */ 21:
                    message.suspensionEndTime = reader.uint32();
                    break;
                case /* optional string currency */ 22:
                    message.currency = reader.string();
                    break;
                case /* optional uint32 steam_level */ 23:
                    message.steamLevel = reader.uint32();
                    break;
                case /* optional uint32 friend_count */ 24:
                    message.friendCount = reader.uint32();
                    break;
                case /* optional uint32 account_creation_time */ 25:
                    message.accountCreationTime = reader.uint32();
                    break;
                case /* optional bool is_steamguard_enabled */ 27:
                    message.isSteamguardEnabled = reader.bool();
                    break;
                case /* optional bool is_phone_verified */ 28:
                    message.isPhoneVerified = reader.bool();
                    break;
                case /* optional bool is_two_factor_auth_enabled */ 29:
                    message.isTwoFactorAuthEnabled = reader.bool();
                    break;
                case /* optional uint32 two_factor_enabled_time */ 30:
                    message.twoFactorEnabledTime = reader.uint32();
                    break;
                case /* optional uint32 phone_verification_time */ 31:
                    message.phoneVerificationTime = reader.uint32();
                    break;
                case /* optional uint64 phone_id */ 33:
                    message.phoneId = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_phone_identifying */ 34:
                    message.isPhoneIdentifying = reader.bool();
                    break;
                case /* optional uint32 rt_identity_linked */ 35:
                    message.rtIdentityLinked = reader.uint32();
                    break;
                case /* optional uint32 rt_birth_date */ 36:
                    message.rtBirthDate = reader.uint32();
                    break;
                case /* optional string txn_country_code */ 37:
                    message.txnCountryCode = reader.string();
                    break;
                case /* optional bool has_accepted_china_ssa */ 38:
                    message.hasAcceptedChinaSsa = reader.bool();
                    break;
                case /* optional bool is_banned_steam_china */ 39:
                    message.isBannedSteamChina = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGCSystemMsg_GetAccountDetails_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 eresult_deprecated = 1; */
        if (message.eresultDeprecated !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.eresultDeprecated);
        /* optional string account_name = 2; */
        if (message.accountName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.accountName);
        /* optional string persona_name = 3; */
        if (message.personaName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.personaName);
        /* optional bool is_profile_created = 26; */
        if (message.isProfileCreated !== undefined)
            writer.tag(26, WireType.Varint).bool(message.isProfileCreated);
        /* optional bool is_profile_public = 4; */
        if (message.isProfilePublic !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isProfilePublic);
        /* optional bool is_inventory_public = 5; */
        if (message.isInventoryPublic !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isInventoryPublic);
        /* optional bool is_vac_banned = 7; */
        if (message.isVacBanned !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isVacBanned);
        /* optional bool is_cyber_cafe = 8; */
        if (message.isCyberCafe !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isCyberCafe);
        /* optional bool is_school_account = 9; */
        if (message.isSchoolAccount !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isSchoolAccount);
        /* optional bool is_limited = 10; */
        if (message.isLimited !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isLimited);
        /* optional bool is_subscribed = 11; */
        if (message.isSubscribed !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isSubscribed);
        /* optional uint32 package = 12; */
        if (message.package !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.package);
        /* optional bool is_free_trial_account = 13; */
        if (message.isFreeTrialAccount !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isFreeTrialAccount);
        /* optional uint32 free_trial_expiration = 14; */
        if (message.freeTrialExpiration !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.freeTrialExpiration);
        /* optional bool is_low_violence = 15; */
        if (message.isLowViolence !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isLowViolence);
        /* optional bool is_account_locked_down = 16; */
        if (message.isAccountLockedDown !== undefined)
            writer.tag(16, WireType.Varint).bool(message.isAccountLockedDown);
        /* optional bool is_community_banned = 17; */
        if (message.isCommunityBanned !== undefined)
            writer.tag(17, WireType.Varint).bool(message.isCommunityBanned);
        /* optional bool is_trade_banned = 18; */
        if (message.isTradeBanned !== undefined)
            writer.tag(18, WireType.Varint).bool(message.isTradeBanned);
        /* optional uint32 trade_ban_expiration = 19; */
        if (message.tradeBanExpiration !== undefined)
            writer.tag(19, WireType.Varint).uint32(message.tradeBanExpiration);
        /* optional uint32 accountid = 20; */
        if (message.accountid !== undefined)
            writer.tag(20, WireType.Varint).uint32(message.accountid);
        /* optional uint32 suspension_end_time = 21; */
        if (message.suspensionEndTime !== undefined)
            writer.tag(21, WireType.Varint).uint32(message.suspensionEndTime);
        /* optional string currency = 22; */
        if (message.currency !== undefined)
            writer.tag(22, WireType.LengthDelimited).string(message.currency);
        /* optional uint32 steam_level = 23; */
        if (message.steamLevel !== undefined)
            writer.tag(23, WireType.Varint).uint32(message.steamLevel);
        /* optional uint32 friend_count = 24; */
        if (message.friendCount !== undefined)
            writer.tag(24, WireType.Varint).uint32(message.friendCount);
        /* optional uint32 account_creation_time = 25; */
        if (message.accountCreationTime !== undefined)
            writer.tag(25, WireType.Varint).uint32(message.accountCreationTime);
        /* optional bool is_steamguard_enabled = 27; */
        if (message.isSteamguardEnabled !== undefined)
            writer.tag(27, WireType.Varint).bool(message.isSteamguardEnabled);
        /* optional bool is_phone_verified = 28; */
        if (message.isPhoneVerified !== undefined)
            writer.tag(28, WireType.Varint).bool(message.isPhoneVerified);
        /* optional bool is_two_factor_auth_enabled = 29; */
        if (message.isTwoFactorAuthEnabled !== undefined)
            writer.tag(29, WireType.Varint).bool(message.isTwoFactorAuthEnabled);
        /* optional uint32 two_factor_enabled_time = 30; */
        if (message.twoFactorEnabledTime !== undefined)
            writer.tag(30, WireType.Varint).uint32(message.twoFactorEnabledTime);
        /* optional uint32 phone_verification_time = 31; */
        if (message.phoneVerificationTime !== undefined)
            writer.tag(31, WireType.Varint).uint32(message.phoneVerificationTime);
        /* optional uint64 phone_id = 33; */
        if (message.phoneId !== undefined)
            writer.tag(33, WireType.Varint).uint64(message.phoneId);
        /* optional bool is_phone_identifying = 34; */
        if (message.isPhoneIdentifying !== undefined)
            writer.tag(34, WireType.Varint).bool(message.isPhoneIdentifying);
        /* optional uint32 rt_identity_linked = 35; */
        if (message.rtIdentityLinked !== undefined)
            writer.tag(35, WireType.Varint).uint32(message.rtIdentityLinked);
        /* optional uint32 rt_birth_date = 36; */
        if (message.rtBirthDate !== undefined)
            writer.tag(36, WireType.Varint).uint32(message.rtBirthDate);
        /* optional string txn_country_code = 37; */
        if (message.txnCountryCode !== undefined)
            writer.tag(37, WireType.LengthDelimited).string(message.txnCountryCode);
        /* optional bool has_accepted_china_ssa = 38; */
        if (message.hasAcceptedChinaSsa !== undefined)
            writer.tag(38, WireType.Varint).bool(message.hasAcceptedChinaSsa);
        /* optional bool is_banned_steam_china = 39; */
        if (message.isBannedSteamChina !== undefined)
            writer.tag(39, WireType.Varint).bool(message.isBannedSteamChina);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGCSystemMsg_GetAccountDetails_Response
 */
export const CGCSystemMsg_GetAccountDetails_Response = new CGCSystemMsg_GetAccountDetails_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CIPLocationInfo$Type extends MessageType<CIPLocationInfo> {
    constructor() {
        super("CIPLocationInfo", [
            { no: 1, name: "ip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "latitude", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "longitude", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "country", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "state", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "city", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CIPLocationInfo>): CIPLocationInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CIPLocationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CIPLocationInfo): CIPLocationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 ip */ 1:
                    message.ip = reader.uint32();
                    break;
                case /* optional float latitude */ 2:
                    message.latitude = reader.float();
                    break;
                case /* optional float longitude */ 3:
                    message.longitude = reader.float();
                    break;
                case /* optional string country */ 4:
                    message.country = reader.string();
                    break;
                case /* optional string state */ 5:
                    message.state = reader.string();
                    break;
                case /* optional string city */ 6:
                    message.city = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CIPLocationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 ip = 1; */
        if (message.ip !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.ip);
        /* optional float latitude = 2; */
        if (message.latitude !== undefined)
            writer.tag(2, WireType.Bit32).float(message.latitude);
        /* optional float longitude = 3; */
        if (message.longitude !== undefined)
            writer.tag(3, WireType.Bit32).float(message.longitude);
        /* optional string country = 4; */
        if (message.country !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.country);
        /* optional string state = 5; */
        if (message.state !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.state);
        /* optional string city = 6; */
        if (message.city !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.city);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CIPLocationInfo
 */
export const CIPLocationInfo = new CIPLocationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGCMsgGetIPLocationResponse$Type extends MessageType<CGCMsgGetIPLocationResponse> {
    constructor() {
        super("CGCMsgGetIPLocationResponse", [
            { no: 1, name: "infos", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CIPLocationInfo }
        ]);
    }
    create(value?: PartialMessage<CGCMsgGetIPLocationResponse>): CGCMsgGetIPLocationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.infos = [];
        if (value !== undefined)
            reflectionMergePartial<CGCMsgGetIPLocationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGCMsgGetIPLocationResponse): CGCMsgGetIPLocationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CIPLocationInfo infos */ 1:
                    message.infos.push(CIPLocationInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CGCMsgGetIPLocationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CIPLocationInfo infos = 1; */
        for (let i = 0; i < message.infos.length; i++)
            CIPLocationInfo.internalBinaryWrite(message.infos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CGCMsgGetIPLocationResponse
 */
export const CGCMsgGetIPLocationResponse = new CGCMsgGetIPLocationResponse$Type();
